; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\flash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Core\Inc -IC:\workspace\stm32_bootloader\RTE\_stm32iap -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DSTM32F10X_HD -DSTM32F103xE --omf_browse=.\objects\flash.crf Core\Src\flash.c]
                          THUMB

                          AREA ||i.FLASH_Erase||, CODE, READONLY, ALIGN=2

                  FLASH_Erase PROC
;;;33     
;;;34     void FLASH_Erase(uint32_t Add)
000000  b500              PUSH     {lr}
;;;35     {
000002  4602              MOV      r2,r0
;;;36         if (!FLASH_WaitForFinish()) {
000004  f7fffffe          BL       FLASH_WaitForFinish
000008  b900              CBNZ     r0,|L1.12|
                  |L1.10|
;;;37             return;
;;;38         }
;;;39                     
;;;40         SET_BIT(FLASH->CR, FLASH_CR_PER);
;;;41         WRITE_REG(FLASH->AR, Add);
;;;42         SET_BIT(FLASH->CR, FLASH_CR_STRT);
;;;43             
;;;44         while (FLASH->SR & FLASH_SR_BSY) {}
;;;45                 
;;;46         if (!FLASH_WaitForFinish()) {
;;;47             return;
;;;48         }
;;;49             
;;;50         CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;51     }
00000a  bd00              POP      {pc}
                  |L1.12|
00000c  480f              LDR      r0,|L1.76|
00000e  6900              LDR      r0,[r0,#0x10]         ;40
000010  f0400002          ORR      r0,r0,#2              ;40
000014  490d              LDR      r1,|L1.76|
000016  6108              STR      r0,[r1,#0x10]         ;40
000018  4608              MOV      r0,r1                 ;41
00001a  6142              STR      r2,[r0,#0x14]         ;41
00001c  6900              LDR      r0,[r0,#0x10]         ;42
00001e  f0400040          ORR      r0,r0,#0x40           ;42
000022  6108              STR      r0,[r1,#0x10]         ;42
000024  bf00              NOP                            ;44
                  |L1.38|
000026  4809              LDR      r0,|L1.76|
000028  68c0              LDR      r0,[r0,#0xc]          ;44
00002a  f0000001          AND      r0,r0,#1              ;44
00002e  2800              CMP      r0,#0                 ;44
000030  d1f9              BNE      |L1.38|
000032  f7fffffe          BL       FLASH_WaitForFinish
000036  b900              CBNZ     r0,|L1.58|
000038  e7e7              B        |L1.10|
                  |L1.58|
00003a  4804              LDR      r0,|L1.76|
00003c  6900              LDR      r0,[r0,#0x10]         ;50
00003e  f0200002          BIC      r0,r0,#2              ;50
000042  4902              LDR      r1,|L1.76|
000044  6108              STR      r0,[r1,#0x10]         ;50
000046  bf00              NOP      
000048  e7df              B        |L1.10|
;;;52     
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0x40022000

                          AREA ||i.FLASH_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_Lock PROC
;;;4      
;;;5      void FLASH_Lock()
000000  4803              LDR      r0,|L2.16|
;;;6      {
;;;7          SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000002  6900              LDR      r0,[r0,#0x10]
000004  f0400080          ORR      r0,r0,#0x80
000008  4901              LDR      r1,|L2.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;8      }
00000c  4770              BX       lr
;;;9      
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_Program||, CODE, READONLY, ALIGN=2

                  FLASH_Program PROC
;;;52     
;;;53     bool FLASH_Program(uint8_t *dest, uint8_t *src, uint32_t len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;54     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;55         uint8_t i;
;;;56         uint32_t Add;
;;;57         uint32_t Data;
;;;58         uint32_t index = 0;
00000a  2500              MOVS     r5,#0
;;;59     
;;;60         for (index=0;index<len;index+=4) {
00000c  bf00              NOP      
00000e  e02e              B        |L3.110|
                  |L3.16|
;;;61             Add = (uint32_t) (dest + index);
000010  eb060905          ADD      r9,r6,r5
;;;62             Data = *(uint32_t *) (src + index);
000014  f857a005          LDR      r10,[r7,r5]
;;;63     
;;;64             if (!FLASH_WaitForFinish()) {
000018  f7fffffe          BL       FLASH_WaitForFinish
00001c  b910              CBNZ     r0,|L3.36|
;;;65                 return false;
00001e  2000              MOVS     r0,#0
                  |L3.32|
;;;66             }
;;;67                 
;;;68             for (i=0;i<2;i++) {
;;;69                 SET_BIT(FLASH->CR, FLASH_CR_PG);
;;;70                 *(__IO uint16_t*) (Add + 2u * i) = (uint16_t) (Data >> (16u * i));
;;;71             }
;;;72                 
;;;73             if (!FLASH_WaitForFinish()) {
;;;74                 return false;
;;;75             }
;;;76                 
;;;77             CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
;;;78                 
;;;79             if (*(uint32_t *) (src) != *(uint32_t *) (dest)) {
;;;80                 Error_Handle();
;;;81                 return false;
;;;82             }
;;;83         }
;;;84         return true;
;;;85     }
000020  e8bd87f0          POP      {r4-r10,pc}
                  |L3.36|
000024  2400              MOVS     r4,#0                 ;68
000026  e00c              B        |L3.66|
                  |L3.40|
000028  4813              LDR      r0,|L3.120|
00002a  6900              LDR      r0,[r0,#0x10]         ;69
00002c  f0400001          ORR      r0,r0,#1              ;69
000030  4911              LDR      r1,|L3.120|
000032  6108              STR      r0,[r1,#0x10]         ;69
000034  0120              LSLS     r0,r4,#4              ;70
000036  fa2af000          LSR      r0,r10,r0             ;70
00003a  f8290014          STRH     r0,[r9,r4,LSL #1]     ;70
00003e  1c60              ADDS     r0,r4,#1              ;68
000040  b2c4              UXTB     r4,r0                 ;68
                  |L3.66|
000042  2c02              CMP      r4,#2                 ;68
000044  dbf0              BLT      |L3.40|
000046  f7fffffe          BL       FLASH_WaitForFinish
00004a  b908              CBNZ     r0,|L3.80|
00004c  2000              MOVS     r0,#0                 ;74
00004e  e7e7              B        |L3.32|
                  |L3.80|
000050  4809              LDR      r0,|L3.120|
000052  6900              LDR      r0,[r0,#0x10]         ;77
000054  f0200001          BIC      r0,r0,#1              ;77
000058  4907              LDR      r1,|L3.120|
00005a  6108              STR      r0,[r1,#0x10]         ;77
00005c  6838              LDR      r0,[r7,#0]            ;79
00005e  6831              LDR      r1,[r6,#0]            ;79
000060  4288              CMP      r0,r1                 ;79
000062  d003              BEQ      |L3.108|
000064  f7fffffe          BL       Error_Handle
000068  2000              MOVS     r0,#0                 ;81
00006a  e7d9              B        |L3.32|
                  |L3.108|
00006c  1d2d              ADDS     r5,r5,#4              ;60
                  |L3.110|
00006e  4545              CMP      r5,r8                 ;60
000070  d3ce              BCC      |L3.16|
000072  2001              MOVS     r0,#1                 ;84
000074  e7d4              B        |L3.32|
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      0x40022000

                          AREA ||i.FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_Unlock PROC
;;;9      
;;;10     void FLASH_Unlock()
000000  4805              LDR      r0,|L4.24|
;;;11     {
;;;12         if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0) {
000002  6900              LDR      r0,[r0,#0x10]
000004  f0000080          AND      r0,r0,#0x80
000008  b120              CBZ      r0,|L4.20|
;;;13             WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00000a  4804              LDR      r0,|L4.28|
00000c  4902              LDR      r1,|L4.24|
00000e  6048              STR      r0,[r1,#4]
;;;14             WRITE_REG(FLASH->KEYR, FLASH_KEY2);
000010  4803              LDR      r0,|L4.32|
000012  6048              STR      r0,[r1,#4]
                  |L4.20|
;;;15         }
;;;16     }
000014  4770              BX       lr
;;;17     
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x40022000
                  |L4.28|
                          DCD      0x45670123
                  |L4.32|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_WaitForFinish||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForFinish PROC
;;;17     
;;;18     bool FLASH_WaitForFinish()
000000  bf00              NOP      
                  |L5.2|
;;;19     {
;;;20         while (FLASH->SR & FLASH_SR_BSY) {}
000002  4810              LDR      r0,|L5.68|
000004  68c0              LDR      r0,[r0,#0xc]
000006  f0000001          AND      r0,r0,#1
00000a  2800              CMP      r0,#0
00000c  d1f9              BNE      |L5.2|
;;;21                 
;;;22         if (FLASH->SR & FLASH_SR_EOP) {
00000e  480d              LDR      r0,|L5.68|
000010  68c0              LDR      r0,[r0,#0xc]
000012  f0000020          AND      r0,r0,#0x20
000016  b110              CBZ      r0,|L5.30|
;;;23             FLASH->SR = FLASH_SR_EOP;
000018  2020              MOVS     r0,#0x20
00001a  490a              LDR      r1,|L5.68|
00001c  60c8              STR      r0,[r1,#0xc]
                  |L5.30|
;;;24         }
;;;25             
;;;26         if ((FLASH->SR & FLASH_SR_WRPRTERR) ||
00001e  4809              LDR      r0,|L5.68|
000020  68c0              LDR      r0,[r0,#0xc]
000022  f0000010          AND      r0,r0,#0x10
000026  b948              CBNZ     r0,|L5.60|
;;;27             (FLASH->SR & FLASH_SR_PGERR) ||
000028  4806              LDR      r0,|L5.68|
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  f0000004          AND      r0,r0,#4
000030  b920              CBNZ     r0,|L5.60|
;;;28             (FLASH->OBR & FLASH_OBR_OPTERR)) {
000032  4804              LDR      r0,|L5.68|
000034  69c0              LDR      r0,[r0,#0x1c]
000036  f0000001          AND      r0,r0,#1
00003a  b108              CBZ      r0,|L5.64|
                  |L5.60|
;;;29             return false;
00003c  2000              MOVS     r0,#0
                  |L5.62|
;;;30         }
;;;31         return true;
;;;32     }
00003e  4770              BX       lr
                  |L5.64|
000040  2001              MOVS     r0,#1                 ;31
000042  e7fc              B        |L5.62|
;;;33     
                          ENDP

                  |L5.68|
                          DCD      0x40022000

;*** Start embedded assembler ***

#line 1 "Core\\Src\\flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_flash_c_e033e5ec____REV16|
#line 388 ".\\Core\\Inc\\cmsis_armcc.h"
|__asm___7_flash_c_e033e5ec____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_flash_c_e033e5ec____REVSH|
#line 402
|__asm___7_flash_c_e033e5ec____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_flash_c_e033e5ec____RRX|
#line 587
|__asm___7_flash_c_e033e5ec____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
