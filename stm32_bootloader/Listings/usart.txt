; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\usart.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Core\Inc -IC:\workspace\stm32_bootloader\RTE\_stm32iap -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DSTM32F10X_HD -DSTM32F103xE --omf_browse=.\objects\usart.crf Core\Src\usart.c]
                          THUMB

                          AREA ||i.USART_Init||, CODE, READONLY, ALIGN=2

                  USART_Init PROC
;;;17     
;;;18     void USART_Init()
000000  481a              LDR      r0,|L1.108|
;;;19     {
;;;20         if (READ_BIT(USART1->CR1, USART_CR1_UE) != (USART_CR1_UE)) {
000002  6800              LDR      r0,[r0,#0]
000004  f4005000          AND      r0,r0,#0x2000
000008  f5b05f00          CMP      r0,#0x2000
00000c  d019              BEQ      |L1.66|
;;;21             MODIFY_REG(USART1->CR1,
00000e  4817              LDR      r0,|L1.108|
000010  6800              LDR      r0,[r0,#0]
000012  f241610c          MOV      r1,#0x160c
000016  4388              BICS     r0,r0,r1
000018  f040000c          ORR      r0,r0,#0xc
00001c  4913              LDR      r1,|L1.108|
00001e  6008              STR      r0,[r1,#0]
;;;22                    (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE),
;;;23                    (USART_CR1_TE |USART_CR1_RE));
;;;24     
;;;25             MODIFY_REG(USART1->CR2, USART_CR2_STOP, 0);
000020  1d08              ADDS     r0,r1,#4
000022  6800              LDR      r0,[r0,#0]
000024  f4205040          BIC      r0,r0,#0x3000
000028  1d09              ADDS     r1,r1,#4
00002a  6008              STR      r0,[r1,#0]
;;;26     
;;;27             MODIFY_REG(USART1->CR3, USART_CR3_RTSE | USART_CR3_CTSE, 0);
00002c  1d08              ADDS     r0,r1,#4
00002e  6800              LDR      r0,[r0,#0]
000030  f4207040          BIC      r0,r0,#0x300
000034  1d09              ADDS     r1,r1,#4
000036  6008              STR      r0,[r1,#0]
;;;28     
;;;29             USART1->BRR = 0x271;
000038  f2402071          MOV      r0,#0x271
00003c  490b              LDR      r1,|L1.108|
00003e  1f09              SUBS     r1,r1,#4
000040  6008              STR      r0,[r1,#0]
                  |L1.66|
;;;30         }
;;;31     
;;;32         CLEAR_BIT(USART1->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
000042  480a              LDR      r0,|L1.108|
000044  1d00              ADDS     r0,r0,#4
000046  6800              LDR      r0,[r0,#0]
000048  f4204090          BIC      r0,r0,#0x4800
00004c  4907              LDR      r1,|L1.108|
00004e  1d09              ADDS     r1,r1,#4
000050  6008              STR      r0,[r1,#0]
;;;33         CLEAR_BIT(USART1->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
000052  1d08              ADDS     r0,r1,#4
000054  6800              LDR      r0,[r0,#0]
000056  f020002a          BIC      r0,r0,#0x2a
00005a  1d09              ADDS     r1,r1,#4
00005c  6008              STR      r0,[r1,#0]
;;;34     
;;;35         USART1->CR1 |= USART_CR1_UE;
00005e  4803              LDR      r0,|L1.108|
000060  6800              LDR      r0,[r0,#0]
000062  f4405000          ORR      r0,r0,#0x2000
000066  4901              LDR      r1,|L1.108|
000068  6008              STR      r0,[r1,#0]
;;;36     }
00006a  4770              BX       lr
;;;37     
                          ENDP

                  |L1.108|
                          DCD      0x4001380c

                          AREA ||i.USART_RxProcess||, CODE, READONLY, ALIGN=2

                  USART_RxProcess PROC
;;;37     
;;;38     void USART_RxProcess(uint8_t val)
000000  b501              PUSH     {r0,lr}
;;;39     {
;;;40         if (rxCnt >= USART_MAX_LEN) {
000002  4826              LDR      r0,|L2.156|
000004  7800              LDRB     r0,[r0,#0]  ; rxCnt
000006  28ff              CMP      r0,#0xff
000008  db06              BLT      |L2.24|
;;;41             memset(rxBuf, 0, USART_MAX_LEN);
00000a  21ff              MOVS     r1,#0xff
00000c  4824              LDR      r0,|L2.160|
00000e  f7fffffe          BL       __aeabi_memclr
;;;42             rxCnt = 0;
000012  2000              MOVS     r0,#0
000014  4921              LDR      r1,|L2.156|
000016  7008              STRB     r0,[r1,#0]
                  |L2.24|
;;;43         }
;;;44     
;;;45         if ((val == 0x7f) || (val == 0x08)) {
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  287f              CMP      r0,#0x7f
00001e  d003              BEQ      |L2.40|
000020  f89d0000          LDRB     r0,[sp,#0]
000024  2808              CMP      r0,#8
000026  d112              BNE      |L2.78|
                  |L2.40|
;;;46             if (rxCnt == 0) return;
000028  481c              LDR      r0,|L2.156|
00002a  7800              LDRB     r0,[r0,#0]  ; rxCnt
00002c  b900              CBNZ     r0,|L2.48|
                  |L2.46|
;;;47             rxBuf[rxCnt-1] = '\0';
;;;48             rxCnt--;
;;;49     			  uartprintf("\b \b");
;;;50         } else if (val == 0x0d) {
;;;51     			  uartprintf("\r\n");
;;;52             execute_command(rxBuf);
;;;53             memset(rxBuf, 0, USART_MAX_LEN);
;;;54             rxCnt = 0;
;;;55     			  uartprintf("\r\nstm32 > ");
;;;56         } else {
;;;57             rxBuf[rxCnt] = val;
;;;58             rxCnt++;
;;;59     			  USART_SendData(&val, 1);
;;;60         }
;;;61     }
00002e  bd08              POP      {r3,pc}
                  |L2.48|
000030  2100              MOVS     r1,#0                 ;47
000032  481a              LDR      r0,|L2.156|
000034  7800              LDRB     r0,[r0,#0]            ;47  ; rxCnt
000036  1e40              SUBS     r0,r0,#1              ;47
000038  4a19              LDR      r2,|L2.160|
00003a  5411              STRB     r1,[r2,r0]            ;47
00003c  4817              LDR      r0,|L2.156|
00003e  7800              LDRB     r0,[r0,#0]            ;48  ; rxCnt
000040  1e40              SUBS     r0,r0,#1              ;48
000042  4916              LDR      r1,|L2.156|
000044  7008              STRB     r0,[r1,#0]            ;48
000046  a017              ADR      r0,|L2.164|
000048  f7fffffe          BL       uartprintf
00004c  e023              B        |L2.150|
                  |L2.78|
00004e  f89d0000          LDRB     r0,[sp,#0]            ;50
000052  280d              CMP      r0,#0xd               ;50
000054  d110              BNE      |L2.120|
000056  a014              ADR      r0,|L2.168|
000058  f7fffffe          BL       uartprintf
00005c  4810              LDR      r0,|L2.160|
00005e  f7fffffe          BL       execute_command
000062  21ff              MOVS     r1,#0xff              ;53
000064  480e              LDR      r0,|L2.160|
000066  f7fffffe          BL       __aeabi_memclr
00006a  2000              MOVS     r0,#0                 ;54
00006c  490b              LDR      r1,|L2.156|
00006e  7008              STRB     r0,[r1,#0]            ;54
000070  a00e              ADR      r0,|L2.172|
000072  f7fffffe          BL       uartprintf
000076  e00e              B        |L2.150|
                  |L2.120|
000078  f89d0000          LDRB     r0,[sp,#0]            ;57
00007c  4908              LDR      r1,|L2.160|
00007e  4a07              LDR      r2,|L2.156|
000080  7812              LDRB     r2,[r2,#0]            ;57  ; rxCnt
000082  5488              STRB     r0,[r1,r2]            ;57
000084  4805              LDR      r0,|L2.156|
000086  7800              LDRB     r0,[r0,#0]            ;58  ; rxCnt
000088  1c40              ADDS     r0,r0,#1              ;58
00008a  4904              LDR      r1,|L2.156|
00008c  7008              STRB     r0,[r1,#0]            ;58
00008e  2101              MOVS     r1,#1                 ;59
000090  4668              MOV      r0,sp                 ;59
000092  f7fffffe          BL       USART_SendData
                  |L2.150|
000096  bf00              NOP      
000098  e7c9              B        |L2.46|
;;;62     
                          ENDP

00009a  0000              DCW      0x0000
                  |L2.156|
                          DCD      rxCnt
                  |L2.160|
                          DCD      rxBuf
                  |L2.164|
0000a4  08200800          DCB      "\b \b",0
                  |L2.168|
0000a8  0d0a00            DCB      "\r\n",0
0000ab  00                DCB      0
                  |L2.172|
0000ac  0d0a7374          DCB      "\r\nstm32 > ",0
0000b0  6d333220
0000b4  3e2000  
0000b7  00                DCB      0

                          AREA ||i.USART_SendData||, CODE, READONLY, ALIGN=2

                  USART_SendData PROC
;;;62     
;;;63     void USART_SendData(uint8_t *data, uint16_t len)
000000  b510              PUSH     {r4,lr}
;;;64     {
000002  4602              MOV      r2,r0
;;;65         uint16_t i;
;;;66     
;;;67         for (i=0;i<len;i++) {
000004  2000              MOVS     r0,#0
000006  e00c              B        |L3.34|
                  |L3.8|
;;;68             while ((USART1->SR &USART_SR_TXE) == 0) {}
000008  bf00              NOP      
                  |L3.10|
00000a  4b07              LDR      r3,|L3.40|
00000c  681b              LDR      r3,[r3,#0]
00000e  f0030380          AND      r3,r3,#0x80
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L3.10|
;;;69             USART1->DR= data[i]; 
000016  5c13              LDRB     r3,[r2,r0]
000018  4c03              LDR      r4,|L3.40|
00001a  1d24              ADDS     r4,r4,#4
00001c  6023              STR      r3,[r4,#0]
00001e  1c43              ADDS     r3,r0,#1              ;67
000020  b298              UXTH     r0,r3                 ;67
                  |L3.34|
000022  4288              CMP      r0,r1                 ;67
000024  dbf0              BLT      |L3.8|
;;;70         }
;;;71     }
000026  bd10              POP      {r4,pc}
;;;72     
                          ENDP

                  |L3.40|
                          DCD      0x40013800

                          AREA ||i.uartprintf||, CODE, READONLY, ALIGN=2

                  uartprintf PROC
;;;72     
;;;73     void uartprintf(const char* fmt, ...)
000000  b40f              PUSH     {r0-r3}
;;;74     {
000002  b538              PUSH     {r3-r5,lr}
;;;75         va_list ap;
;;;76         va_start(ap, fmt);
000004  a805              ADD      r0,sp,#0x14
000006  9000              STR      r0,[sp,#0]
;;;77     
;;;78         memset(UsartTxBuf, 0, USART_MAX_LEN);
000008  21ff              MOVS     r1,#0xff
00000a  480a              LDR      r0,|L4.52|
00000c  f7fffffe          BL       __aeabi_memclr
;;;79         vsnprintf((char *)UsartTxBuf, USART_MAX_LEN, fmt, ap);
000010  21ff              MOVS     r1,#0xff
000012  4808              LDR      r0,|L4.52|
000014  9b00              LDR      r3,[sp,#0]
000016  9a04              LDR      r2,[sp,#0x10]
000018  f7fffffe          BL       __c89vsnprintf
;;;80         
;;;81         USART_SendData(UsartTxBuf,strlen((char *)UsartTxBuf));
00001c  4805              LDR      r0,|L4.52|
00001e  f7fffffe          BL       strlen
000022  b284              UXTH     r4,r0
000024  4621              MOV      r1,r4
000026  4803              LDR      r0,|L4.52|
000028  f7fffffe          BL       USART_SendData
;;;82     }
00002c  bc38              POP      {r3-r5}
00002e  f85dfb14          LDR      pc,[sp],#0x14
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      UsartTxBuf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UsartTxBuf
                          %        255
                  txBuf
                          %        255
                  rxBuf
                          %        255

                          AREA ||.data||, DATA, ALIGN=0

                  rxCnt
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "Core\\Src\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_64030592____REV16|
#line 388 ".\\Core\\Inc\\cmsis_armcc.h"
|__asm___7_usart_c_64030592____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_64030592____REVSH|
#line 402
|__asm___7_usart_c_64030592____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_64030592____RRX|
#line 587
|__asm___7_usart_c_64030592____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
