; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\spi.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Core\Inc -IC:\workspace\stm32_bootloader\RTE\_stm32iap -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DSTM32F10X_HD -DSTM32F103xE --omf_browse=.\objects\spi.crf Core\Src\spi.c]
                          THUMB

                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=2

                  SPI_Init PROC
;;;6      
;;;7      void SPI_Init()
000000  480f              LDR      r0,|L1.64|
;;;8      {
;;;9          /* Disble the selected SPI peripheral */
;;;10         SPI1->CR1 &= (~SPI_CR1_SPE);
000002  6800              LDR      r0,[r0,#0]
000004  f0200040          BIC      r0,r0,#0x40
000008  490d              LDR      r1,|L1.64|
00000a  6008              STR      r0,[r1,#0]
;;;11     
;;;12         /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
;;;13         /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
;;;14             Communication speed, First bit and CRC calculation state */
;;;15         MODIFY_REG(SPI1->CR1, (SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_BR | SPI_CR1_LSBFIRST |
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]
000010  f64f71bf          MOV      r1,#0xffbf
000014  4388              BICS     r0,r0,r1
000016  f200301f          ADD      r0,r0,#0x31f
00001a  4909              LDR      r1,|L1.64|
00001c  6008              STR      r0,[r1,#0]
;;;16                     SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_RXONLY | SPI_CR1_DFF | SPI_CR1_CRCNEXT |
;;;17                     SPI_CR1_CRCEN | SPI_CR1_BIDIOE | SPI_CR1_BIDIMODE),
;;;18                     (SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_CPOL | SPI_CR1_CPHA | SPI_CR1_SSM | SPI_CR1_BR_1 |
;;;19                     SPI_CR1_BR_0));
;;;20     
;;;21         /* Configure : NSS management */
;;;22         MODIFY_REG(SPI1->CR2, SPI_CR2_SSOE, (SPI_CR1_SSM >> 16U));
00001e  4608              MOV      r0,r1
000020  6840              LDR      r0,[r0,#4]
000022  f0200004          BIC      r0,r0,#4
000026  6048              STR      r0,[r1,#4]
;;;23     
;;;24         CLEAR_BIT(SPI1->I2SCFGR, SPI_I2SCFGR_I2SMOD);
000028  4608              MOV      r0,r1
00002a  69c0              LDR      r0,[r0,#0x1c]
00002c  f4206000          BIC      r0,r0,#0x800
000030  61c8              STR      r0,[r1,#0x1c]
;;;25     
;;;26         /* Enable SPI peripheral */
;;;27         SPI1->CR1 |= SPI_CR1_SPE;
000032  4608              MOV      r0,r1
000034  6800              LDR      r0,[r0,#0]
000036  f0400040          ORR      r0,r0,#0x40
00003a  6008              STR      r0,[r1,#0]
;;;28     }
00003c  4770              BX       lr
;;;29     
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      0x40013000

                          AREA ||i.SPI_Transmit||, CODE, READONLY, ALIGN=2

                  SPI_Transmit PROC
;;;29     
;;;30     uint8_t SPI_Transmit(uint8_t *data, uint16_t size)
000000  b518              PUSH     {r3,r4,lr}
;;;31     {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;32         uint16_t i;
;;;33         __IO uint32_t tmpreg_ovr = 0x00U;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;34     
;;;35         if((data == NULL) || (size == 0U)) {
00000a  b102              CBZ      r2,|L2.14|
00000c  b90b              CBNZ     r3,|L2.18|
                  |L2.14|
;;;36             return 0;
00000e  2000              MOVS     r0,#0
                  |L2.16|
;;;37         }
;;;38     
;;;39         for (i=0;i<size;i++) {
;;;40             while (!(SPI1->SR & SPI_SR_TXE)) {}
;;;41             *((__IO uint8_t*) &(SPI1->DR)) = data[i];
;;;42         }
;;;43     
;;;44         while (!(SPI1->SR & SPI_SR_TXE)) {}
;;;45         while (SPI1->SR & SPI_SR_BSY) {}
;;;46     
;;;47         tmpreg_ovr = SPI1->DR;
;;;48         tmpreg_ovr = SPI1->SR;
;;;49         UNUSED(tmpreg_ovr);
;;;50     
;;;51         return 1;
;;;52     }
000010  bd18              POP      {r3,r4,pc}
                  |L2.18|
000012  2100              MOVS     r1,#0                 ;39
000014  e00b              B        |L2.46|
                  |L2.22|
000016  bf00              NOP                            ;40
                  |L2.24|
000018  4811              LDR      r0,|L2.96|
00001a  6880              LDR      r0,[r0,#8]            ;40
00001c  f0000002          AND      r0,r0,#2              ;40
000020  2800              CMP      r0,#0                 ;40
000022  d0f9              BEQ      |L2.24|
000024  5c50              LDRB     r0,[r2,r1]            ;41
000026  4c0e              LDR      r4,|L2.96|
000028  7320              STRB     r0,[r4,#0xc]          ;41
00002a  1c48              ADDS     r0,r1,#1              ;39
00002c  b281              UXTH     r1,r0                 ;39
                  |L2.46|
00002e  4299              CMP      r1,r3                 ;39
000030  dbf1              BLT      |L2.22|
000032  bf00              NOP                            ;44
                  |L2.52|
000034  480a              LDR      r0,|L2.96|
000036  6880              LDR      r0,[r0,#8]            ;44
000038  f0000002          AND      r0,r0,#2              ;44
00003c  2800              CMP      r0,#0                 ;44
00003e  d0f9              BEQ      |L2.52|
000040  bf00              NOP                            ;45
                  |L2.66|
000042  4807              LDR      r0,|L2.96|
000044  6880              LDR      r0,[r0,#8]            ;45
000046  f0000080          AND      r0,r0,#0x80           ;45
00004a  2800              CMP      r0,#0                 ;45
00004c  d1f9              BNE      |L2.66|
00004e  4804              LDR      r0,|L2.96|
000050  68c0              LDR      r0,[r0,#0xc]          ;47
000052  9000              STR      r0,[sp,#0]            ;47
000054  4802              LDR      r0,|L2.96|
000056  6880              LDR      r0,[r0,#8]            ;48
000058  9000              STR      r0,[sp,#0]            ;48
00005a  bf00              NOP                            ;49
00005c  2001              MOVS     r0,#1                 ;51
00005e  e7d7              B        |L2.16|
;;;53     
                          ENDP

                  |L2.96|
                          DCD      0x40013000

                          AREA ||i.SPI_TransmitReceive||, CODE, READONLY, ALIGN=2

                  SPI_TransmitReceive PROC
;;;53     
;;;54     uint8_t SPI_TransmitReceive(uint8_t *txData, uint8_t *rxData, uint16_t size)
000000  b538              PUSH     {r3-r5,lr}
;;;55     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;56         uint16_t i;
;;;57         __IO uint32_t tmpreg_ovr = 0x00U;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;58     
;;;59         if((txData == NULL) || (rxData == NULL ) || (size == 0U)) {
00000a  b10b              CBZ      r3,|L3.16|
00000c  b104              CBZ      r4,|L3.16|
00000e  b90a              CBNZ     r2,|L3.20|
                  |L3.16|
;;;60             return 0;
000010  2000              MOVS     r0,#0
                  |L3.18|
;;;61         }
;;;62     
;;;63         for (i=0;i<size;i++) {
;;;64             while (!(SPI1->SR & SPI_SR_TXE)) {}
;;;65             *((__IO uint8_t*) &(SPI1->DR)) = txData[i];
;;;66     
;;;67             while (!(SPI1->SR & SPI_SR_RXNE)) {}
;;;68             rxData[i] = SPI1->DR;
;;;69         }
;;;70     
;;;71         while (!(SPI1->SR & SPI_SR_TXE)) {}
;;;72         while (SPI1->SR & SPI_SR_BSY) {}
;;;73     
;;;74         tmpreg_ovr = SPI1->DR;
;;;75         tmpreg_ovr = SPI1->SR;
;;;76         UNUSED(tmpreg_ovr);
;;;77     
;;;78         return 1;
;;;79     }
000012  bd38              POP      {r3-r5,pc}
                  |L3.20|
000014  2100              MOVS     r1,#0                 ;63
000016  e015              B        |L3.68|
                  |L3.24|
000018  bf00              NOP                            ;64
                  |L3.26|
00001a  4817              LDR      r0,|L3.120|
00001c  6880              LDR      r0,[r0,#8]            ;64
00001e  f0000002          AND      r0,r0,#2              ;64
000022  2800              CMP      r0,#0                 ;64
000024  d0f9              BEQ      |L3.26|
000026  5c58              LDRB     r0,[r3,r1]            ;65
000028  4d13              LDR      r5,|L3.120|
00002a  7328              STRB     r0,[r5,#0xc]          ;65
00002c  bf00              NOP                            ;67
                  |L3.46|
00002e  4812              LDR      r0,|L3.120|
000030  6880              LDR      r0,[r0,#8]            ;67
000032  f0000001          AND      r0,r0,#1              ;67
000036  2800              CMP      r0,#0                 ;67
000038  d0f9              BEQ      |L3.46|
00003a  480f              LDR      r0,|L3.120|
00003c  68c0              LDR      r0,[r0,#0xc]          ;68
00003e  5460              STRB     r0,[r4,r1]            ;68
000040  1c48              ADDS     r0,r1,#1              ;63
000042  b281              UXTH     r1,r0                 ;63
                  |L3.68|
000044  4291              CMP      r1,r2                 ;63
000046  dbe7              BLT      |L3.24|
000048  bf00              NOP                            ;71
                  |L3.74|
00004a  480b              LDR      r0,|L3.120|
00004c  6880              LDR      r0,[r0,#8]            ;71
00004e  f0000002          AND      r0,r0,#2              ;71
000052  2800              CMP      r0,#0                 ;71
000054  d0f9              BEQ      |L3.74|
000056  bf00              NOP                            ;72
                  |L3.88|
000058  4807              LDR      r0,|L3.120|
00005a  6880              LDR      r0,[r0,#8]            ;72
00005c  f0000080          AND      r0,r0,#0x80           ;72
000060  2800              CMP      r0,#0                 ;72
000062  d1f9              BNE      |L3.88|
000064  4804              LDR      r0,|L3.120|
000066  68c0              LDR      r0,[r0,#0xc]          ;74
000068  9000              STR      r0,[sp,#0]            ;74
00006a  4803              LDR      r0,|L3.120|
00006c  6880              LDR      r0,[r0,#8]            ;75
00006e  9000              STR      r0,[sp,#0]            ;75
000070  bf00              NOP                            ;76
000072  2001              MOVS     r0,#1                 ;78
000074  e7cd              B        |L3.18|
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      0x40013000

;*** Start embedded assembler ***

#line 1 "Core\\Src\\spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_SPI_Init____REV16|
#line 388 ".\\Core\\Inc\\cmsis_armcc.h"
|__asm___5_spi_c_SPI_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_SPI_Init____REVSH|
#line 402
|__asm___5_spi_c_SPI_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_SPI_Init____RRX|
#line 587
|__asm___5_spi_c_SPI_Init____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
