; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\sdio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sdio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Core\Inc -IC:\workspace\stm32_bootloader\RTE\_stm32iap -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=522 -DSTM32F10X_HD -DSTM32F103xE --omf_browse=.\objects\sdio.crf Core\Src\sdio.c]
                          THUMB

                          AREA ||i.CmdError||, CODE, READONLY, ALIGN=1

                  CmdError PROC
;;;1553     */
;;;1554   static SD_Error CmdError(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1555   {
;;;1556     SD_Error errorstatus = SD_OK;
000002  252a              MOVS     r5,#0x2a
;;;1557     uint32_t timeout;
;;;1558   
;;;1559     timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */
000004  f44f3480          MOV      r4,#0x10000
;;;1560   
;;;1561     while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
000008  e000              B        |L1.12|
                  |L1.10|
;;;1562     {
;;;1563       timeout--;
00000a  1e64              SUBS     r4,r4,#1
                  |L1.12|
00000c  b124              CBZ      r4,|L1.24|
00000e  2080              MOVS     r0,#0x80              ;1561
000010  f7fffffe          BL       SDIO_GetFlagStatus
000014  2800              CMP      r0,#0                 ;1561
000016  d0f8              BEQ      |L1.10|
                  |L1.24|
;;;1564     }
;;;1565   
;;;1566     if (timeout == 0)
000018  b914              CBNZ     r4,|L1.32|
;;;1567     {
;;;1568       errorstatus = SD_CMD_RSP_TIMEOUT;
00001a  2503              MOVS     r5,#3
;;;1569       return(errorstatus);
00001c  4628              MOV      r0,r5
                  |L1.30|
;;;1570     }
;;;1571   
;;;1572     /*!< Clear all the static flags */
;;;1573     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1574   
;;;1575     return(errorstatus);
;;;1576   }
00001e  bd70              POP      {r4-r6,pc}
                  |L1.32|
000020  f24050ff          MOV      r0,#0x5ff             ;1573
000024  f7fffffe          BL       SDIO_ClearFlag
000028  4628              MOV      r0,r5                 ;1575
00002a  e7f8              B        |L1.30|
;;;1577   
                          ENDP


                          AREA ||i.CmdResp1Error||, CODE, READONLY, ALIGN=2

                  CmdResp1Error PROC
;;;1619     */
;;;1620   static SD_Error CmdResp1Error(uint8_t cmd)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1621   {
000004  4606              MOV      r6,r0
;;;1622     SD_Error errorstatus = SD_OK;
000006  272a              MOVS     r7,#0x2a
;;;1623     uint32_t status;
;;;1624     uint32_t response_r1;
;;;1625   
;;;1626     status = SDIO->STA;
000008  4848              LDR      r0,|L2.300|
00000a  6b45              LDR      r5,[r0,#0x34]
;;;1627   
;;;1628     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
00000c  e001              B        |L2.18|
                  |L2.14|
;;;1629     {
;;;1630       status = SDIO->STA;
00000e  4847              LDR      r0,|L2.300|
000010  6b45              LDR      r5,[r0,#0x34]
                  |L2.18|
000012  f0050045          AND      r0,r5,#0x45           ;1628
000016  2800              CMP      r0,#0                 ;1628
000018  d0f9              BEQ      |L2.14|
;;;1631     }
;;;1632   
;;;1633     if (status & SDIO_FLAG_CTIMEOUT)
00001a  f0050004          AND      r0,r5,#4
00001e  b130              CBZ      r0,|L2.46|
;;;1634     {
;;;1635       errorstatus = SD_CMD_RSP_TIMEOUT;
000020  2703              MOVS     r7,#3
;;;1636       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000022  2004              MOVS     r0,#4
000024  f7fffffe          BL       SDIO_ClearFlag
;;;1637       return(errorstatus);
000028  4638              MOV      r0,r7
                  |L2.42|
;;;1638     }
;;;1639     else if (status & SDIO_FLAG_CCRCFAIL)
;;;1640     {
;;;1641       errorstatus = SD_CMD_CRC_FAIL;
;;;1642       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;1643       return(errorstatus);
;;;1644     }
;;;1645   
;;;1646     /*!< Check response received is of desired command */
;;;1647     if (SDIO_GetCommandResponse() != cmd)
;;;1648     {
;;;1649       errorstatus = SD_ILLEGAL_CMD;
;;;1650       return(errorstatus);
;;;1651     }
;;;1652   
;;;1653     /*!< Clear all the static flags */
;;;1654     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1655   
;;;1656     /*!< We have received response, retrieve it for analysis  */
;;;1657     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;1658   
;;;1659     if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;1660     {
;;;1661       return(errorstatus);
;;;1662     }
;;;1663   
;;;1664     if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;1665     {
;;;1666       return(SD_ADDR_OUT_OF_RANGE);
;;;1667     }
;;;1668   
;;;1669     if (response_r1 & SD_OCR_ADDR_MISALIGNED)
;;;1670     {
;;;1671       return(SD_ADDR_MISALIGNED);
;;;1672     }
;;;1673   
;;;1674     if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
;;;1675     {
;;;1676       return(SD_BLOCK_LEN_ERR);
;;;1677     }
;;;1678   
;;;1679     if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
;;;1680     {
;;;1681       return(SD_ERASE_SEQ_ERR);
;;;1682     }
;;;1683   
;;;1684     if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
;;;1685     {
;;;1686       return(SD_BAD_ERASE_PARAM);
;;;1687     }
;;;1688   
;;;1689     if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;1690     {
;;;1691       return(SD_WRITE_PROT_VIOLATION);
;;;1692     }
;;;1693   
;;;1694     if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;1695     {
;;;1696       return(SD_LOCK_UNLOCK_FAILED);
;;;1697     }
;;;1698   
;;;1699     if (response_r1 & SD_OCR_COM_CRC_FAILED)
;;;1700     {
;;;1701       return(SD_COM_CRC_FAILED);
;;;1702     }
;;;1703   
;;;1704     if (response_r1 & SD_OCR_ILLEGAL_CMD)
;;;1705     {
;;;1706       return(SD_ILLEGAL_CMD);
;;;1707     }
;;;1708   
;;;1709     if (response_r1 & SD_OCR_CARD_ECC_FAILED)
;;;1710     {
;;;1711       return(SD_CARD_ECC_FAILED);
;;;1712     }
;;;1713   
;;;1714     if (response_r1 & SD_OCR_CC_ERROR)
;;;1715     {
;;;1716       return(SD_CC_ERROR);
;;;1717     }
;;;1718   
;;;1719     if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;1720     {
;;;1721       return(SD_GENERAL_UNKNOWN_ERROR);
;;;1722     }
;;;1723   
;;;1724     if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;1725     {
;;;1726       return(SD_STREAM_READ_UNDERRUN);
;;;1727     }
;;;1728   
;;;1729     if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;1730     {
;;;1731       return(SD_STREAM_WRITE_OVERRUN);
;;;1732     }
;;;1733   
;;;1734     if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;1735     {
;;;1736       return(SD_CID_CSD_OVERWRITE);
;;;1737     }
;;;1738   
;;;1739     if (response_r1 & SD_OCR_WP_ERASE_SKIP)
;;;1740     {
;;;1741       return(SD_WP_ERASE_SKIP);
;;;1742     }
;;;1743   
;;;1744     if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
;;;1745     {
;;;1746       return(SD_CARD_ECC_DISABLED);
;;;1747     }
;;;1748   
;;;1749     if (response_r1 & SD_OCR_ERASE_RESET)
;;;1750     {
;;;1751       return(SD_ERASE_RESET);
;;;1752     }
;;;1753   
;;;1754     if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
;;;1755     {
;;;1756       return(SD_AKE_SEQ_ERROR);
;;;1757     }
;;;1758     return(errorstatus);
;;;1759   }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L2.46|
00002e  f0050001          AND      r0,r5,#1              ;1639
000032  b128              CBZ      r0,|L2.64|
000034  2701              MOVS     r7,#1                 ;1641
000036  2001              MOVS     r0,#1                 ;1642
000038  f7fffffe          BL       SDIO_ClearFlag
00003c  4638              MOV      r0,r7                 ;1643
00003e  e7f4              B        |L2.42|
                  |L2.64|
000040  f7fffffe          BL       SDIO_GetCommandResponse
000044  42b0              CMP      r0,r6                 ;1647
000046  d002              BEQ      |L2.78|
000048  2710              MOVS     r7,#0x10              ;1649
00004a  4638              MOV      r0,r7                 ;1650
00004c  e7ed              B        |L2.42|
                  |L2.78|
00004e  f24050ff          MOV      r0,#0x5ff             ;1654
000052  f7fffffe          BL       SDIO_ClearFlag
000056  2000              MOVS     r0,#0                 ;1657
000058  f7fffffe          BL       SDIO_GetResponse
00005c  4604              MOV      r4,r0                 ;1657
00005e  4834              LDR      r0,|L2.304|
000060  4020              ANDS     r0,r0,r4              ;1659
000062  b908              CBNZ     r0,|L2.104|
000064  4638              MOV      r0,r7                 ;1661
000066  e7e0              B        |L2.42|
                  |L2.104|
000068  f0044000          AND      r0,r4,#0x80000000     ;1664
00006c  b108              CBZ      r0,|L2.114|
00006e  201c              MOVS     r0,#0x1c              ;1666
000070  e7db              B        |L2.42|
                  |L2.114|
000072  f0044080          AND      r0,r4,#0x40000000     ;1669
000076  b108              CBZ      r0,|L2.124|
000078  2009              MOVS     r0,#9                 ;1671
00007a  e7d6              B        |L2.42|
                  |L2.124|
00007c  f0045000          AND      r0,r4,#0x20000000     ;1674
000080  b108              CBZ      r0,|L2.134|
000082  200a              MOVS     r0,#0xa               ;1676
000084  e7d1              B        |L2.42|
                  |L2.134|
000086  f0045080          AND      r0,r4,#0x10000000     ;1679
00008a  b108              CBZ      r0,|L2.144|
00008c  200b              MOVS     r0,#0xb               ;1681
00008e  e7cc              B        |L2.42|
                  |L2.144|
000090  f0046000          AND      r0,r4,#0x8000000      ;1684
000094  b108              CBZ      r0,|L2.154|
000096  200c              MOVS     r0,#0xc               ;1686
000098  e7c7              B        |L2.42|
                  |L2.154|
00009a  f0046080          AND      r0,r4,#0x4000000      ;1689
00009e  b108              CBZ      r0,|L2.164|
0000a0  200d              MOVS     r0,#0xd               ;1691
0000a2  e7c2              B        |L2.42|
                  |L2.164|
0000a4  f0047080          AND      r0,r4,#0x1000000      ;1694
0000a8  b108              CBZ      r0,|L2.174|
0000aa  200e              MOVS     r0,#0xe               ;1696
0000ac  e7bd              B        |L2.42|
                  |L2.174|
0000ae  f4040000          AND      r0,r4,#0x800000       ;1699
0000b2  b108              CBZ      r0,|L2.184|
0000b4  200f              MOVS     r0,#0xf               ;1701
0000b6  e7b8              B        |L2.42|
                  |L2.184|
0000b8  f4040080          AND      r0,r4,#0x400000       ;1704
0000bc  b108              CBZ      r0,|L2.194|
0000be  2010              MOVS     r0,#0x10              ;1706
0000c0  e7b3              B        |L2.42|
                  |L2.194|
0000c2  f4041000          AND      r0,r4,#0x200000       ;1709
0000c6  b108              CBZ      r0,|L2.204|
0000c8  2011              MOVS     r0,#0x11              ;1711
0000ca  e7ae              B        |L2.42|
                  |L2.204|
0000cc  f4041080          AND      r0,r4,#0x100000       ;1714
0000d0  b108              CBZ      r0,|L2.214|
0000d2  2012              MOVS     r0,#0x12              ;1716
0000d4  e7a9              B        |L2.42|
                  |L2.214|
0000d6  f4042000          AND      r0,r4,#0x80000        ;1719
0000da  b108              CBZ      r0,|L2.224|
0000dc  2013              MOVS     r0,#0x13              ;1721
0000de  e7a4              B        |L2.42|
                  |L2.224|
0000e0  f4042080          AND      r0,r4,#0x40000        ;1724
0000e4  b108              CBZ      r0,|L2.234|
0000e6  2014              MOVS     r0,#0x14              ;1726
0000e8  e79f              B        |L2.42|
                  |L2.234|
0000ea  f4043000          AND      r0,r4,#0x20000        ;1729
0000ee  b108              CBZ      r0,|L2.244|
0000f0  2015              MOVS     r0,#0x15              ;1731
0000f2  e79a              B        |L2.42|
                  |L2.244|
0000f4  f4043080          AND      r0,r4,#0x10000        ;1734
0000f8  b108              CBZ      r0,|L2.254|
0000fa  2016              MOVS     r0,#0x16              ;1736
0000fc  e795              B        |L2.42|
                  |L2.254|
0000fe  f4044000          AND      r0,r4,#0x8000         ;1739
000102  b108              CBZ      r0,|L2.264|
000104  2017              MOVS     r0,#0x17              ;1741
000106  e790              B        |L2.42|
                  |L2.264|
000108  f4044080          AND      r0,r4,#0x4000         ;1744
00010c  b108              CBZ      r0,|L2.274|
00010e  2018              MOVS     r0,#0x18              ;1746
000110  e78b              B        |L2.42|
                  |L2.274|
000112  f4045000          AND      r0,r4,#0x2000         ;1749
000116  b108              CBZ      r0,|L2.284|
000118  2019              MOVS     r0,#0x19              ;1751
00011a  e786              B        |L2.42|
                  |L2.284|
00011c  f0040008          AND      r0,r4,#8              ;1754
000120  b108              CBZ      r0,|L2.294|
000122  201a              MOVS     r0,#0x1a              ;1756
000124  e781              B        |L2.42|
                  |L2.294|
000126  4638              MOV      r0,r7                 ;1758
000128  e77f              B        |L2.42|
;;;1760   
                          ENDP

00012a  0000              DCW      0x0000
                  |L2.300|
                          DCD      0x40018000
                  |L2.304|
                          DCD      0xfdffe008

                          AREA ||i.CmdResp2Error||, CODE, READONLY, ALIGN=2

                  CmdResp2Error PROC
;;;1793     */
;;;1794   static SD_Error CmdResp2Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1795   {
;;;1796     SD_Error errorstatus = SD_OK;
000002  252a              MOVS     r5,#0x2a
;;;1797     uint32_t status;
;;;1798   
;;;1799     status = SDIO->STA;
000004  4810              LDR      r0,|L3.72|
000006  6b44              LDR      r4,[r0,#0x34]
;;;1800   
;;;1801     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
000008  e001              B        |L3.14|
                  |L3.10|
;;;1802     {
;;;1803       status = SDIO->STA;
00000a  480f              LDR      r0,|L3.72|
00000c  6b44              LDR      r4,[r0,#0x34]
                  |L3.14|
00000e  f0040045          AND      r0,r4,#0x45           ;1801
000012  2800              CMP      r0,#0                 ;1801
000014  d0f9              BEQ      |L3.10|
;;;1804     }
;;;1805   
;;;1806     if (status & SDIO_FLAG_CTIMEOUT)
000016  f0040004          AND      r0,r4,#4
00001a  b128              CBZ      r0,|L3.40|
;;;1807     {
;;;1808       errorstatus = SD_CMD_RSP_TIMEOUT;
00001c  2503              MOVS     r5,#3
;;;1809       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_ClearFlag
;;;1810       return(errorstatus);
000024  4628              MOV      r0,r5
                  |L3.38|
;;;1811     }
;;;1812     else if (status & SDIO_FLAG_CCRCFAIL)
;;;1813     {
;;;1814       errorstatus = SD_CMD_CRC_FAIL;
;;;1815       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;1816       return(errorstatus);
;;;1817     }
;;;1818   
;;;1819     /*!< Clear all the static flags */
;;;1820     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1821   
;;;1822     return(errorstatus);
;;;1823   }
000026  bd70              POP      {r4-r6,pc}
                  |L3.40|
000028  f0040001          AND      r0,r4,#1              ;1812
00002c  b128              CBZ      r0,|L3.58|
00002e  2501              MOVS     r5,#1                 ;1814
000030  2001              MOVS     r0,#1                 ;1815
000032  f7fffffe          BL       SDIO_ClearFlag
000036  4628              MOV      r0,r5                 ;1816
000038  e7f5              B        |L3.38|
                  |L3.58|
00003a  f24050ff          MOV      r0,#0x5ff             ;1820
00003e  f7fffffe          BL       SDIO_ClearFlag
000042  4628              MOV      r0,r5                 ;1822
000044  e7ef              B        |L3.38|
;;;1824   
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      0x40018000

                          AREA ||i.CmdResp3Error||, CODE, READONLY, ALIGN=2

                  CmdResp3Error PROC
;;;1765     */
;;;1766   static SD_Error CmdResp3Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1767   {
;;;1768     SD_Error errorstatus = SD_OK;
000002  252a              MOVS     r5,#0x2a
;;;1769     uint32_t status;
;;;1770   
;;;1771     status = SDIO->STA;
000004  480b              LDR      r0,|L4.52|
000006  6b44              LDR      r4,[r0,#0x34]
;;;1772   
;;;1773     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000008  e001              B        |L4.14|
                  |L4.10|
;;;1774     {
;;;1775       status = SDIO->STA;
00000a  480a              LDR      r0,|L4.52|
00000c  6b44              LDR      r4,[r0,#0x34]
                  |L4.14|
00000e  f0040045          AND      r0,r4,#0x45           ;1773
000012  2800              CMP      r0,#0                 ;1773
000014  d0f9              BEQ      |L4.10|
;;;1776     }
;;;1777   
;;;1778     if (status & SDIO_FLAG_CTIMEOUT)
000016  f0040004          AND      r0,r4,#4
00001a  b128              CBZ      r0,|L4.40|
;;;1779     {
;;;1780       errorstatus = SD_CMD_RSP_TIMEOUT;
00001c  2503              MOVS     r5,#3
;;;1781       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_ClearFlag
;;;1782       return(errorstatus);
000024  4628              MOV      r0,r5
                  |L4.38|
;;;1783     }
;;;1784     /*!< Clear all the static flags */
;;;1785     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1786     return(errorstatus);
;;;1787   }
000026  bd70              POP      {r4-r6,pc}
                  |L4.40|
000028  f24050ff          MOV      r0,#0x5ff             ;1785
00002c  f7fffffe          BL       SDIO_ClearFlag
000030  4628              MOV      r0,r5                 ;1786
000032  e7f8              B        |L4.38|
;;;1788   
                          ENDP

                  |L4.52|
                          DCD      0x40018000

                          AREA ||i.CmdResp6Error||, CODE, READONLY, ALIGN=2

                  CmdResp6Error PROC
;;;1831     */
;;;1832   static SD_Error CmdResp6Error(uint8_t cmd, uint16_t *prca)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1833   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;1834     SD_Error errorstatus = SD_OK;
000008  f04f082a          MOV      r8,#0x2a
;;;1835     uint32_t status;
;;;1836     uint32_t response_r1;
;;;1837   
;;;1838     status = SDIO->STA;
00000c  4822              LDR      r0,|L5.152|
00000e  6b45              LDR      r5,[r0,#0x34]
;;;1839   
;;;1840     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
000010  e001              B        |L5.22|
                  |L5.18|
;;;1841     {
;;;1842       status = SDIO->STA;
000012  4821              LDR      r0,|L5.152|
000014  6b45              LDR      r5,[r0,#0x34]
                  |L5.22|
000016  f0050045          AND      r0,r5,#0x45           ;1840
00001a  2800              CMP      r0,#0                 ;1840
00001c  d0f9              BEQ      |L5.18|
;;;1843     }
;;;1844   
;;;1845     if (status & SDIO_FLAG_CTIMEOUT)
00001e  f0050004          AND      r0,r5,#4
000022  b138              CBZ      r0,|L5.52|
;;;1846     {
;;;1847       errorstatus = SD_CMD_RSP_TIMEOUT;
000024  f04f0803          MOV      r8,#3
;;;1848       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       SDIO_ClearFlag
;;;1849       return(errorstatus);
00002e  4640              MOV      r0,r8
                  |L5.48|
;;;1850     }
;;;1851     else if (status & SDIO_FLAG_CCRCFAIL)
;;;1852     {
;;;1853       errorstatus = SD_CMD_CRC_FAIL;
;;;1854       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;1855       return(errorstatus);
;;;1856     }
;;;1857   
;;;1858     /*!< Check response received is of desired command */
;;;1859     if (SDIO_GetCommandResponse() != cmd)
;;;1860     {
;;;1861       errorstatus = SD_ILLEGAL_CMD;
;;;1862       return(errorstatus);
;;;1863     }
;;;1864   
;;;1865     /*!< Clear all the static flags */
;;;1866     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1867   
;;;1868     /*!< We have received response, retrieve it.  */
;;;1869     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;1870   
;;;1871     if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
;;;1872     {
;;;1873       *prca = (uint16_t) (response_r1 >> 16);
;;;1874       return(errorstatus);
;;;1875     }
;;;1876   
;;;1877     if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
;;;1878     {
;;;1879       return(SD_GENERAL_UNKNOWN_ERROR);
;;;1880     }
;;;1881   
;;;1882     if (response_r1 & SD_R6_ILLEGAL_CMD)
;;;1883     {
;;;1884       return(SD_ILLEGAL_CMD);
;;;1885     }
;;;1886   
;;;1887     if (response_r1 & SD_R6_COM_CRC_FAILED)
;;;1888     {
;;;1889       return(SD_COM_CRC_FAILED);
;;;1890     }
;;;1891   
;;;1892     return(errorstatus);
;;;1893   }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L5.52|
000034  f0050001          AND      r0,r5,#1              ;1851
000038  b130              CBZ      r0,|L5.72|
00003a  f04f0801          MOV      r8,#1                 ;1853
00003e  2001              MOVS     r0,#1                 ;1854
000040  f7fffffe          BL       SDIO_ClearFlag
000044  4640              MOV      r0,r8                 ;1855
000046  e7f3              B        |L5.48|
                  |L5.72|
000048  f7fffffe          BL       SDIO_GetCommandResponse
00004c  42b0              CMP      r0,r6                 ;1859
00004e  d003              BEQ      |L5.88|
000050  f04f0810          MOV      r8,#0x10              ;1861
000054  4640              MOV      r0,r8                 ;1862
000056  e7eb              B        |L5.48|
                  |L5.88|
000058  f24050ff          MOV      r0,#0x5ff             ;1866
00005c  f7fffffe          BL       SDIO_ClearFlag
000060  2000              MOVS     r0,#0                 ;1869
000062  f7fffffe          BL       SDIO_GetResponse
000066  4604              MOV      r4,r0                 ;1869
000068  f4044060          AND      r0,r4,#0xe000         ;1871
00006c  b918              CBNZ     r0,|L5.118|
00006e  0c20              LSRS     r0,r4,#16             ;1873
000070  8038              STRH     r0,[r7,#0]            ;1873
000072  4640              MOV      r0,r8                 ;1874
000074  e7dc              B        |L5.48|
                  |L5.118|
000076  f4045000          AND      r0,r4,#0x2000         ;1877
00007a  b108              CBZ      r0,|L5.128|
00007c  2013              MOVS     r0,#0x13              ;1879
00007e  e7d7              B        |L5.48|
                  |L5.128|
000080  f4044080          AND      r0,r4,#0x4000         ;1882
000084  b108              CBZ      r0,|L5.138|
000086  2010              MOVS     r0,#0x10              ;1884
000088  e7d2              B        |L5.48|
                  |L5.138|
00008a  f4044000          AND      r0,r4,#0x8000         ;1887
00008e  b108              CBZ      r0,|L5.148|
000090  200f              MOVS     r0,#0xf               ;1889
000092  e7cd              B        |L5.48|
                  |L5.148|
000094  4640              MOV      r0,r8                 ;1892
000096  e7cb              B        |L5.48|
;;;1894   
                          ENDP

                  |L5.152|
                          DCD      0x40018000

                          AREA ||i.CmdResp7Error||, CODE, READONLY, ALIGN=2

                  CmdResp7Error PROC
;;;1582     */
;;;1583   static SD_Error CmdResp7Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1584   {
;;;1585     SD_Error errorstatus = SD_OK;
000002  262a              MOVS     r6,#0x2a
;;;1586     uint32_t status;
;;;1587     uint32_t timeout = SDIO_CMD0TIMEOUT;
000004  f44f3580          MOV      r5,#0x10000
;;;1588   
;;;1589     status = SDIO->STA;
000008  480f              LDR      r0,|L6.72|
00000a  6b44              LDR      r4,[r0,#0x34]
;;;1590   
;;;1591     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
00000c  e002              B        |L6.20|
                  |L6.14|
;;;1592     {
;;;1593       timeout--;
00000e  1e6d              SUBS     r5,r5,#1
;;;1594       status = SDIO->STA;
000010  480d              LDR      r0,|L6.72|
000012  6b44              LDR      r4,[r0,#0x34]
                  |L6.20|
000014  f0040045          AND      r0,r4,#0x45           ;1591
000018  b908              CBNZ     r0,|L6.30|
00001a  2d00              CMP      r5,#0                 ;1591
00001c  d1f7              BNE      |L6.14|
                  |L6.30|
;;;1595     }
;;;1596   
;;;1597     if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
00001e  b115              CBZ      r5,|L6.38|
000020  f0040004          AND      r0,r4,#4
000024  b128              CBZ      r0,|L6.50|
                  |L6.38|
;;;1598     {
;;;1599       /*!< Card is not V2.0 complient or card does not support the set voltage range */
;;;1600       errorstatus = SD_CMD_RSP_TIMEOUT;
000026  2603              MOVS     r6,#3
;;;1601       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       SDIO_ClearFlag
;;;1602       return(errorstatus);
00002e  4630              MOV      r0,r6
                  |L6.48|
;;;1603     }
;;;1604   
;;;1605     if (status & SDIO_FLAG_CMDREND)
;;;1606     {
;;;1607       /*!< Card is SD V2.0 compliant */
;;;1608       errorstatus = SD_OK;
;;;1609       SDIO_ClearFlag(SDIO_FLAG_CMDREND);
;;;1610       return(errorstatus);
;;;1611     }
;;;1612     return(errorstatus);
;;;1613   }
000030  bd70              POP      {r4-r6,pc}
                  |L6.50|
000032  f0040040          AND      r0,r4,#0x40           ;1605
000036  b128              CBZ      r0,|L6.68|
000038  262a              MOVS     r6,#0x2a              ;1608
00003a  2040              MOVS     r0,#0x40              ;1609
00003c  f7fffffe          BL       SDIO_ClearFlag
000040  4630              MOV      r0,r6                 ;1610
000042  e7f5              B        |L6.48|
                  |L6.68|
000044  4630              MOV      r0,r6                 ;1612
000046  e7f3              B        |L6.48|
;;;1614   
                          ENDP

                  |L6.72|
                          DCD      0x40018000

                          AREA ||i.FindSCR||, CODE, READONLY, ALIGN=2

                  FindSCR PROC
;;;2173     */
;;;2174   static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;2175   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;2176     uint32_t index = 0;
000008  2600              MOVS     r6,#0
;;;2177     SD_Error errorstatus = SD_OK;
00000a  242a              MOVS     r4,#0x2a
;;;2178     uint32_t tempscr[2] = {0, 0};
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  9001              STR      r0,[sp,#4]
;;;2179   
;;;2180     /*!< Set Block Size To 8 Bytes */
;;;2181     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;2182     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
000012  2008              MOVS     r0,#8
000014  495c              LDR      r1,|L7.392|
000016  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;2183     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
000018  2010              MOVS     r0,#0x10
00001a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;2184     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00001c  2040              MOVS     r0,#0x40
00001e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;2185     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000020  2000              MOVS     r0,#0
000022  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;2186     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000024  f44f6080          MOV      r0,#0x400
000028  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;2187     SDIO_SendCommand(&SDIO_CmdInitStructure);
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       SDIO_SendCommand
;;;2188   
;;;2189     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000030  2010              MOVS     r0,#0x10
000032  f7fffffe          BL       CmdResp1Error
000036  4604              MOV      r4,r0
;;;2190   
;;;2191     if (errorstatus != SD_OK)
000038  2c2a              CMP      r4,#0x2a
00003a  d002              BEQ      |L7.66|
;;;2192     {
;;;2193       return(errorstatus);
00003c  4620              MOV      r0,r4
                  |L7.62|
;;;2194     }
;;;2195   
;;;2196     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;2197     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2198     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2199     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2200     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2201     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2202     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2203   
;;;2204     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2205   
;;;2206     if (errorstatus != SD_OK)
;;;2207     {
;;;2208       return(errorstatus);
;;;2209     }
;;;2210     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;2211     SDIO_DataInitStructure.SDIO_DataLength = 8;
;;;2212     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
;;;2213     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;2214     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;2215     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;2216     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;2217   
;;;2218   
;;;2219     /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
;;;2220     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;2221     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
;;;2222     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2223     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2224     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2225     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2226   
;;;2227     errorstatus = CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
;;;2228   
;;;2229     if (errorstatus != SD_OK)
;;;2230     {
;;;2231       return(errorstatus);
;;;2232     }
;;;2233   
;;;2234     while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;2235     {
;;;2236       if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;2237       {
;;;2238         *(tempscr + index) = SDIO_ReadData();
;;;2239         index++;
;;;2240       }
;;;2241     }
;;;2242   
;;;2243     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;2244     {
;;;2245       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;2246       errorstatus = SD_DATA_TIMEOUT;
;;;2247       return(errorstatus);
;;;2248     }
;;;2249     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;2250     {
;;;2251       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;2252       errorstatus = SD_DATA_CRC_FAIL;
;;;2253       return(errorstatus);
;;;2254     }
;;;2255     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;2256     {
;;;2257       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;2258       errorstatus = SD_RX_OVERRUN;
;;;2259       return(errorstatus);
;;;2260     }
;;;2261     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;2262     {
;;;2263       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;2264       errorstatus = SD_START_BIT_ERR;
;;;2265       return(errorstatus);
;;;2266     }
;;;2267   
;;;2268     /*!< Clear all the static flags */
;;;2269     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2270   
;;;2271     *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
;;;2272   
;;;2273     *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
;;;2274   
;;;2275     return(errorstatus);
;;;2276   }
00003e  e8bd81fc          POP      {r2-r8,pc}
                  |L7.66|
000042  4852              LDR      r0,|L7.396|
000044  8800              LDRH     r0,[r0,#0]            ;2197  ; RCA
000046  0400              LSLS     r0,r0,#16             ;2197
000048  494f              LDR      r1,|L7.392|
00004a  6008              STR      r0,[r1,#0]            ;2197  ; SDIO_CmdInitStructure
00004c  2037              MOVS     r0,#0x37              ;2198
00004e  6048              STR      r0,[r1,#4]            ;2198  ; SDIO_CmdInitStructure
000050  2040              MOVS     r0,#0x40              ;2199
000052  6088              STR      r0,[r1,#8]            ;2199  ; SDIO_CmdInitStructure
000054  2000              MOVS     r0,#0                 ;2200
000056  60c8              STR      r0,[r1,#0xc]          ;2200  ; SDIO_CmdInitStructure
000058  f44f6080          MOV      r0,#0x400             ;2201
00005c  6108              STR      r0,[r1,#0x10]         ;2201  ; SDIO_CmdInitStructure
00005e  4608              MOV      r0,r1                 ;2202
000060  f7fffffe          BL       SDIO_SendCommand
000064  2037              MOVS     r0,#0x37              ;2204
000066  f7fffffe          BL       CmdResp1Error
00006a  4604              MOV      r4,r0                 ;2204
00006c  2c2a              CMP      r4,#0x2a              ;2206
00006e  d001              BEQ      |L7.116|
000070  4620              MOV      r0,r4                 ;2208
000072  e7e4              B        |L7.62|
                  |L7.116|
000074  4846              LDR      r0,|L7.400|
000076  4947              LDR      r1,|L7.404|
000078  6008              STR      r0,[r1,#0]            ;2210  ; SDIO_DataInitStructure
00007a  2008              MOVS     r0,#8                 ;2211
00007c  6048              STR      r0,[r1,#4]            ;2211  ; SDIO_DataInitStructure
00007e  2030              MOVS     r0,#0x30              ;2212
000080  6088              STR      r0,[r1,#8]            ;2212  ; SDIO_DataInitStructure
000082  2002              MOVS     r0,#2                 ;2213
000084  60c8              STR      r0,[r1,#0xc]          ;2213  ; SDIO_DataInitStructure
000086  2000              MOVS     r0,#0                 ;2214
000088  6108              STR      r0,[r1,#0x10]         ;2214  ; SDIO_DataInitStructure
00008a  2001              MOVS     r0,#1                 ;2215
00008c  6148              STR      r0,[r1,#0x14]         ;2215  ; SDIO_DataInitStructure
00008e  4608              MOV      r0,r1                 ;2216
000090  f7fffffe          BL       SDIO_DataConfig
000094  2000              MOVS     r0,#0                 ;2220
000096  493c              LDR      r1,|L7.392|
000098  6008              STR      r0,[r1,#0]            ;2220  ; SDIO_CmdInitStructure
00009a  2033              MOVS     r0,#0x33              ;2221
00009c  6048              STR      r0,[r1,#4]            ;2221  ; SDIO_CmdInitStructure
00009e  2040              MOVS     r0,#0x40              ;2222
0000a0  6088              STR      r0,[r1,#8]            ;2222  ; SDIO_CmdInitStructure
0000a2  2000              MOVS     r0,#0                 ;2223
0000a4  60c8              STR      r0,[r1,#0xc]          ;2223  ; SDIO_CmdInitStructure
0000a6  f44f6080          MOV      r0,#0x400             ;2224
0000aa  6108              STR      r0,[r1,#0x10]         ;2224  ; SDIO_CmdInitStructure
0000ac  4608              MOV      r0,r1                 ;2225
0000ae  f7fffffe          BL       SDIO_SendCommand
0000b2  2033              MOVS     r0,#0x33              ;2227
0000b4  f7fffffe          BL       CmdResp1Error
0000b8  4604              MOV      r4,r0                 ;2227
0000ba  2c2a              CMP      r4,#0x2a              ;2229
0000bc  d001              BEQ      |L7.194|
0000be  4620              MOV      r0,r4                 ;2231
0000c0  e7bd              B        |L7.62|
                  |L7.194|
0000c2  e009              B        |L7.216|
                  |L7.196|
0000c4  f44f1000          MOV      r0,#0x200000          ;2236
0000c8  f7fffffe          BL       SDIO_GetFlagStatus
0000cc  b120              CBZ      r0,|L7.216|
0000ce  f7fffffe          BL       SDIO_ReadData
0000d2  f84d0026          STR      r0,[sp,r6,LSL #2]     ;2238
0000d6  1c76              ADDS     r6,r6,#1              ;2239
                  |L7.216|
0000d8  482f              LDR      r0,|L7.408|
0000da  6b40              LDR      r0,[r0,#0x34]         ;2234
0000dc  f240612a          MOV      r1,#0x62a             ;2234
0000e0  4008              ANDS     r0,r0,r1              ;2234
0000e2  2800              CMP      r0,#0                 ;2234
0000e4  d0ee              BEQ      |L7.196|
0000e6  2008              MOVS     r0,#8                 ;2243
0000e8  f7fffffe          BL       SDIO_GetFlagStatus
0000ec  b128              CBZ      r0,|L7.250|
0000ee  2008              MOVS     r0,#8                 ;2245
0000f0  f7fffffe          BL       SDIO_ClearFlag
0000f4  2404              MOVS     r4,#4                 ;2246
0000f6  4620              MOV      r0,r4                 ;2247
0000f8  e7a1              B        |L7.62|
                  |L7.250|
0000fa  2002              MOVS     r0,#2                 ;2249
0000fc  f7fffffe          BL       SDIO_GetFlagStatus
000100  b128              CBZ      r0,|L7.270|
000102  2002              MOVS     r0,#2                 ;2251
000104  f7fffffe          BL       SDIO_ClearFlag
000108  2402              MOVS     r4,#2                 ;2252
00010a  4620              MOV      r0,r4                 ;2253
00010c  e797              B        |L7.62|
                  |L7.270|
00010e  2020              MOVS     r0,#0x20              ;2255
000110  f7fffffe          BL       SDIO_GetFlagStatus
000114  b128              CBZ      r0,|L7.290|
000116  2020              MOVS     r0,#0x20              ;2257
000118  f7fffffe          BL       SDIO_ClearFlag
00011c  2406              MOVS     r4,#6                 ;2258
00011e  4620              MOV      r0,r4                 ;2259
000120  e78d              B        |L7.62|
                  |L7.290|
000122  f44f7000          MOV      r0,#0x200             ;2261
000126  f7fffffe          BL       SDIO_GetFlagStatus
00012a  b130              CBZ      r0,|L7.314|
00012c  f44f7000          MOV      r0,#0x200             ;2263
000130  f7fffffe          BL       SDIO_ClearFlag
000134  2407              MOVS     r4,#7                 ;2264
000136  4620              MOV      r0,r4                 ;2265
000138  e781              B        |L7.62|
                  |L7.314|
00013a  f24050ff          MOV      r0,#0x5ff             ;2269
00013e  f7fffffe          BL       SDIO_ClearFlag
000142  9800              LDR      r0,[sp,#0]            ;2271
000144  0600              LSLS     r0,r0,#24             ;2271
000146  9900              LDR      r1,[sp,#0]            ;2271
000148  f401417f          AND      r1,r1,#0xff00         ;2271
00014c  ea402001          ORR      r0,r0,r1,LSL #8       ;2271
000150  9900              LDR      r1,[sp,#0]            ;2271
000152  f401017f          AND      r1,r1,#0xff0000       ;2271
000156  ea402011          ORR      r0,r0,r1,LSR #8       ;2271
00015a  9900              LDR      r1,[sp,#0]            ;2271
00015c  ea406011          ORR      r0,r0,r1,LSR #24      ;2271
000160  6068              STR      r0,[r5,#4]            ;2271
000162  9801              LDR      r0,[sp,#4]            ;2273
000164  0600              LSLS     r0,r0,#24             ;2273
000166  9901              LDR      r1,[sp,#4]            ;2273
000168  f401417f          AND      r1,r1,#0xff00         ;2273
00016c  ea402001          ORR      r0,r0,r1,LSL #8       ;2273
000170  9901              LDR      r1,[sp,#4]            ;2273
000172  f401017f          AND      r1,r1,#0xff0000       ;2273
000176  ea402011          ORR      r0,r0,r1,LSR #8       ;2273
00017a  9901              LDR      r1,[sp,#4]            ;2273
00017c  ea406011          ORR      r0,r0,r1,LSR #24      ;2273
000180  6028              STR      r0,[r5,#0]            ;2273
000182  4620              MOV      r0,r4                 ;2275
000184  e75b              B        |L7.62|
;;;2277   
                          ENDP

000186  0000              DCW      0x0000
                  |L7.392|
                          DCD      SDIO_CmdInitStructure
                  |L7.396|
                          DCD      ||RCA||
                  |L7.400|
                          DCD      0x000fffff
                  |L7.404|
                          DCD      SDIO_DataInitStructure
                  |L7.408|
                          DCD      0x40018000

                          AREA ||i.IsCardProgramming||, CODE, READONLY, ALIGN=2

                  IsCardProgramming PROC
;;;2014     */
;;;2015   static SD_Error IsCardProgramming(uint8_t *pstatus)
000000  b57c              PUSH     {r2-r6,lr}
;;;2016   {
000002  4604              MOV      r4,r0
;;;2017     SD_Error errorstatus = SD_OK;
000004  252a              MOVS     r5,#0x2a
;;;2018     __IO uint32_t respR1 = 0, status = 0;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
00000a  9000              STR      r0,[sp,#0]
;;;2019   
;;;2020     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
00000c  485f              LDR      r0,|L8.396|
00000e  8800              LDRH     r0,[r0,#0]  ; RCA
000010  0400              LSLS     r0,r0,#16
000012  495f              LDR      r1,|L8.400|
000014  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;2021     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
000016  200d              MOVS     r0,#0xd
000018  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;2022     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00001a  2040              MOVS     r0,#0x40
00001c  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;2023     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00001e  2000              MOVS     r0,#0
000020  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;2024     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000022  f44f6080          MOV      r0,#0x400
000026  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;2025     SDIO_SendCommand(&SDIO_CmdInitStructure);
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       SDIO_SendCommand
;;;2026   
;;;2027     status = SDIO->STA;
00002e  4859              LDR      r0,|L8.404|
000030  6b40              LDR      r0,[r0,#0x34]
000032  9000              STR      r0,[sp,#0]
;;;2028     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000034  e002              B        |L8.60|
                  |L8.54|
;;;2029     {
;;;2030       status = SDIO->STA;
000036  4857              LDR      r0,|L8.404|
000038  6b40              LDR      r0,[r0,#0x34]
00003a  9000              STR      r0,[sp,#0]
                  |L8.60|
00003c  9800              LDR      r0,[sp,#0]            ;2028
00003e  f0000045          AND      r0,r0,#0x45           ;2028
000042  2800              CMP      r0,#0                 ;2028
000044  d0f7              BEQ      |L8.54|
;;;2031     }
;;;2032   
;;;2033     if (status & SDIO_FLAG_CTIMEOUT)
000046  9800              LDR      r0,[sp,#0]
000048  f0000004          AND      r0,r0,#4
00004c  b128              CBZ      r0,|L8.90|
;;;2034     {
;;;2035       errorstatus = SD_CMD_RSP_TIMEOUT;
00004e  2503              MOVS     r5,#3
;;;2036       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000050  2004              MOVS     r0,#4
000052  f7fffffe          BL       SDIO_ClearFlag
;;;2037       return(errorstatus);
000056  4628              MOV      r0,r5
                  |L8.88|
;;;2038     }
;;;2039     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2040     {
;;;2041       errorstatus = SD_CMD_CRC_FAIL;
;;;2042       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2043       return(errorstatus);
;;;2044     }
;;;2045   
;;;2046     status = (uint32_t)SDIO_GetCommandResponse();
;;;2047   
;;;2048     /*!< Check response received is of desired command */
;;;2049     if (status != SD_CMD_SEND_STATUS)
;;;2050     {
;;;2051       errorstatus = SD_ILLEGAL_CMD;
;;;2052       return(errorstatus);
;;;2053     }
;;;2054   
;;;2055     /*!< Clear all the static flags */
;;;2056     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2057   
;;;2058   
;;;2059     /*!< We have received response, retrieve it for analysis  */
;;;2060     respR1 = SDIO_GetResponse(SDIO_RESP1);
;;;2061   
;;;2062     /*!< Find out card status */
;;;2063     *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);
;;;2064   
;;;2065     if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2066     {
;;;2067       return(errorstatus);
;;;2068     }
;;;2069   
;;;2070     if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2071     {
;;;2072       return(SD_ADDR_OUT_OF_RANGE);
;;;2073     }
;;;2074   
;;;2075     if (respR1 & SD_OCR_ADDR_MISALIGNED)
;;;2076     {
;;;2077       return(SD_ADDR_MISALIGNED);
;;;2078     }
;;;2079   
;;;2080     if (respR1 & SD_OCR_BLOCK_LEN_ERR)
;;;2081     {
;;;2082       return(SD_BLOCK_LEN_ERR);
;;;2083     }
;;;2084   
;;;2085     if (respR1 & SD_OCR_ERASE_SEQ_ERR)
;;;2086     {
;;;2087       return(SD_ERASE_SEQ_ERR);
;;;2088     }
;;;2089   
;;;2090     if (respR1 & SD_OCR_BAD_ERASE_PARAM)
;;;2091     {
;;;2092       return(SD_BAD_ERASE_PARAM);
;;;2093     }
;;;2094   
;;;2095     if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2096     {
;;;2097       return(SD_WRITE_PROT_VIOLATION);
;;;2098     }
;;;2099   
;;;2100     if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2101     {
;;;2102       return(SD_LOCK_UNLOCK_FAILED);
;;;2103     }
;;;2104   
;;;2105     if (respR1 & SD_OCR_COM_CRC_FAILED)
;;;2106     {
;;;2107       return(SD_COM_CRC_FAILED);
;;;2108     }
;;;2109   
;;;2110     if (respR1 & SD_OCR_ILLEGAL_CMD)
;;;2111     {
;;;2112       return(SD_ILLEGAL_CMD);
;;;2113     }
;;;2114   
;;;2115     if (respR1 & SD_OCR_CARD_ECC_FAILED)
;;;2116     {
;;;2117       return(SD_CARD_ECC_FAILED);
;;;2118     }
;;;2119   
;;;2120     if (respR1 & SD_OCR_CC_ERROR)
;;;2121     {
;;;2122       return(SD_CC_ERROR);
;;;2123     }
;;;2124   
;;;2125     if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2126     {
;;;2127       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2128     }
;;;2129   
;;;2130     if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2131     {
;;;2132       return(SD_STREAM_READ_UNDERRUN);
;;;2133     }
;;;2134   
;;;2135     if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2136     {
;;;2137       return(SD_STREAM_WRITE_OVERRUN);
;;;2138     }
;;;2139   
;;;2140     if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2141     {
;;;2142       return(SD_CID_CSD_OVERWRITE);
;;;2143     }
;;;2144   
;;;2145     if (respR1 & SD_OCR_WP_ERASE_SKIP)
;;;2146     {
;;;2147       return(SD_WP_ERASE_SKIP);
;;;2148     }
;;;2149   
;;;2150     if (respR1 & SD_OCR_CARD_ECC_DISABLED)
;;;2151     {
;;;2152       return(SD_CARD_ECC_DISABLED);
;;;2153     }
;;;2154   
;;;2155     if (respR1 & SD_OCR_ERASE_RESET)
;;;2156     {
;;;2157       return(SD_ERASE_RESET);
;;;2158     }
;;;2159   
;;;2160     if (respR1 & SD_OCR_AKE_SEQ_ERROR)
;;;2161     {
;;;2162       return(SD_AKE_SEQ_ERROR);
;;;2163     }
;;;2164   
;;;2165     return(errorstatus);
;;;2166   }
000058  bd7c              POP      {r2-r6,pc}
                  |L8.90|
00005a  9800              LDR      r0,[sp,#0]            ;2039
00005c  f0000001          AND      r0,r0,#1              ;2039
000060  b128              CBZ      r0,|L8.110|
000062  2501              MOVS     r5,#1                 ;2041
000064  2001              MOVS     r0,#1                 ;2042
000066  f7fffffe          BL       SDIO_ClearFlag
00006a  4628              MOV      r0,r5                 ;2043
00006c  e7f4              B        |L8.88|
                  |L8.110|
00006e  f7fffffe          BL       SDIO_GetCommandResponse
000072  9000              STR      r0,[sp,#0]            ;2046
000074  9800              LDR      r0,[sp,#0]            ;2049
000076  280d              CMP      r0,#0xd               ;2049
000078  d002              BEQ      |L8.128|
00007a  2510              MOVS     r5,#0x10              ;2051
00007c  4628              MOV      r0,r5                 ;2052
00007e  e7eb              B        |L8.88|
                  |L8.128|
000080  f24050ff          MOV      r0,#0x5ff             ;2056
000084  f7fffffe          BL       SDIO_ClearFlag
000088  2000              MOVS     r0,#0                 ;2060
00008a  f7fffffe          BL       SDIO_GetResponse
00008e  9001              STR      r0,[sp,#4]            ;2060
000090  9801              LDR      r0,[sp,#4]            ;2063
000092  f3c02043          UBFX     r0,r0,#9,#4           ;2063
000096  7020              STRB     r0,[r4,#0]            ;2063
000098  493f              LDR      r1,|L8.408|
00009a  9801              LDR      r0,[sp,#4]            ;2065
00009c  4008              ANDS     r0,r0,r1              ;2065
00009e  b908              CBNZ     r0,|L8.164|
0000a0  4628              MOV      r0,r5                 ;2067
0000a2  e7d9              B        |L8.88|
                  |L8.164|
0000a4  9801              LDR      r0,[sp,#4]            ;2070
0000a6  f0004000          AND      r0,r0,#0x80000000     ;2070
0000aa  b108              CBZ      r0,|L8.176|
0000ac  201c              MOVS     r0,#0x1c              ;2072
0000ae  e7d3              B        |L8.88|
                  |L8.176|
0000b0  9801              LDR      r0,[sp,#4]            ;2075
0000b2  f0004080          AND      r0,r0,#0x40000000     ;2075
0000b6  b108              CBZ      r0,|L8.188|
0000b8  2009              MOVS     r0,#9                 ;2077
0000ba  e7cd              B        |L8.88|
                  |L8.188|
0000bc  9801              LDR      r0,[sp,#4]            ;2080
0000be  f0005000          AND      r0,r0,#0x20000000     ;2080
0000c2  b108              CBZ      r0,|L8.200|
0000c4  200a              MOVS     r0,#0xa               ;2082
0000c6  e7c7              B        |L8.88|
                  |L8.200|
0000c8  9801              LDR      r0,[sp,#4]            ;2085
0000ca  f0005080          AND      r0,r0,#0x10000000     ;2085
0000ce  b108              CBZ      r0,|L8.212|
0000d0  200b              MOVS     r0,#0xb               ;2087
0000d2  e7c1              B        |L8.88|
                  |L8.212|
0000d4  9801              LDR      r0,[sp,#4]            ;2090
0000d6  f0006000          AND      r0,r0,#0x8000000      ;2090
0000da  b108              CBZ      r0,|L8.224|
0000dc  200c              MOVS     r0,#0xc               ;2092
0000de  e7bb              B        |L8.88|
                  |L8.224|
0000e0  9801              LDR      r0,[sp,#4]            ;2095
0000e2  f0006080          AND      r0,r0,#0x4000000      ;2095
0000e6  b108              CBZ      r0,|L8.236|
0000e8  200d              MOVS     r0,#0xd               ;2097
0000ea  e7b5              B        |L8.88|
                  |L8.236|
0000ec  9801              LDR      r0,[sp,#4]            ;2100
0000ee  f0007080          AND      r0,r0,#0x1000000      ;2100
0000f2  b108              CBZ      r0,|L8.248|
0000f4  200e              MOVS     r0,#0xe               ;2102
0000f6  e7af              B        |L8.88|
                  |L8.248|
0000f8  9801              LDR      r0,[sp,#4]            ;2105
0000fa  f4000000          AND      r0,r0,#0x800000       ;2105
0000fe  b108              CBZ      r0,|L8.260|
000100  200f              MOVS     r0,#0xf               ;2107
000102  e7a9              B        |L8.88|
                  |L8.260|
000104  9801              LDR      r0,[sp,#4]            ;2110
000106  f4000080          AND      r0,r0,#0x400000       ;2110
00010a  b108              CBZ      r0,|L8.272|
00010c  2010              MOVS     r0,#0x10              ;2112
00010e  e7a3              B        |L8.88|
                  |L8.272|
000110  9801              LDR      r0,[sp,#4]            ;2115
000112  f4001000          AND      r0,r0,#0x200000       ;2115
000116  b108              CBZ      r0,|L8.284|
000118  2011              MOVS     r0,#0x11              ;2117
00011a  e79d              B        |L8.88|
                  |L8.284|
00011c  9801              LDR      r0,[sp,#4]            ;2120
00011e  f4001080          AND      r0,r0,#0x100000       ;2120
000122  b108              CBZ      r0,|L8.296|
000124  2012              MOVS     r0,#0x12              ;2122
000126  e797              B        |L8.88|
                  |L8.296|
000128  9801              LDR      r0,[sp,#4]            ;2125
00012a  f4002000          AND      r0,r0,#0x80000        ;2125
00012e  b108              CBZ      r0,|L8.308|
000130  2013              MOVS     r0,#0x13              ;2127
000132  e791              B        |L8.88|
                  |L8.308|
000134  9801              LDR      r0,[sp,#4]            ;2130
000136  f4002080          AND      r0,r0,#0x40000        ;2130
00013a  b108              CBZ      r0,|L8.320|
00013c  2014              MOVS     r0,#0x14              ;2132
00013e  e78b              B        |L8.88|
                  |L8.320|
000140  9801              LDR      r0,[sp,#4]            ;2135
000142  f4003000          AND      r0,r0,#0x20000        ;2135
000146  b108              CBZ      r0,|L8.332|
000148  2015              MOVS     r0,#0x15              ;2137
00014a  e785              B        |L8.88|
                  |L8.332|
00014c  9801              LDR      r0,[sp,#4]            ;2140
00014e  f4003080          AND      r0,r0,#0x10000        ;2140
000152  b108              CBZ      r0,|L8.344|
000154  2016              MOVS     r0,#0x16              ;2142
000156  e77f              B        |L8.88|
                  |L8.344|
000158  9801              LDR      r0,[sp,#4]            ;2145
00015a  f4004000          AND      r0,r0,#0x8000         ;2145
00015e  b108              CBZ      r0,|L8.356|
000160  2017              MOVS     r0,#0x17              ;2147
000162  e779              B        |L8.88|
                  |L8.356|
000164  9801              LDR      r0,[sp,#4]            ;2150
000166  f4004080          AND      r0,r0,#0x4000         ;2150
00016a  b108              CBZ      r0,|L8.368|
00016c  2018              MOVS     r0,#0x18              ;2152
00016e  e773              B        |L8.88|
                  |L8.368|
000170  9801              LDR      r0,[sp,#4]            ;2155
000172  f4005000          AND      r0,r0,#0x2000         ;2155
000176  b108              CBZ      r0,|L8.380|
000178  2019              MOVS     r0,#0x19              ;2157
00017a  e76d              B        |L8.88|
                  |L8.380|
00017c  9801              LDR      r0,[sp,#4]            ;2160
00017e  f0000008          AND      r0,r0,#8              ;2160
000182  b108              CBZ      r0,|L8.392|
000184  201a              MOVS     r0,#0x1a              ;2162
000186  e767              B        |L8.88|
                  |L8.392|
000188  4628              MOV      r0,r5                 ;2165
00018a  e765              B        |L8.88|
;;;2167   
                          ENDP

                  |L8.396|
                          DCD      ||RCA||
                  |L8.400|
                          DCD      SDIO_CmdInitStructure
                  |L8.404|
                          DCD      0x40018000
                  |L8.408|
                          DCD      0xfdffe008

                          AREA ||i.SDEnWideBus||, CODE, READONLY, ALIGN=2

                  SDEnWideBus PROC
;;;1900     */
;;;1901   static SD_Error SDEnWideBus(FunctionalState NewState)
000000  b57c              PUSH     {r2-r6,lr}
;;;1902   {
000002  4605              MOV      r5,r0
;;;1903     SD_Error errorstatus = SD_OK;
000004  242a              MOVS     r4,#0x2a
;;;1904   
;;;1905     uint32_t scr[2] = {0, 0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;1906   
;;;1907     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
00000c  f7fffffe          BL       SDIO_GetResponse
000010  f0007000          AND      r0,r0,#0x2000000
000014  b110              CBZ      r0,|L9.28|
;;;1908     {
;;;1909       errorstatus = SD_LOCK_UNLOCK_FAILED;
000016  240e              MOVS     r4,#0xe
;;;1910       return(errorstatus);
000018  4620              MOV      r0,r4
                  |L9.26|
;;;1911     }
;;;1912   
;;;1913     /*!< Get SCR Register */
;;;1914     errorstatus = FindSCR(RCA, scr);
;;;1915   
;;;1916     if (errorstatus != SD_OK)
;;;1917     {
;;;1918       return(errorstatus);
;;;1919     }
;;;1920   
;;;1921     /*!< If wide bus operation to be enabled */
;;;1922     if (NewState == ENABLE)
;;;1923     {
;;;1924       /*!< If requested card supports wide bus operation */
;;;1925       if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
;;;1926       {
;;;1927         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;1928         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;1929         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1930         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1931         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1932         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1933         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1934   
;;;1935         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;1936   
;;;1937         if (errorstatus != SD_OK)
;;;1938         {
;;;1939           return(errorstatus);
;;;1940         }
;;;1941   
;;;1942         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;1943         SDIO_CmdInitStructure.SDIO_Argument = 0x2;
;;;1944         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;1945         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1946         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1947         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1948         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1949   
;;;1950         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;1951   
;;;1952         if (errorstatus != SD_OK)
;;;1953         {
;;;1954           return(errorstatus);
;;;1955         }
;;;1956         return(errorstatus);
;;;1957       }
;;;1958       else
;;;1959       {
;;;1960         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;1961         return(errorstatus);
;;;1962       }
;;;1963     }   /*!< If wide bus operation to be disabled */
;;;1964     else
;;;1965     {
;;;1966       /*!< If requested card supports 1 bit mode operation */
;;;1967       if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
;;;1968       {
;;;1969         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;1970         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;1971         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1972         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1973         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1974         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1975         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1976   
;;;1977   
;;;1978         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;1979   
;;;1980         if (errorstatus != SD_OK)
;;;1981         {
;;;1982           return(errorstatus);
;;;1983         }
;;;1984   
;;;1985         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;1986         SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;1987         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;1988         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1989         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1990         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1991         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1992   
;;;1993         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;1994   
;;;1995         if (errorstatus != SD_OK)
;;;1996         {
;;;1997           return(errorstatus);
;;;1998         }
;;;1999   
;;;2000         return(errorstatus);
;;;2001       }
;;;2002       else
;;;2003       {
;;;2004         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2005         return(errorstatus);
;;;2006       }
;;;2007     }
;;;2008   }
00001a  bd7c              POP      {r2-r6,pc}
                  |L9.28|
00001c  493f              LDR      r1,|L9.284|
00001e  8809              LDRH     r1,[r1,#0]            ;1914  ; RCA
000020  b288              UXTH     r0,r1                 ;1914
000022  4669              MOV      r1,sp                 ;1914
000024  f7fffffe          BL       FindSCR
000028  4604              MOV      r4,r0                 ;1914
00002a  2c2a              CMP      r4,#0x2a              ;1916
00002c  d001              BEQ      |L9.50|
00002e  4620              MOV      r0,r4                 ;1918
000030  e7f3              B        |L9.26|
                  |L9.50|
000032  2d01              CMP      r5,#1                 ;1922
000034  d138              BNE      |L9.168|
000036  9801              LDR      r0,[sp,#4]            ;1925
000038  f4002080          AND      r0,r0,#0x40000        ;1925
00003c  2800              CMP      r0,#0                 ;1925
00003e  d030              BEQ      |L9.162|
000040  4836              LDR      r0,|L9.284|
000042  8800              LDRH     r0,[r0,#0]            ;1928  ; RCA
000044  0400              LSLS     r0,r0,#16             ;1928
000046  4936              LDR      r1,|L9.288|
000048  6008              STR      r0,[r1,#0]            ;1928  ; SDIO_CmdInitStructure
00004a  2037              MOVS     r0,#0x37              ;1929
00004c  6048              STR      r0,[r1,#4]            ;1929  ; SDIO_CmdInitStructure
00004e  2040              MOVS     r0,#0x40              ;1930
000050  6088              STR      r0,[r1,#8]            ;1930  ; SDIO_CmdInitStructure
000052  2000              MOVS     r0,#0                 ;1931
000054  60c8              STR      r0,[r1,#0xc]          ;1931  ; SDIO_CmdInitStructure
000056  02a8              LSLS     r0,r5,#10             ;1932
000058  6108              STR      r0,[r1,#0x10]         ;1932  ; SDIO_CmdInitStructure
00005a  4608              MOV      r0,r1                 ;1933
00005c  f7fffffe          BL       SDIO_SendCommand
000060  2037              MOVS     r0,#0x37              ;1935
000062  f7fffffe          BL       CmdResp1Error
000066  4604              MOV      r4,r0                 ;1935
000068  2c2a              CMP      r4,#0x2a              ;1937
00006a  d001              BEQ      |L9.112|
00006c  4620              MOV      r0,r4                 ;1939
00006e  e7d4              B        |L9.26|
                  |L9.112|
000070  2002              MOVS     r0,#2                 ;1943
000072  492b              LDR      r1,|L9.288|
000074  6008              STR      r0,[r1,#0]            ;1943  ; SDIO_CmdInitStructure
000076  2006              MOVS     r0,#6                 ;1944
000078  6048              STR      r0,[r1,#4]            ;1944  ; SDIO_CmdInitStructure
00007a  2040              MOVS     r0,#0x40              ;1945
00007c  6088              STR      r0,[r1,#8]            ;1945  ; SDIO_CmdInitStructure
00007e  2000              MOVS     r0,#0                 ;1946
000080  60c8              STR      r0,[r1,#0xc]          ;1946  ; SDIO_CmdInitStructure
000082  f44f6080          MOV      r0,#0x400             ;1947
000086  6108              STR      r0,[r1,#0x10]         ;1947  ; SDIO_CmdInitStructure
000088  4608              MOV      r0,r1                 ;1948
00008a  f7fffffe          BL       SDIO_SendCommand
00008e  2006              MOVS     r0,#6                 ;1950
000090  f7fffffe          BL       CmdResp1Error
000094  4604              MOV      r4,r0                 ;1950
000096  2c2a              CMP      r4,#0x2a              ;1952
000098  d001              BEQ      |L9.158|
00009a  4620              MOV      r0,r4                 ;1954
00009c  e7bd              B        |L9.26|
                  |L9.158|
00009e  4620              MOV      r0,r4                 ;1956
0000a0  e7bb              B        |L9.26|
                  |L9.162|
0000a2  2425              MOVS     r4,#0x25              ;1960
0000a4  4620              MOV      r0,r4                 ;1961
0000a6  e7b8              B        |L9.26|
                  |L9.168|
0000a8  9801              LDR      r0,[sp,#4]            ;1967
0000aa  f4003080          AND      r0,r0,#0x10000        ;1967
0000ae  b378              CBZ      r0,|L9.272|
0000b0  481a              LDR      r0,|L9.284|
0000b2  8800              LDRH     r0,[r0,#0]            ;1970  ; RCA
0000b4  0400              LSLS     r0,r0,#16             ;1970
0000b6  491a              LDR      r1,|L9.288|
0000b8  6008              STR      r0,[r1,#0]            ;1970  ; SDIO_CmdInitStructure
0000ba  2037              MOVS     r0,#0x37              ;1971
0000bc  6048              STR      r0,[r1,#4]            ;1971  ; SDIO_CmdInitStructure
0000be  2040              MOVS     r0,#0x40              ;1972
0000c0  6088              STR      r0,[r1,#8]            ;1972  ; SDIO_CmdInitStructure
0000c2  2000              MOVS     r0,#0                 ;1973
0000c4  60c8              STR      r0,[r1,#0xc]          ;1973  ; SDIO_CmdInitStructure
0000c6  f44f6080          MOV      r0,#0x400             ;1974
0000ca  6108              STR      r0,[r1,#0x10]         ;1974  ; SDIO_CmdInitStructure
0000cc  4608              MOV      r0,r1                 ;1975
0000ce  f7fffffe          BL       SDIO_SendCommand
0000d2  2037              MOVS     r0,#0x37              ;1978
0000d4  f7fffffe          BL       CmdResp1Error
0000d8  4604              MOV      r4,r0                 ;1978
0000da  2c2a              CMP      r4,#0x2a              ;1980
0000dc  d001              BEQ      |L9.226|
0000de  4620              MOV      r0,r4                 ;1982
0000e0  e79b              B        |L9.26|
                  |L9.226|
0000e2  2000              MOVS     r0,#0                 ;1986
0000e4  490e              LDR      r1,|L9.288|
0000e6  6008              STR      r0,[r1,#0]            ;1986  ; SDIO_CmdInitStructure
0000e8  2006              MOVS     r0,#6                 ;1987
0000ea  6048              STR      r0,[r1,#4]            ;1987  ; SDIO_CmdInitStructure
0000ec  2040              MOVS     r0,#0x40              ;1988
0000ee  6088              STR      r0,[r1,#8]            ;1988  ; SDIO_CmdInitStructure
0000f0  2000              MOVS     r0,#0                 ;1989
0000f2  60c8              STR      r0,[r1,#0xc]          ;1989  ; SDIO_CmdInitStructure
0000f4  f44f6080          MOV      r0,#0x400             ;1990
0000f8  6108              STR      r0,[r1,#0x10]         ;1990  ; SDIO_CmdInitStructure
0000fa  4608              MOV      r0,r1                 ;1991
0000fc  f7fffffe          BL       SDIO_SendCommand
000100  2006              MOVS     r0,#6                 ;1993
000102  f7fffffe          BL       CmdResp1Error
000106  4604              MOV      r4,r0                 ;1993
000108  2c2a              CMP      r4,#0x2a              ;1995
00010a  d002              BEQ      |L9.274|
00010c  4620              MOV      r0,r4                 ;1997
00010e  e784              B        |L9.26|
                  |L9.272|
000110  e001              B        |L9.278|
                  |L9.274|
000112  4620              MOV      r0,r4                 ;2000
000114  e781              B        |L9.26|
                  |L9.278|
000116  2425              MOVS     r4,#0x25              ;2004
000118  4620              MOV      r0,r4                 ;2005
00011a  e77e              B        |L9.26|
;;;2009   
                          ENDP

                  |L9.284|
                          DCD      ||RCA||
                  |L9.288|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SDIOEx_Init||, CODE, READONLY, ALIGN=2

                  SDIOEx_Init PROC
;;;2294   
;;;2295   void SDIOEx_Init()
000000  b510              PUSH     {r4,lr}
;;;2296   {
;;;2297       SD_Error errorstatus = SD_OK;
000002  242a              MOVS     r4,#0x2a
;;;2298   
;;;2299       SDIO_DeInit();
000004  f7fffffe          BL       SDIO_DeInit
;;;2300       errorstatus = SD_PowerON();
000008  f7fffffe          BL       SD_PowerON
00000c  4604              MOV      r4,r0
;;;2301   
;;;2302       if (errorstatus != SD_OK) {
00000e  2c2a              CMP      r4,#0x2a
000010  d000              BEQ      |L10.20|
                  |L10.18|
;;;2303           /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;2304           return;
;;;2305       }
;;;2306   
;;;2307       errorstatus = SD_InitializeCards();
;;;2308   
;;;2309       if (errorstatus != SD_OK) {
;;;2310           /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;2311           return;
;;;2312       }
;;;2313   
;;;2314       /*!< Configure the SDIO peripheral */
;;;2315       /*!< SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_TRANSFER_CLK_DIV) */
;;;2316       SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;2317       SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;2318       SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;2319       SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;2320       SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;2321       SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;2322       SDIO_Init(&SDIO_InitStructure);
;;;2323     
;;;2324       if (errorstatus == SD_OK) {
;;;2325           /*----------------- Read CSD/CID MSD registers ------------------*/
;;;2326           errorstatus = SD_GetCardInfo(&SDCardInfo);
;;;2327       }
;;;2328   
;;;2329       if (errorstatus == SD_OK) {
;;;2330           /*----------------- Select Card --------------------------------*/
;;;2331           errorstatus = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
;;;2332       }
;;;2333   
;;;2334       if (errorstatus == SD_OK) {
;;;2335           errorstatus = SD_EnableWideBusOperation(SDIO_BusWide_1b);
;;;2336       }
;;;2337   
;;;2338       return;
;;;2339   }
000012  bd10              POP      {r4,pc}
                  |L10.20|
000014  f7fffffe          BL       SD_InitializeCards
000018  4604              MOV      r4,r0                 ;2307
00001a  2c2a              CMP      r4,#0x2a              ;2309
00001c  d000              BEQ      |L10.32|
00001e  e7f8              B        |L10.18|
                  |L10.32|
000020  2001              MOVS     r0,#1                 ;2316
000022  4911              LDR      r1,|L10.104|
000024  7508              STRB     r0,[r1,#0x14]         ;2316
000026  2000              MOVS     r0,#0                 ;2317
000028  6008              STR      r0,[r1,#0]            ;2317  ; SDIO_InitStructure
00002a  6048              STR      r0,[r1,#4]            ;2318  ; SDIO_InitStructure
00002c  6088              STR      r0,[r1,#8]            ;2319  ; SDIO_InitStructure
00002e  60c8              STR      r0,[r1,#0xc]          ;2320  ; SDIO_InitStructure
000030  6108              STR      r0,[r1,#0x10]         ;2321  ; SDIO_InitStructure
000032  4608              MOV      r0,r1                 ;2322
000034  f7fffffe          BL       SDIO_Init
000038  2c2a              CMP      r4,#0x2a              ;2324
00003a  d103              BNE      |L10.68|
00003c  480b              LDR      r0,|L10.108|
00003e  f7fffffe          BL       SD_GetCardInfo
000042  4604              MOV      r4,r0                 ;2326
                  |L10.68|
000044  2c2a              CMP      r4,#0x2a              ;2329
000046  d106              BNE      |L10.86|
000048  4908              LDR      r1,|L10.108|
00004a  f8b1104c          LDRH     r1,[r1,#0x4c]         ;2331  ; SDCardInfo
00004e  0408              LSLS     r0,r1,#16             ;2331
000050  f7fffffe          BL       SD_SelectDeselect
000054  4604              MOV      r4,r0                 ;2331
                  |L10.86|
000056  2c2a              CMP      r4,#0x2a              ;2334
000058  d103              BNE      |L10.98|
00005a  2000              MOVS     r0,#0                 ;2335
00005c  f7fffffe          BL       SD_EnableWideBusOperation
000060  4604              MOV      r4,r0                 ;2335
                  |L10.98|
000062  bf00              NOP                            ;2338
000064  e7d5              B        |L10.18|
                          ENDP

000066  0000              DCW      0x0000
                  |L10.104|
                          DCD      SDIO_InitStructure
                  |L10.108|
                          DCD      SDCardInfo

                          AREA ||i.SD_DeInit||, CODE, READONLY, ALIGN=1

                  SD_DeInit PROC
;;;156      */
;;;157    void SD_DeInit(void)
000000  b500              PUSH     {lr}
;;;158    { 
;;;159      SD_LowLevel_DeInit();
000002  f7fffffe          BL       SD_LowLevel_DeInit
;;;160    }
000006  bd00              POP      {pc}
;;;161    
                          ENDP


                          AREA ||i.SD_Detect||, CODE, READONLY, ALIGN=1

                  SD_Detect PROC
;;;220     */
;;;221    uint8_t SD_Detect(void)
000000  b508              PUSH     {r3,lr}
;;;222    {
;;;223      __IO uint8_t status = SD_PRESENT;
000002  2001              MOVS     r0,#1
000004  9000              STR      r0,[sp,#0]
;;;224    
;;;225      return status;
000006  f89d0000          LDRB     r0,[sp,#0]
;;;226    }
00000a  bd08              POP      {r3,pc}
;;;227    
                          ENDP


                          AREA ||i.SD_EnableWideBusOperation||, CODE, READONLY, ALIGN=2

                  SD_EnableWideBusOperation PROC
;;;694      */
;;;695    SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
000000  b570              PUSH     {r4-r6,lr}
;;;696    {
000002  4604              MOV      r4,r0
;;;697      SD_Error errorstatus = SD_OK;
000004  252a              MOVS     r5,#0x2a
;;;698    
;;;699      /*!< MMC Card doesn't support this feature */
;;;700      if (SDIO_MULTIMEDIA_CARD == CardType)
000006  4822              LDR      r0,|L13.144|
000008  6800              LDR      r0,[r0,#0]  ; CardType
00000a  2803              CMP      r0,#3
00000c  d102              BNE      |L13.20|
;;;701      {
;;;702        errorstatus = SD_UNSUPPORTED_FEATURE;
00000e  2527              MOVS     r5,#0x27
;;;703        return(errorstatus);
000010  4628              MOV      r0,r5
                  |L13.18|
;;;704      }
;;;705      else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;706      {
;;;707        if (SDIO_BusWide_8b == WideMode)
;;;708        {
;;;709          errorstatus = SD_UNSUPPORTED_FEATURE;
;;;710          return(errorstatus);
;;;711        }
;;;712        else if (SDIO_BusWide_4b == WideMode)
;;;713        {
;;;714          errorstatus = SDEnWideBus(ENABLE);
;;;715    
;;;716          if (SD_OK == errorstatus)
;;;717          {
;;;718            /*!< Configure the SDIO peripheral */
;;;719            SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;720            SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;721            SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;722            SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;723            SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
;;;724            SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;725            SDIO_Init(&SDIO_InitStructure);
;;;726          }
;;;727        }
;;;728        else
;;;729        {
;;;730          errorstatus = SDEnWideBus(DISABLE);
;;;731    
;;;732          if (SD_OK == errorstatus)
;;;733          {
;;;734            /*!< Configure the SDIO peripheral */
;;;735            SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;736            SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;737            SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;738            SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;739            SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;740            SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;741            SDIO_Init(&SDIO_InitStructure);
;;;742          }
;;;743        }
;;;744      }
;;;745    
;;;746      return(errorstatus);
;;;747    }
000012  bd70              POP      {r4-r6,pc}
                  |L13.20|
000014  481e              LDR      r0,|L13.144|
000016  6800              LDR      r0,[r0,#0]            ;705  ; CardType
000018  b138              CBZ      r0,|L13.42|
00001a  481d              LDR      r0,|L13.144|
00001c  6800              LDR      r0,[r0,#0]            ;705  ; CardType
00001e  2801              CMP      r0,#1                 ;705
000020  d003              BEQ      |L13.42|
000022  481b              LDR      r0,|L13.144|
000024  6800              LDR      r0,[r0,#0]            ;705  ; CardType
000026  2802              CMP      r0,#2                 ;705
000028  d130              BNE      |L13.140|
                  |L13.42|
00002a  f5b45f80          CMP      r4,#0x1000            ;707
00002e  d102              BNE      |L13.54|
000030  2527              MOVS     r5,#0x27              ;709
000032  4628              MOV      r0,r5                 ;710
000034  e7ed              B        |L13.18|
                  |L13.54|
000036  f5b46f00          CMP      r4,#0x800             ;712
00003a  d115              BNE      |L13.104|
00003c  2001              MOVS     r0,#1                 ;714
00003e  f7fffffe          BL       SDEnWideBus
000042  4605              MOV      r5,r0                 ;714
000044  2d2a              CMP      r5,#0x2a              ;716
000046  d121              BNE      |L13.140|
000048  2001              MOVS     r0,#1                 ;719
00004a  4912              LDR      r1,|L13.148|
00004c  7508              STRB     r0,[r1,#0x14]         ;719
00004e  2000              MOVS     r0,#0                 ;720
000050  6008              STR      r0,[r1,#0]            ;720  ; SDIO_InitStructure
000052  6048              STR      r0,[r1,#4]            ;721  ; SDIO_InitStructure
000054  6088              STR      r0,[r1,#8]            ;722  ; SDIO_InitStructure
000056  f44f6000          MOV      r0,#0x800             ;723
00005a  60c8              STR      r0,[r1,#0xc]          ;723  ; SDIO_InitStructure
00005c  2000              MOVS     r0,#0                 ;724
00005e  6108              STR      r0,[r1,#0x10]         ;724  ; SDIO_InitStructure
000060  4608              MOV      r0,r1                 ;725
000062  f7fffffe          BL       SDIO_Init
000066  e011              B        |L13.140|
                  |L13.104|
000068  2000              MOVS     r0,#0                 ;730
00006a  f7fffffe          BL       SDEnWideBus
00006e  4605              MOV      r5,r0                 ;730
000070  2d2a              CMP      r5,#0x2a              ;732
000072  d10b              BNE      |L13.140|
000074  2001              MOVS     r0,#1                 ;735
000076  4907              LDR      r1,|L13.148|
000078  7508              STRB     r0,[r1,#0x14]         ;735
00007a  2000              MOVS     r0,#0                 ;736
00007c  6008              STR      r0,[r1,#0]            ;736  ; SDIO_InitStructure
00007e  6048              STR      r0,[r1,#4]            ;737  ; SDIO_InitStructure
000080  6088              STR      r0,[r1,#8]            ;738  ; SDIO_InitStructure
000082  60c8              STR      r0,[r1,#0xc]          ;739  ; SDIO_InitStructure
000084  6108              STR      r0,[r1,#0x10]         ;740  ; SDIO_InitStructure
000086  4608              MOV      r0,r1                 ;741
000088  f7fffffe          BL       SDIO_Init
                  |L13.140|
00008c  4628              MOV      r0,r5                 ;746
00008e  e7c0              B        |L13.18|
;;;748    
                          ENDP

                  |L13.144|
                          DCD      CardType
                  |L13.148|
                          DCD      SDIO_InitStructure

                          AREA ||i.SD_Erase||, CODE, READONLY, ALIGN=2

                  SD_Erase PROC
;;;1168     */
;;;1169   SD_Error SD_Erase(uint32_t startaddr, uint32_t endaddr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;1170   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1171     SD_Error errorstatus = SD_OK;
000008  242a              MOVS     r4,#0x2a
;;;1172     uint32_t delay = 0;
00000a  2700              MOVS     r7,#0
;;;1173     __IO uint32_t maxdelay = 0;
00000c  2000              MOVS     r0,#0
00000e  9001              STR      r0,[sp,#4]
;;;1174     uint8_t cardstate = 0;
000010  9000              STR      r0,[sp,#0]
;;;1175   
;;;1176     /*!< Check if the card coomnd class supports erase command */
;;;1177     if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
000012  4846              LDR      r0,|L14.300|
000014  6840              LDR      r0,[r0,#4]  ; CSD_Tab
000016  2120              MOVS     r1,#0x20
000018  ea015010          AND      r0,r1,r0,LSR #20
00001c  b918              CBNZ     r0,|L14.38|
;;;1178     {
;;;1179       errorstatus = SD_REQUEST_NOT_APPLICABLE;
00001e  2425              MOVS     r4,#0x25
;;;1180       return(errorstatus);
000020  4620              MOV      r0,r4
                  |L14.34|
;;;1181     }
;;;1182   
;;;1183     maxdelay = 120000 / ((SDIO->CLKCR & 0xFF) + 2);
;;;1184   
;;;1185     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1186     {
;;;1187       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1188       return(errorstatus);
;;;1189     }
;;;1190   
;;;1191     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1192     {
;;;1193       startaddr /= 512;
;;;1194       endaddr /= 512;
;;;1195     }
;;;1196     
;;;1197     /*!< According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
;;;1198     if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1199     {
;;;1200       /*!< Send CMD32 SD_ERASE_GRP_START with argument as addr  */
;;;1201       SDIO_CmdInitStructure.SDIO_Argument = startaddr;
;;;1202       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_START;
;;;1203       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1204       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1205       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1206       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1207   
;;;1208       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_START);
;;;1209       if (errorstatus != SD_OK)
;;;1210       {
;;;1211         return(errorstatus);
;;;1212       }
;;;1213   
;;;1214       /*!< Send CMD33 SD_ERASE_GRP_END with argument as addr  */
;;;1215       SDIO_CmdInitStructure.SDIO_Argument = endaddr;
;;;1216       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_END;
;;;1217       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1218       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1219       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1220       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1221   
;;;1222       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_END);
;;;1223       if (errorstatus != SD_OK)
;;;1224       {
;;;1225         return(errorstatus);
;;;1226       }
;;;1227     }
;;;1228   
;;;1229     /*!< Send CMD38 ERASE */
;;;1230     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;1231     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ERASE;
;;;1232     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1233     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1234     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1235     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1236   
;;;1237     errorstatus = CmdResp1Error(SD_CMD_ERASE);
;;;1238   
;;;1239     if (errorstatus != SD_OK)
;;;1240     {
;;;1241       return(errorstatus);
;;;1242     }
;;;1243   
;;;1244     for (delay = 0; delay < maxdelay; delay++)
;;;1245     {}
;;;1246   
;;;1247     /*!< Wait till the card is in programming state */
;;;1248     errorstatus = IsCardProgramming(&cardstate);
;;;1249   
;;;1250     while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate)))
;;;1251     {
;;;1252       errorstatus = IsCardProgramming(&cardstate);
;;;1253     }
;;;1254   
;;;1255     return(errorstatus);
;;;1256   }
000022  e8bd81fc          POP      {r2-r8,pc}
                  |L14.38|
000026  4842              LDR      r0,|L14.304|
000028  6840              LDR      r0,[r0,#4]            ;1183
00002a  b2c0              UXTB     r0,r0                 ;1183
00002c  1c80              ADDS     r0,r0,#2              ;1183
00002e  4941              LDR      r1,|L14.308|
000030  fbb1f0f0          UDIV     r0,r1,r0              ;1183
000034  9001              STR      r0,[sp,#4]            ;1183
000036  2000              MOVS     r0,#0                 ;1185
000038  f7fffffe          BL       SDIO_GetResponse
00003c  f0007000          AND      r0,r0,#0x2000000      ;1185
000040  b110              CBZ      r0,|L14.72|
000042  240e              MOVS     r4,#0xe               ;1187
000044  4620              MOV      r0,r4                 ;1188
000046  e7ec              B        |L14.34|
                  |L14.72|
000048  483b              LDR      r0,|L14.312|
00004a  6800              LDR      r0,[r0,#0]            ;1191  ; CardType
00004c  2802              CMP      r0,#2                 ;1191
00004e  d101              BNE      |L14.84|
000050  0a6d              LSRS     r5,r5,#9              ;1193
000052  0a76              LSRS     r6,r6,#9              ;1194
                  |L14.84|
000054  4838              LDR      r0,|L14.312|
000056  6800              LDR      r0,[r0,#0]            ;1198  ; CardType
000058  b138              CBZ      r0,|L14.106|
00005a  4837              LDR      r0,|L14.312|
00005c  6800              LDR      r0,[r0,#0]            ;1198  ; CardType
00005e  2801              CMP      r0,#1                 ;1198
000060  d003              BEQ      |L14.106|
000062  4835              LDR      r0,|L14.312|
000064  6800              LDR      r0,[r0,#0]            ;1198  ; CardType
000066  2802              CMP      r0,#2                 ;1198
000068  d12d              BNE      |L14.198|
                  |L14.106|
00006a  4834              LDR      r0,|L14.316|
00006c  6005              STR      r5,[r0,#0]            ;1201  ; SDIO_CmdInitStructure
00006e  2020              MOVS     r0,#0x20              ;1202
000070  4932              LDR      r1,|L14.316|
000072  6048              STR      r0,[r1,#4]            ;1202  ; SDIO_CmdInitStructure
000074  2040              MOVS     r0,#0x40              ;1203
000076  6088              STR      r0,[r1,#8]            ;1203  ; SDIO_CmdInitStructure
000078  2000              MOVS     r0,#0                 ;1204
00007a  60c8              STR      r0,[r1,#0xc]          ;1204  ; SDIO_CmdInitStructure
00007c  f44f6080          MOV      r0,#0x400             ;1205
000080  6108              STR      r0,[r1,#0x10]         ;1205  ; SDIO_CmdInitStructure
000082  4608              MOV      r0,r1                 ;1206
000084  f7fffffe          BL       SDIO_SendCommand
000088  2020              MOVS     r0,#0x20              ;1208
00008a  f7fffffe          BL       CmdResp1Error
00008e  4604              MOV      r4,r0                 ;1208
000090  2c2a              CMP      r4,#0x2a              ;1209
000092  d001              BEQ      |L14.152|
000094  4620              MOV      r0,r4                 ;1211
000096  e7c4              B        |L14.34|
                  |L14.152|
000098  4828              LDR      r0,|L14.316|
00009a  6006              STR      r6,[r0,#0]            ;1215  ; SDIO_CmdInitStructure
00009c  2021              MOVS     r0,#0x21              ;1216
00009e  4927              LDR      r1,|L14.316|
0000a0  6048              STR      r0,[r1,#4]            ;1216  ; SDIO_CmdInitStructure
0000a2  2040              MOVS     r0,#0x40              ;1217
0000a4  6088              STR      r0,[r1,#8]            ;1217  ; SDIO_CmdInitStructure
0000a6  2000              MOVS     r0,#0                 ;1218
0000a8  60c8              STR      r0,[r1,#0xc]          ;1218  ; SDIO_CmdInitStructure
0000aa  f44f6080          MOV      r0,#0x400             ;1219
0000ae  6108              STR      r0,[r1,#0x10]         ;1219  ; SDIO_CmdInitStructure
0000b0  4608              MOV      r0,r1                 ;1220
0000b2  f7fffffe          BL       SDIO_SendCommand
0000b6  2021              MOVS     r0,#0x21              ;1222
0000b8  f7fffffe          BL       CmdResp1Error
0000bc  4604              MOV      r4,r0                 ;1222
0000be  2c2a              CMP      r4,#0x2a              ;1223
0000c0  d001              BEQ      |L14.198|
0000c2  4620              MOV      r0,r4                 ;1225
0000c4  e7ad              B        |L14.34|
                  |L14.198|
0000c6  2000              MOVS     r0,#0                 ;1230
0000c8  491c              LDR      r1,|L14.316|
0000ca  6008              STR      r0,[r1,#0]            ;1230  ; SDIO_CmdInitStructure
0000cc  2026              MOVS     r0,#0x26              ;1231
0000ce  6048              STR      r0,[r1,#4]            ;1231  ; SDIO_CmdInitStructure
0000d0  2040              MOVS     r0,#0x40              ;1232
0000d2  6088              STR      r0,[r1,#8]            ;1232  ; SDIO_CmdInitStructure
0000d4  2000              MOVS     r0,#0                 ;1233
0000d6  60c8              STR      r0,[r1,#0xc]          ;1233  ; SDIO_CmdInitStructure
0000d8  f44f6080          MOV      r0,#0x400             ;1234
0000dc  6108              STR      r0,[r1,#0x10]         ;1234  ; SDIO_CmdInitStructure
0000de  4608              MOV      r0,r1                 ;1235
0000e0  f7fffffe          BL       SDIO_SendCommand
0000e4  2026              MOVS     r0,#0x26              ;1237
0000e6  f7fffffe          BL       CmdResp1Error
0000ea  4604              MOV      r4,r0                 ;1237
0000ec  2c2a              CMP      r4,#0x2a              ;1239
0000ee  d001              BEQ      |L14.244|
0000f0  4620              MOV      r0,r4                 ;1241
0000f2  e796              B        |L14.34|
                  |L14.244|
0000f4  2700              MOVS     r7,#0                 ;1244
0000f6  e000              B        |L14.250|
                  |L14.248|
0000f8  1c7f              ADDS     r7,r7,#1              ;1244
                  |L14.250|
0000fa  9801              LDR      r0,[sp,#4]            ;1244
0000fc  4287              CMP      r7,r0                 ;1244
0000fe  d3fb              BCC      |L14.248|
000100  4668              MOV      r0,sp                 ;1248
000102  f7fffffe          BL       IsCardProgramming
000106  4604              MOV      r4,r0                 ;1248
000108  e003              B        |L14.274|
                  |L14.266|
00010a  4668              MOV      r0,sp                 ;1252
00010c  f7fffffe          BL       IsCardProgramming
000110  4604              MOV      r4,r0                 ;1252
                  |L14.274|
000112  2c2a              CMP      r4,#0x2a              ;1250
000114  d107              BNE      |L14.294|
000116  f89d0000          LDRB     r0,[sp,#0]            ;1250
00011a  2807              CMP      r0,#7                 ;1250
00011c  d0f5              BEQ      |L14.266|
00011e  f89d0000          LDRB     r0,[sp,#0]            ;1250
000122  2806              CMP      r0,#6                 ;1250
000124  d0f1              BEQ      |L14.266|
                  |L14.294|
000126  4620              MOV      r0,r4                 ;1255
000128  e77b              B        |L14.34|
;;;1257   
                          ENDP

00012a  0000              DCW      0x0000
                  |L14.300|
                          DCD      CSD_Tab
                  |L14.304|
                          DCD      0x40018000
                  |L14.308|
                          DCD      0x0001d4c0
                  |L14.312|
                          DCD      CardType
                  |L14.316|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_GetCardInfo||, CODE, READONLY, ALIGN=2

                  SD_GetCardInfo PROC
;;;482      */
;;;483    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
000000  b530              PUSH     {r4,r5,lr}
;;;484    {
000002  4601              MOV      r1,r0
;;;485      SD_Error errorstatus = SD_OK;
000004  202a              MOVS     r0,#0x2a
;;;486      uint8_t tmp = 0;
000006  2200              MOVS     r2,#0
;;;487    
;;;488      cardinfo->CardType = (uint8_t)CardType;
000008  4bac              LDR      r3,|L15.700|
00000a  781b              LDRB     r3,[r3,#0]  ; CardType
00000c  f881304e          STRB     r3,[r1,#0x4e]
;;;489      cardinfo->RCA = (uint16_t)RCA;
000010  4bab              LDR      r3,|L15.704|
000012  881b              LDRH     r3,[r3,#0]  ; RCA
000014  f8a1304c          STRH     r3,[r1,#0x4c]
;;;490    
;;;491      /*!< Byte 0 */
;;;492      tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
000018  4baa              LDR      r3,|L15.708|
00001a  681b              LDR      r3,[r3,#0]  ; CSD_Tab
00001c  0e1a              LSRS     r2,r3,#24
;;;493      cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
00001e  0993              LSRS     r3,r2,#6
000020  700b              STRB     r3,[r1,#0]
;;;494      cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
000022  f3c20383          UBFX     r3,r2,#2,#4
000026  704b              STRB     r3,[r1,#1]
;;;495      cardinfo->SD_csd.Reserved1 = tmp & 0x03;
000028  f0020303          AND      r3,r2,#3
00002c  708b              STRB     r3,[r1,#2]
;;;496    
;;;497      /*!< Byte 1 */
;;;498      tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
00002e  4ba5              LDR      r3,|L15.708|
000030  681b              LDR      r3,[r3,#0]  ; CSD_Tab
000032  f3c34207          UBFX     r2,r3,#16,#8
;;;499      cardinfo->SD_csd.TAAC = tmp;
000036  70ca              STRB     r2,[r1,#3]
;;;500    
;;;501      /*!< Byte 2 */
;;;502      tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
000038  4ba2              LDR      r3,|L15.708|
00003a  881b              LDRH     r3,[r3,#0]  ; CSD_Tab
00003c  f3c32207          UBFX     r2,r3,#8,#8
;;;503      cardinfo->SD_csd.NSAC = tmp;
000040  710a              STRB     r2,[r1,#4]
;;;504    
;;;505      /*!< Byte 3 */
;;;506      tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
000042  4ba0              LDR      r3,|L15.708|
000044  781a              LDRB     r2,[r3,#0]  ; CSD_Tab
;;;507      cardinfo->SD_csd.MaxBusClkFrec = tmp;
000046  714a              STRB     r2,[r1,#5]
;;;508    
;;;509      /*!< Byte 4 */
;;;510      tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
000048  685b              LDR      r3,[r3,#4]  ; CSD_Tab
00004a  0e1a              LSRS     r2,r3,#24
;;;511      cardinfo->SD_csd.CardComdClasses = tmp << 4;
00004c  0113              LSLS     r3,r2,#4
00004e  80cb              STRH     r3,[r1,#6]
;;;512    
;;;513      /*!< Byte 5 */
;;;514      tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
000050  4b9c              LDR      r3,|L15.708|
000052  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000054  f3c34207          UBFX     r2,r3,#16,#8
;;;515      cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
000058  88cb              LDRH     r3,[r1,#6]
00005a  ea431312          ORR      r3,r3,r2,LSR #4
00005e  80cb              STRH     r3,[r1,#6]
;;;516      cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
000060  f002030f          AND      r3,r2,#0xf
000064  720b              STRB     r3,[r1,#8]
;;;517    
;;;518      /*!< Byte 6 */
;;;519      tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
000066  4b97              LDR      r3,|L15.708|
000068  889b              LDRH     r3,[r3,#4]  ; CSD_Tab
00006a  f3c32207          UBFX     r2,r3,#8,#8
;;;520      cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
00006e  09d3              LSRS     r3,r2,#7
000070  724b              STRB     r3,[r1,#9]
;;;521      cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
000072  f3c21380          UBFX     r3,r2,#6,#1
000076  728b              STRB     r3,[r1,#0xa]
;;;522      cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
000078  f3c21340          UBFX     r3,r2,#5,#1
00007c  72cb              STRB     r3,[r1,#0xb]
;;;523      cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
00007e  f3c21300          UBFX     r3,r2,#4,#1
000082  730b              STRB     r3,[r1,#0xc]
;;;524      cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
000084  2300              MOVS     r3,#0
000086  734b              STRB     r3,[r1,#0xd]
;;;525    
;;;526      if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
000088  4b8c              LDR      r3,|L15.700|
00008a  681b              LDR      r3,[r3,#0]  ; CardType
00008c  b11b              CBZ      r3,|L15.150|
00008e  4b8b              LDR      r3,|L15.700|
000090  681b              LDR      r3,[r3,#0]  ; CardType
000092  2b01              CMP      r3,#1
000094  d13c              BNE      |L15.272|
                  |L15.150|
;;;527      {
;;;528        cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
000096  0793              LSLS     r3,r2,#30
000098  0d1b              LSRS     r3,r3,#20
00009a  610b              STR      r3,[r1,#0x10]
;;;529    
;;;530        /*!< Byte 7 */
;;;531        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
00009c  4b89              LDR      r3,|L15.708|
00009e  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;532        cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
0000a0  690b              LDR      r3,[r1,#0x10]
0000a2  ea430382          ORR      r3,r3,r2,LSL #2
0000a6  610b              STR      r3,[r1,#0x10]
;;;533    
;;;534        /*!< Byte 8 */
;;;535        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
0000a8  4b86              LDR      r3,|L15.708|
0000aa  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000ac  0e1a              LSRS     r2,r3,#24
;;;536        cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
0000ae  690b              LDR      r3,[r1,#0x10]
0000b0  ea431392          ORR      r3,r3,r2,LSR #6
0000b4  610b              STR      r3,[r1,#0x10]
;;;537    
;;;538        cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
0000b6  f3c203c2          UBFX     r3,r2,#3,#3
0000ba  750b              STRB     r3,[r1,#0x14]
;;;539        cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
0000bc  f0020307          AND      r3,r2,#7
0000c0  754b              STRB     r3,[r1,#0x15]
;;;540    
;;;541        /*!< Byte 9 */
;;;542        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
0000c2  4b80              LDR      r3,|L15.708|
0000c4  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000c6  f3c34207          UBFX     r2,r3,#16,#8
;;;543        cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
0000ca  0953              LSRS     r3,r2,#5
0000cc  758b              STRB     r3,[r1,#0x16]
;;;544        cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
0000ce  f3c20382          UBFX     r3,r2,#2,#3
0000d2  75cb              STRB     r3,[r1,#0x17]
;;;545        cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
0000d4  0793              LSLS     r3,r2,#30
0000d6  0f5b              LSRS     r3,r3,#29
0000d8  760b              STRB     r3,[r1,#0x18]
;;;546        /*!< Byte 10 */
;;;547        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
0000da  4b7a              LDR      r3,|L15.708|
0000dc  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
0000de  f3c32207          UBFX     r2,r3,#8,#8
;;;548        cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
0000e2  7e0b              LDRB     r3,[r1,#0x18]
0000e4  ea4313d2          ORR      r3,r3,r2,LSR #7
0000e8  760b              STRB     r3,[r1,#0x18]
;;;549        
;;;550        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
0000ea  690b              LDR      r3,[r1,#0x10]
0000ec  1c5b              ADDS     r3,r3,#1
0000ee  644b              STR      r3,[r1,#0x44]
;;;551        cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
0000f0  7e0c              LDRB     r4,[r1,#0x18]
0000f2  6c4b              LDR      r3,[r1,#0x44]
0000f4  1ca4              ADDS     r4,r4,#2
0000f6  2501              MOVS     r5,#1
0000f8  40a5              LSLS     r5,r5,r4
0000fa  436b              MULS     r3,r5,r3
0000fc  644b              STR      r3,[r1,#0x44]
;;;552        cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
0000fe  7a0c              LDRB     r4,[r1,#8]
000100  2301              MOVS     r3,#1
000102  40a3              LSLS     r3,r3,r4
000104  648b              STR      r3,[r1,#0x48]
;;;553        cardinfo->CardCapacity *= cardinfo->CardBlockSize;
000106  e9d13411          LDRD     r3,r4,[r1,#0x44]
00010a  4363              MULS     r3,r4,r3
00010c  644b              STR      r3,[r1,#0x44]
00010e  e021              B        |L15.340|
                  |L15.272|
;;;554      }
;;;555      else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000110  4b6a              LDR      r3,|L15.700|
000112  681b              LDR      r3,[r3,#0]  ; CardType
000114  2b02              CMP      r3,#2
000116  d11d              BNE      |L15.340|
;;;556      {
;;;557        /*!< Byte 7 */
;;;558        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
000118  4b6a              LDR      r3,|L15.708|
00011a  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;559        cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
00011c  0693              LSLS     r3,r2,#26
00011e  0a9b              LSRS     r3,r3,#10
000120  610b              STR      r3,[r1,#0x10]
;;;560    
;;;561        /*!< Byte 8 */
;;;562        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
000122  4b68              LDR      r3,|L15.708|
000124  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000126  0e1a              LSRS     r2,r3,#24
;;;563    
;;;564        cardinfo->SD_csd.DeviceSize |= (tmp << 8);
000128  690b              LDR      r3,[r1,#0x10]
00012a  ea432302          ORR      r3,r3,r2,LSL #8
00012e  610b              STR      r3,[r1,#0x10]
;;;565    
;;;566        /*!< Byte 9 */
;;;567        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
000130  4b64              LDR      r3,|L15.708|
000132  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000134  f3c34207          UBFX     r2,r3,#16,#8
;;;568    
;;;569        cardinfo->SD_csd.DeviceSize |= (tmp);
000138  690b              LDR      r3,[r1,#0x10]
00013a  4313              ORRS     r3,r3,r2
00013c  610b              STR      r3,[r1,#0x10]
;;;570    
;;;571        /*!< Byte 10 */
;;;572        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
00013e  4b61              LDR      r3,|L15.708|
000140  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
000142  f3c32207          UBFX     r2,r3,#8,#8
;;;573        
;;;574        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
000146  690b              LDR      r3,[r1,#0x10]
000148  1c5b              ADDS     r3,r3,#1
00014a  04db              LSLS     r3,r3,#19
00014c  644b              STR      r3,[r1,#0x44]
;;;575        cardinfo->CardBlockSize = 512;    
00014e  f44f7300          MOV      r3,#0x200
000152  648b              STR      r3,[r1,#0x48]
                  |L15.340|
;;;576      }
;;;577    
;;;578    
;;;579      cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
000154  f3c21380          UBFX     r3,r2,#6,#1
000158  f8013f19          STRB     r3,[r1,#0x19]!
;;;580      cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
00015c  0693              LSLS     r3,r2,#26
00015e  0e5b              LSRS     r3,r3,#25
000160  704b              STRB     r3,[r1,#1]
;;;581    
;;;582      /*!< Byte 11 */
;;;583      tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
000162  4b58              LDR      r3,|L15.708|
000164  7a1a              LDRB     r2,[r3,#8]  ; CSD_Tab
;;;584      cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
000166  784b              LDRB     r3,[r1,#1]
000168  ea4313d2          ORR      r3,r3,r2,LSR #7
00016c  704b              STRB     r3,[r1,#1]
;;;585      cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
00016e  f002037f          AND      r3,r2,#0x7f
000172  708b              STRB     r3,[r1,#2]
;;;586    
;;;587      /*!< Byte 12 */
;;;588      tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
000174  4b53              LDR      r3,|L15.708|
000176  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
000178  0e1a              LSRS     r2,r3,#24
;;;589      cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
00017a  09d3              LSRS     r3,r2,#7
00017c  70cb              STRB     r3,[r1,#3]
;;;590      cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
00017e  f3c21341          UBFX     r3,r2,#5,#2
000182  710b              STRB     r3,[r1,#4]
;;;591      cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
000184  f3c20382          UBFX     r3,r2,#2,#3
000188  714b              STRB     r3,[r1,#5]
;;;592      cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
00018a  0793              LSLS     r3,r2,#30
00018c  0f1b              LSRS     r3,r3,#28
00018e  718b              STRB     r3,[r1,#6]
;;;593    
;;;594      /*!< Byte 13 */
;;;595      tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
000190  4b4c              LDR      r3,|L15.708|
000192  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
000194  f3c34207          UBFX     r2,r3,#16,#8
;;;596      cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
000198  798b              LDRB     r3,[r1,#6]
00019a  ea431392          ORR      r3,r3,r2,LSR #6
00019e  718b              STRB     r3,[r1,#6]
;;;597      cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
0001a0  f3c21340          UBFX     r3,r2,#5,#1
0001a4  71cb              STRB     r3,[r1,#7]
;;;598      cardinfo->SD_csd.Reserved3 = 0;
0001a6  2300              MOVS     r3,#0
0001a8  720b              STRB     r3,[r1,#8]
;;;599      cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
0001aa  f0020301          AND      r3,r2,#1
0001ae  724b              STRB     r3,[r1,#9]
;;;600    
;;;601      /*!< Byte 14 */
;;;602      tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
0001b0  4b44              LDR      r3,|L15.708|
0001b2  899b              LDRH     r3,[r3,#0xc]  ; CSD_Tab
0001b4  f3c32207          UBFX     r2,r3,#8,#8
;;;603      cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
0001b8  09d3              LSRS     r3,r2,#7
0001ba  728b              STRB     r3,[r1,#0xa]
;;;604      cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
0001bc  f3c21380          UBFX     r3,r2,#6,#1
0001c0  72cb              STRB     r3,[r1,#0xb]
;;;605      cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
0001c2  f3c21340          UBFX     r3,r2,#5,#1
0001c6  730b              STRB     r3,[r1,#0xc]
;;;606      cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
0001c8  f3c21300          UBFX     r3,r2,#4,#1
0001cc  734b              STRB     r3,[r1,#0xd]
;;;607      cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
0001ce  f3c20381          UBFX     r3,r2,#2,#2
0001d2  738b              STRB     r3,[r1,#0xe]
;;;608      cardinfo->SD_csd.ECC = (tmp & 0x03);
0001d4  f0020303          AND      r3,r2,#3
0001d8  73cb              STRB     r3,[r1,#0xf]
;;;609    
;;;610      /*!< Byte 15 */
;;;611      tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
0001da  4b3a              LDR      r3,|L15.708|
0001dc  7b1a              LDRB     r2,[r3,#0xc]  ; CSD_Tab
;;;612      cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
0001de  0853              LSRS     r3,r2,#1
0001e0  740b              STRB     r3,[r1,#0x10]
;;;613      cardinfo->SD_csd.Reserved4 = 1;
0001e2  2301              MOVS     r3,#1
0001e4  744b              STRB     r3,[r1,#0x11]
;;;614    
;;;615    
;;;616      /*!< Byte 0 */
;;;617      tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
0001e6  4b38              LDR      r3,|L15.712|
0001e8  681b              LDR      r3,[r3,#0]  ; CID_Tab
0001ea  0e1a              LSRS     r2,r3,#24
;;;618      cardinfo->SD_cid.ManufacturerID = tmp;
0001ec  74ca              STRB     r2,[r1,#0x13]
0001ee  3919              SUBS     r1,r1,#0x19
;;;619    
;;;620      /*!< Byte 1 */
;;;621      tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
0001f0  4b35              LDR      r3,|L15.712|
0001f2  681b              LDR      r3,[r3,#0]  ; CID_Tab
0001f4  f3c34207          UBFX     r2,r3,#16,#8
;;;622      cardinfo->SD_cid.OEM_AppliID = tmp << 8;
0001f8  0214              LSLS     r4,r2,#8
0001fa  85cc              STRH     r4,[r1,#0x2e]
;;;623    
;;;624      /*!< Byte 2 */
;;;625      tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
0001fc  4b32              LDR      r3,|L15.712|
0001fe  881b              LDRH     r3,[r3,#0]  ; CID_Tab
000200  f3c32207          UBFX     r2,r3,#8,#8
;;;626      cardinfo->SD_cid.OEM_AppliID |= tmp;
000204  8dcb              LDRH     r3,[r1,#0x2e]
000206  4313              ORRS     r3,r3,r2
000208  85cb              STRH     r3,[r1,#0x2e]
;;;627    
;;;628      /*!< Byte 3 */
;;;629      tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
00020a  4b2f              LDR      r3,|L15.712|
00020c  781a              LDRB     r2,[r3,#0]  ; CID_Tab
;;;630      cardinfo->SD_cid.ProdName1 = tmp << 24;
00020e  0614              LSLS     r4,r2,#24
000210  630c              STR      r4,[r1,#0x30]
;;;631    
;;;632      /*!< Byte 4 */
;;;633      tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
000212  685b              LDR      r3,[r3,#4]  ; CID_Tab
000214  0e1a              LSRS     r2,r3,#24
;;;634      cardinfo->SD_cid.ProdName1 |= tmp << 16;
000216  6b0b              LDR      r3,[r1,#0x30]
000218  ea434402          ORR      r4,r3,r2,LSL #16
00021c  630c              STR      r4,[r1,#0x30]
;;;635    
;;;636      /*!< Byte 5 */
;;;637      tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
00021e  4b2a              LDR      r3,|L15.712|
000220  685b              LDR      r3,[r3,#4]  ; CID_Tab
000222  f3c34207          UBFX     r2,r3,#16,#8
;;;638      cardinfo->SD_cid.ProdName1 |= tmp << 8;
000226  6b0b              LDR      r3,[r1,#0x30]
000228  ea432402          ORR      r4,r3,r2,LSL #8
00022c  630c              STR      r4,[r1,#0x30]
;;;639    
;;;640      /*!< Byte 6 */
;;;641      tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
00022e  4b26              LDR      r3,|L15.712|
000230  889b              LDRH     r3,[r3,#4]  ; CID_Tab
000232  f3c32207          UBFX     r2,r3,#8,#8
;;;642      cardinfo->SD_cid.ProdName1 |= tmp;
000236  6b0b              LDR      r3,[r1,#0x30]
000238  4313              ORRS     r3,r3,r2
00023a  630b              STR      r3,[r1,#0x30]
;;;643    
;;;644      /*!< Byte 7 */
;;;645      tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
00023c  4b22              LDR      r3,|L15.712|
00023e  791a              LDRB     r2,[r3,#4]  ; CID_Tab
;;;646      cardinfo->SD_cid.ProdName2 = tmp;
000240  2334              MOVS     r3,#0x34
000242  545a              STRB     r2,[r3,r1]
;;;647    
;;;648      /*!< Byte 8 */
;;;649      tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
000244  4b20              LDR      r3,|L15.712|
000246  689b              LDR      r3,[r3,#8]  ; CID_Tab
000248  0e1a              LSRS     r2,r3,#24
;;;650      cardinfo->SD_cid.ProdRev = tmp;
00024a  2335              MOVS     r3,#0x35
00024c  545a              STRB     r2,[r3,r1]
;;;651    
;;;652      /*!< Byte 9 */
;;;653      tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
00024e  4b1e              LDR      r3,|L15.712|
000250  689b              LDR      r3,[r3,#8]  ; CID_Tab
000252  f3c34207          UBFX     r2,r3,#16,#8
;;;654      cardinfo->SD_cid.ProdSN = tmp << 24;
000256  0614              LSLS     r4,r2,#24
000258  638c              STR      r4,[r1,#0x38]
;;;655    
;;;656      /*!< Byte 10 */
;;;657      tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
00025a  4b1b              LDR      r3,|L15.712|
00025c  891b              LDRH     r3,[r3,#8]  ; CID_Tab
00025e  f3c32207          UBFX     r2,r3,#8,#8
;;;658      cardinfo->SD_cid.ProdSN |= tmp << 16;
000262  6b8b              LDR      r3,[r1,#0x38]
000264  ea434402          ORR      r4,r3,r2,LSL #16
000268  638c              STR      r4,[r1,#0x38]
;;;659    
;;;660      /*!< Byte 11 */
;;;661      tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
00026a  4b17              LDR      r3,|L15.712|
00026c  7a1a              LDRB     r2,[r3,#8]  ; CID_Tab
;;;662      cardinfo->SD_cid.ProdSN |= tmp << 8;
00026e  6b8b              LDR      r3,[r1,#0x38]
000270  ea432402          ORR      r4,r3,r2,LSL #8
000274  638c              STR      r4,[r1,#0x38]
;;;663    
;;;664      /*!< Byte 12 */
;;;665      tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
000276  4b14              LDR      r3,|L15.712|
000278  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
00027a  0e1a              LSRS     r2,r3,#24
;;;666      cardinfo->SD_cid.ProdSN |= tmp;
00027c  6b8b              LDR      r3,[r1,#0x38]
00027e  4313              ORRS     r3,r3,r2
000280  638b              STR      r3,[r1,#0x38]
;;;667    
;;;668      /*!< Byte 13 */
;;;669      tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
000282  4b11              LDR      r3,|L15.712|
000284  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
000286  f3c34207          UBFX     r2,r3,#16,#8
;;;670      cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
00028a  233c              MOVS     r3,#0x3c
00028c  5c5b              LDRB     r3,[r3,r1]
00028e  ea431412          ORR      r4,r3,r2,LSR #4
000292  233c              MOVS     r3,#0x3c
000294  545c              STRB     r4,[r3,r1]
;;;671      cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
000296  0713              LSLS     r3,r2,#28
000298  0d1c              LSRS     r4,r3,#20
00029a  87cc              STRH     r4,[r1,#0x3e]
;;;672    
;;;673      /*!< Byte 14 */
;;;674      tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
00029c  4b0a              LDR      r3,|L15.712|
00029e  899b              LDRH     r3,[r3,#0xc]  ; CID_Tab
0002a0  f3c32207          UBFX     r2,r3,#8,#8
;;;675      cardinfo->SD_cid.ManufactDate |= tmp;
0002a4  8fcb              LDRH     r3,[r1,#0x3e]
0002a6  4313              ORRS     r3,r3,r2
0002a8  87cb              STRH     r3,[r1,#0x3e]
;;;676    
;;;677      /*!< Byte 15 */
;;;678      tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
0002aa  4b07              LDR      r3,|L15.712|
0002ac  7b1a              LDRB     r2,[r3,#0xc]  ; CID_Tab
;;;679      cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
0002ae  0854              LSRS     r4,r2,#1
0002b0  2340              MOVS     r3,#0x40
0002b2  545c              STRB     r4,[r3,r1]
;;;680      cardinfo->SD_cid.Reserved2 = 1;
0002b4  2401              MOVS     r4,#1
0002b6  2341              MOVS     r3,#0x41
0002b8  545c              STRB     r4,[r3,r1]
;;;681      
;;;682      return(errorstatus);
;;;683    }
0002ba  bd30              POP      {r4,r5,pc}
;;;684    
                          ENDP

                  |L15.700|
                          DCD      CardType
                  |L15.704|
                          DCD      ||RCA||
                  |L15.708|
                          DCD      CSD_Tab
                  |L15.712|
                          DCD      CID_Tab

                          AREA ||i.SD_GetState||, CODE, READONLY, ALIGN=1

                  SD_GetState PROC
;;;194      */
;;;195    SDCardState SD_GetState(void)
000000  b508              PUSH     {r3,lr}
;;;196    {
;;;197      uint32_t resp1 = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;198      
;;;199      if(SD_Detect()== SD_PRESENT)
000006  f7fffffe          BL       SD_Detect
00000a  2801              CMP      r0,#1
00000c  d10a              BNE      |L16.36|
;;;200      {
;;;201        if (SD_SendStatus(&resp1) != SD_OK)
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       SD_SendStatus
000014  282a              CMP      r0,#0x2a
000016  d001              BEQ      |L16.28|
;;;202        {
;;;203          return SD_CARD_ERROR;
000018  20ff              MOVS     r0,#0xff
                  |L16.26|
;;;204        }
;;;205        else
;;;206        {
;;;207          return (SDCardState)((resp1 >> 9) & 0x0F);
;;;208        }
;;;209      }
;;;210      else
;;;211      {
;;;212        return SD_CARD_ERROR;
;;;213      }
;;;214    }
00001a  bd08              POP      {r3,pc}
                  |L16.28|
00001c  9800              LDR      r0,[sp,#0]            ;207
00001e  f3c02043          UBFX     r0,r0,#9,#4           ;207
000022  e7fa              B        |L16.26|
                  |L16.36|
000024  20ff              MOVS     r0,#0xff              ;212
000026  e7f8              B        |L16.26|
;;;215    
                          ENDP


                          AREA ||i.SD_GetStatus||, CODE, READONLY, ALIGN=1

                  SD_GetStatus PROC
;;;169      */
;;;170    SDTransferState SD_GetStatus(void)
000000  b510              PUSH     {r4,lr}
;;;171    {
;;;172      SDCardState cardstate =  SD_CARD_TRANSFER;
000002  2404              MOVS     r4,#4
;;;173    
;;;174      cardstate = SD_GetState();
000004  f7fffffe          BL       SD_GetState
000008  4604              MOV      r4,r0
;;;175      
;;;176      if (cardstate == SD_CARD_TRANSFER)
00000a  2c04              CMP      r4,#4
00000c  d101              BNE      |L17.18|
;;;177      {
;;;178        return(SD_TRANSFER_OK);
00000e  2000              MOVS     r0,#0
                  |L17.16|
;;;179      }
;;;180      else if(cardstate == SD_CARD_ERROR)
;;;181      {
;;;182        return (SD_TRANSFER_ERROR);
;;;183      }
;;;184      else
;;;185      {
;;;186        return(SD_TRANSFER_BUSY);
;;;187      }
;;;188    }
000010  bd10              POP      {r4,pc}
                  |L17.18|
000012  2cff              CMP      r4,#0xff              ;180
000014  d101              BNE      |L17.26|
000016  2002              MOVS     r0,#2                 ;182
000018  e7fa              B        |L17.16|
                  |L17.26|
00001a  2001              MOVS     r0,#1                 ;186
00001c  e7f8              B        |L17.16|
;;;189    
                          ENDP


                          AREA ||i.SD_GetTransferState||, CODE, READONLY, ALIGN=2

                  SD_GetTransferState PROC
;;;1128     */
;;;1129   SDTransferState SD_GetTransferState(void)
000000  4804              LDR      r0,|L18.20|
;;;1130   {
;;;1131     if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
000002  6b40              LDR      r0,[r0,#0x34]
000004  f4005040          AND      r0,r0,#0x3000
000008  b108              CBZ      r0,|L18.14|
;;;1132     {
;;;1133       return(SD_TRANSFER_BUSY);
00000a  2001              MOVS     r0,#1
                  |L18.12|
;;;1134     }
;;;1135     else
;;;1136     {
;;;1137       return(SD_TRANSFER_OK);
;;;1138     }
;;;1139   }
00000c  4770              BX       lr
                  |L18.14|
00000e  2000              MOVS     r0,#0                 ;1137
000010  e7fc              B        |L18.12|
;;;1140   
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      0x40018000

                          AREA ||i.SD_InitializeCards||, CODE, READONLY, ALIGN=2

                  SD_InitializeCards PROC
;;;393      */
;;;394    SD_Error SD_InitializeCards(void)
000000  b538              PUSH     {r3-r5,lr}
;;;395    {
;;;396      SD_Error errorstatus = SD_OK;
000002  242a              MOVS     r4,#0x2a
;;;397      uint16_t rca = 0x01;
000004  2001              MOVS     r0,#1
000006  9000              STR      r0,[sp,#0]
;;;398    
;;;399      if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
000008  f7fffffe          BL       SDIO_GetPowerState
00000c  b910              CBNZ     r0,|L19.20|
;;;400      {
;;;401        errorstatus = SD_REQUEST_NOT_APPLICABLE;
00000e  2425              MOVS     r4,#0x25
;;;402        return(errorstatus);
000010  4620              MOV      r0,r4
                  |L19.18|
;;;403      }
;;;404    
;;;405      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;406      {
;;;407        /*!< Send CMD2 ALL_SEND_CID */
;;;408        SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;409        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
;;;410        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;411        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;412        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;413        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;414    
;;;415        errorstatus = CmdResp2Error();
;;;416    
;;;417        if (SD_OK != errorstatus)
;;;418        {
;;;419          return(errorstatus);
;;;420        }
;;;421    
;;;422        CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;423        CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;424        CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;425        CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;426      }
;;;427      if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
;;;428          ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;429      {
;;;430        /*!< Send CMD3 SET_REL_ADDR with argument 0 */
;;;431        /*!< SD Card publishes its RCA. */
;;;432        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;433        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
;;;434        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;435        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;436        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;437        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;438    
;;;439        errorstatus = CmdResp6Error(SD_CMD_SET_REL_ADDR, &rca);
;;;440    
;;;441        if (SD_OK != errorstatus)
;;;442        {
;;;443          return(errorstatus);
;;;444        }
;;;445      }
;;;446    
;;;447      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;448      {
;;;449        RCA = rca;
;;;450    
;;;451        /*!< Send CMD9 SEND_CSD with argument as card's RCA */
;;;452        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
;;;453        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
;;;454        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;455        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;456        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;457        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;458    
;;;459        errorstatus = CmdResp2Error();
;;;460    
;;;461        if (SD_OK != errorstatus)
;;;462        {
;;;463          return(errorstatus);
;;;464        }
;;;465    
;;;466        CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;467        CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;468        CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;469        CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;470      }
;;;471    
;;;472      errorstatus = SD_OK; /*!< All cards get intialized */
;;;473    
;;;474      return(errorstatus);
;;;475    }
000012  bd38              POP      {r3-r5,pc}
                  |L19.20|
000014  4845              LDR      r0,|L19.300|
000016  6800              LDR      r0,[r0,#0]            ;405  ; CardType
000018  2804              CMP      r0,#4                 ;405
00001a  d029              BEQ      |L19.112|
00001c  2000              MOVS     r0,#0                 ;408
00001e  4944              LDR      r1,|L19.304|
000020  6008              STR      r0,[r1,#0]            ;408  ; SDIO_CmdInitStructure
000022  2002              MOVS     r0,#2                 ;409
000024  6048              STR      r0,[r1,#4]            ;409  ; SDIO_CmdInitStructure
000026  20c0              MOVS     r0,#0xc0              ;410
000028  6088              STR      r0,[r1,#8]            ;410  ; SDIO_CmdInitStructure
00002a  2000              MOVS     r0,#0                 ;411
00002c  60c8              STR      r0,[r1,#0xc]          ;411  ; SDIO_CmdInitStructure
00002e  f44f6080          MOV      r0,#0x400             ;412
000032  6108              STR      r0,[r1,#0x10]         ;412  ; SDIO_CmdInitStructure
000034  4608              MOV      r0,r1                 ;413
000036  f7fffffe          BL       SDIO_SendCommand
00003a  f7fffffe          BL       CmdResp2Error
00003e  4604              MOV      r4,r0                 ;415
000040  2c2a              CMP      r4,#0x2a              ;417
000042  d001              BEQ      |L19.72|
000044  4620              MOV      r0,r4                 ;419
000046  e7e4              B        |L19.18|
                  |L19.72|
000048  2000              MOVS     r0,#0                 ;422
00004a  f7fffffe          BL       SDIO_GetResponse
00004e  4939              LDR      r1,|L19.308|
000050  6008              STR      r0,[r1,#0]            ;422  ; CID_Tab
000052  2004              MOVS     r0,#4                 ;423
000054  f7fffffe          BL       SDIO_GetResponse
000058  4936              LDR      r1,|L19.308|
00005a  6048              STR      r0,[r1,#4]            ;423  ; CID_Tab
00005c  2008              MOVS     r0,#8                 ;424
00005e  f7fffffe          BL       SDIO_GetResponse
000062  4934              LDR      r1,|L19.308|
000064  6088              STR      r0,[r1,#8]            ;424  ; CID_Tab
000066  200c              MOVS     r0,#0xc               ;425
000068  f7fffffe          BL       SDIO_GetResponse
00006c  4931              LDR      r1,|L19.308|
00006e  60c8              STR      r0,[r1,#0xc]          ;425  ; CID_Tab
                  |L19.112|
000070  482e              LDR      r0,|L19.300|
000072  6800              LDR      r0,[r0,#0]            ;427  ; CardType
000074  b158              CBZ      r0,|L19.142|
000076  482d              LDR      r0,|L19.300|
000078  6800              LDR      r0,[r0,#0]            ;427  ; CardType
00007a  2801              CMP      r0,#1                 ;427
00007c  d007              BEQ      |L19.142|
00007e  482b              LDR      r0,|L19.300|
000080  6800              LDR      r0,[r0,#0]            ;427  ; CardType
000082  2806              CMP      r0,#6                 ;427
000084  d003              BEQ      |L19.142|
000086  4829              LDR      r0,|L19.300|
000088  6800              LDR      r0,[r0,#0]            ;428  ; CardType
00008a  2802              CMP      r0,#2                 ;428
00008c  d117              BNE      |L19.190|
                  |L19.142|
00008e  2000              MOVS     r0,#0                 ;432
000090  4927              LDR      r1,|L19.304|
000092  6008              STR      r0,[r1,#0]            ;432  ; SDIO_CmdInitStructure
000094  2003              MOVS     r0,#3                 ;433
000096  6048              STR      r0,[r1,#4]            ;433  ; SDIO_CmdInitStructure
000098  2040              MOVS     r0,#0x40              ;434
00009a  6088              STR      r0,[r1,#8]            ;434  ; SDIO_CmdInitStructure
00009c  2000              MOVS     r0,#0                 ;435
00009e  60c8              STR      r0,[r1,#0xc]          ;435  ; SDIO_CmdInitStructure
0000a0  f44f6080          MOV      r0,#0x400             ;436
0000a4  6108              STR      r0,[r1,#0x10]         ;436  ; SDIO_CmdInitStructure
0000a6  4608              MOV      r0,r1                 ;437
0000a8  f7fffffe          BL       SDIO_SendCommand
0000ac  4669              MOV      r1,sp                 ;439
0000ae  2003              MOVS     r0,#3                 ;439
0000b0  f7fffffe          BL       CmdResp6Error
0000b4  4604              MOV      r4,r0                 ;439
0000b6  2c2a              CMP      r4,#0x2a              ;441
0000b8  d001              BEQ      |L19.190|
0000ba  4620              MOV      r0,r4                 ;443
0000bc  e7a9              B        |L19.18|
                  |L19.190|
0000be  481b              LDR      r0,|L19.300|
0000c0  6800              LDR      r0,[r0,#0]            ;447  ; CardType
0000c2  2804              CMP      r0,#4                 ;447
0000c4  d02f              BEQ      |L19.294|
0000c6  f8bd0000          LDRH     r0,[sp,#0]            ;449
0000ca  491b              LDR      r1,|L19.312|
0000cc  6008              STR      r0,[r1,#0]            ;449  ; RCA
0000ce  f8bd0000          LDRH     r0,[sp,#0]            ;452
0000d2  0400              LSLS     r0,r0,#16             ;452
0000d4  4916              LDR      r1,|L19.304|
0000d6  6008              STR      r0,[r1,#0]            ;452  ; SDIO_CmdInitStructure
0000d8  2009              MOVS     r0,#9                 ;453
0000da  6048              STR      r0,[r1,#4]            ;453  ; SDIO_CmdInitStructure
0000dc  20c0              MOVS     r0,#0xc0              ;454
0000de  6088              STR      r0,[r1,#8]            ;454  ; SDIO_CmdInitStructure
0000e0  2000              MOVS     r0,#0                 ;455
0000e2  60c8              STR      r0,[r1,#0xc]          ;455  ; SDIO_CmdInitStructure
0000e4  f44f6080          MOV      r0,#0x400             ;456
0000e8  6108              STR      r0,[r1,#0x10]         ;456  ; SDIO_CmdInitStructure
0000ea  4608              MOV      r0,r1                 ;457
0000ec  f7fffffe          BL       SDIO_SendCommand
0000f0  f7fffffe          BL       CmdResp2Error
0000f4  4604              MOV      r4,r0                 ;459
0000f6  2c2a              CMP      r4,#0x2a              ;461
0000f8  d001              BEQ      |L19.254|
0000fa  4620              MOV      r0,r4                 ;463
0000fc  e789              B        |L19.18|
                  |L19.254|
0000fe  2000              MOVS     r0,#0                 ;466
000100  f7fffffe          BL       SDIO_GetResponse
000104  490d              LDR      r1,|L19.316|
000106  6008              STR      r0,[r1,#0]            ;466  ; CSD_Tab
000108  2004              MOVS     r0,#4                 ;467
00010a  f7fffffe          BL       SDIO_GetResponse
00010e  490b              LDR      r1,|L19.316|
000110  6048              STR      r0,[r1,#4]            ;467  ; CSD_Tab
000112  2008              MOVS     r0,#8                 ;468
000114  f7fffffe          BL       SDIO_GetResponse
000118  4908              LDR      r1,|L19.316|
00011a  6088              STR      r0,[r1,#8]            ;468  ; CSD_Tab
00011c  200c              MOVS     r0,#0xc               ;469
00011e  f7fffffe          BL       SDIO_GetResponse
000122  4906              LDR      r1,|L19.316|
000124  60c8              STR      r0,[r1,#0xc]          ;469  ; CSD_Tab
                  |L19.294|
000126  242a              MOVS     r4,#0x2a              ;472
000128  4620              MOV      r0,r4                 ;474
00012a  e772              B        |L19.18|
;;;476    
                          ENDP

                  |L19.300|
                          DCD      CardType
                  |L19.304|
                          DCD      SDIO_CmdInitStructure
                  |L19.308|
                          DCD      CID_Tab
                  |L19.312|
                          DCD      ||RCA||
                  |L19.316|
                          DCD      CSD_Tab

                          AREA ||i.SD_LowLevel_DeInit||, CODE, READONLY, ALIGN=1

                  SD_LowLevel_DeInit PROC
;;;125    
;;;126    void SD_LowLevel_DeInit(void)
000000  4770              BX       lr
;;;127    {
;;;128    
;;;129    }
;;;130    
                          ENDP


                          AREA ||i.SD_LowLevel_Init||, CODE, READONLY, ALIGN=1

                  SD_LowLevel_Init PROC
;;;136      */
;;;137    void SD_LowLevel_Init(void)
000000  4770              BX       lr
;;;138    {
;;;139    
;;;140    }
;;;141    
                          ENDP


                          AREA ||i.SD_PowerOFF||, CODE, READONLY, ALIGN=1

                  SD_PowerOFF PROC
;;;377      */
;;;378    SD_Error SD_PowerOFF(void)
000000  b510              PUSH     {r4,lr}
;;;379    {
;;;380      SD_Error errorstatus = SD_OK;
000002  242a              MOVS     r4,#0x2a
;;;381    
;;;382      /*!< Set Power State to OFF */
;;;383      SDIO_SetPowerState(SDIO_PowerState_OFF);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       SDIO_SetPowerState
;;;384    
;;;385      return(errorstatus);
00000a  4620              MOV      r0,r4
;;;386    }
00000c  bd10              POP      {r4,pc}
;;;387    
                          ENDP


                          AREA ||i.SD_PowerON||, CODE, READONLY, ALIGN=2

                  SD_PowerON PROC
;;;233      */
;;;234    SD_Error SD_PowerON(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;235    {
;;;236      SD_Error errorstatus = SD_OK;
000004  242a              MOVS     r4,#0x2a
;;;237      uint32_t response = 0, count = 0, validvoltage = 0;
000006  2600              MOVS     r6,#0
000008  2500              MOVS     r5,#0
00000a  2700              MOVS     r7,#0
;;;238      uint32_t SDType = SD_STD_CAPACITY;
00000c  f04f0800          MOV      r8,#0
;;;239    
;;;240      /*!< Power ON Sequence -----------------------------------------------------*/
;;;241      /*!< Configure the SDIO peripheral */
;;;242      /*!< SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_INIT_CLK_DIV) */
;;;243      /*!< SDIO_CK for initialization should not exceed 400 KHz */  
;;;244      SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
000010  20b2              MOVS     r0,#0xb2
000012  495b              LDR      r1,|L23.384|
000014  7508              STRB     r0,[r1,#0x14]
;;;245      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000016  2000              MOVS     r0,#0
000018  6008              STR      r0,[r1,#0]  ; SDIO_InitStructure
;;;246      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
00001a  6048              STR      r0,[r1,#4]  ; SDIO_InitStructure
;;;247      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
00001c  6088              STR      r0,[r1,#8]  ; SDIO_InitStructure
;;;248      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
00001e  60c8              STR      r0,[r1,#0xc]  ; SDIO_InitStructure
;;;249      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
000020  6108              STR      r0,[r1,#0x10]  ; SDIO_InitStructure
;;;250      SDIO_Init(&SDIO_InitStructure);
000022  4608              MOV      r0,r1
000024  f7fffffe          BL       SDIO_Init
;;;251    
;;;252      /*!< Set Power State to ON */
;;;253      SDIO_SetPowerState(SDIO_PowerState_ON);
000028  2003              MOVS     r0,#3
00002a  f7fffffe          BL       SDIO_SetPowerState
;;;254    
;;;255      /*!< Enable SDIO Clock */
;;;256      SDIO_ClockCmd(ENABLE);
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       SDIO_ClockCmd
;;;257    
;;;258      /*!< CMD0: GO_IDLE_STATE ---------------------------------------------------*/
;;;259      /*!< No CMD response required */
;;;260      SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000034  2000              MOVS     r0,#0
000036  4953              LDR      r1,|L23.388|
000038  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;261      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
00003a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;262      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
00003c  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;263      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00003e  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;264      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000040  f44f6080          MOV      r0,#0x400
000044  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;265      SDIO_SendCommand(&SDIO_CmdInitStructure);
000046  4608              MOV      r0,r1
000048  f7fffffe          BL       SDIO_SendCommand
;;;266    
;;;267      errorstatus = CmdError();
00004c  f7fffffe          BL       CmdError
000050  4604              MOV      r4,r0
;;;268    
;;;269      if (errorstatus != SD_OK)
000052  2c2a              CMP      r4,#0x2a
000054  d002              BEQ      |L23.92|
;;;270      {
;;;271        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;272        return(errorstatus);
000056  4620              MOV      r0,r4
                  |L23.88|
;;;273      }
;;;274    
;;;275      /*!< CMD8: SEND_IF_COND ----------------------------------------------------*/
;;;276      /*!< Send CMD8 to verify SD card interface operating condition */
;;;277      /*!< Argument: - [31:12]: Reserved (shall be set to '0')
;;;278                   - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
;;;279                   - [7:0]: Check Pattern (recommended 0xAA) */
;;;280      /*!< CMD Response: R7 */
;;;281      SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
;;;282      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
;;;283      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;284      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;285      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;286      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;287    
;;;288      errorstatus = CmdResp7Error();
;;;289    
;;;290      if (errorstatus == SD_OK)
;;;291      {
;;;292        CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /*!< SD Card 2.0 */
;;;293        SDType = SD_HIGH_CAPACITY;
;;;294      }
;;;295      else
;;;296      {
;;;297        /*!< CMD55 */
;;;298        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;299        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;300        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;301        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;302        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;303        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;304        errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;305      }
;;;306      /*!< CMD55 */
;;;307      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;308      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;309      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;310      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;311      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;312      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;313      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;314    
;;;315      /*!< If errorstatus is Command TimeOut, it is a MMC card */
;;;316      /*!< If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
;;;317         or SD card 1.x */
;;;318      if (errorstatus == SD_OK)
;;;319      {
;;;320        /*!< SD CARD */
;;;321        /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
;;;322        while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
;;;323        {
;;;324    
;;;325          /*!< SEND CMD55 APP_CMD with RCA as 0 */
;;;326          SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;327          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;328          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;329          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;330          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;331          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;332    
;;;333          errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;334    
;;;335          if (errorstatus != SD_OK)
;;;336          {
;;;337            return(errorstatus);
;;;338          }
;;;339          SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
;;;340          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
;;;341          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;342          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;343          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;344          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;345    
;;;346          errorstatus = CmdResp3Error();
;;;347          if (errorstatus != SD_OK)
;;;348          {
;;;349            return(errorstatus);
;;;350          }
;;;351    
;;;352          response = SDIO_GetResponse(SDIO_RESP1);
;;;353          validvoltage = (((response >> 31) == 1) ? 1 : 0);
;;;354          count++;
;;;355        }
;;;356        if (count >= SD_MAX_VOLT_TRIAL)
;;;357        {
;;;358          errorstatus = SD_INVALID_VOLTRANGE;
;;;359          return(errorstatus);
;;;360        }
;;;361    
;;;362        if (response &= SD_HIGH_CAPACITY)
;;;363        {
;;;364          CardType = SDIO_HIGH_CAPACITY_SD_CARD;
;;;365          //tftprintf("SDIO_HIGH_CAPACITY_SD_CARD");
;;;366        }
;;;367    
;;;368      }/*!< else MMC Card */
;;;369    
;;;370      return(errorstatus);
;;;371    }
000058  e8bd81f0          POP      {r4-r8,pc}
                  |L23.92|
00005c  f44f70d5          MOV      r0,#0x1aa             ;281
000060  4948              LDR      r1,|L23.388|
000062  6008              STR      r0,[r1,#0]            ;281  ; SDIO_CmdInitStructure
000064  2008              MOVS     r0,#8                 ;282
000066  6048              STR      r0,[r1,#4]            ;282  ; SDIO_CmdInitStructure
000068  2040              MOVS     r0,#0x40              ;283
00006a  6088              STR      r0,[r1,#8]            ;283  ; SDIO_CmdInitStructure
00006c  2000              MOVS     r0,#0                 ;284
00006e  60c8              STR      r0,[r1,#0xc]          ;284  ; SDIO_CmdInitStructure
000070  f44f6080          MOV      r0,#0x400             ;285
000074  6108              STR      r0,[r1,#0x10]         ;285  ; SDIO_CmdInitStructure
000076  4608              MOV      r0,r1                 ;286
000078  f7fffffe          BL       SDIO_SendCommand
00007c  f7fffffe          BL       CmdResp7Error
000080  4604              MOV      r4,r0                 ;288
000082  2c2a              CMP      r4,#0x2a              ;290
000084  d105              BNE      |L23.146|
000086  2001              MOVS     r0,#1                 ;292
000088  493f              LDR      r1,|L23.392|
00008a  6008              STR      r0,[r1,#0]            ;292  ; CardType
00008c  f04f4880          MOV      r8,#0x40000000        ;293
000090  e012              B        |L23.184|
                  |L23.146|
000092  2000              MOVS     r0,#0                 ;298
000094  493b              LDR      r1,|L23.388|
000096  6008              STR      r0,[r1,#0]            ;298  ; SDIO_CmdInitStructure
000098  2037              MOVS     r0,#0x37              ;299
00009a  6048              STR      r0,[r1,#4]            ;299  ; SDIO_CmdInitStructure
00009c  2040              MOVS     r0,#0x40              ;300
00009e  6088              STR      r0,[r1,#8]            ;300  ; SDIO_CmdInitStructure
0000a0  2000              MOVS     r0,#0                 ;301
0000a2  60c8              STR      r0,[r1,#0xc]          ;301  ; SDIO_CmdInitStructure
0000a4  f44f6080          MOV      r0,#0x400             ;302
0000a8  6108              STR      r0,[r1,#0x10]         ;302  ; SDIO_CmdInitStructure
0000aa  4608              MOV      r0,r1                 ;303
0000ac  f7fffffe          BL       SDIO_SendCommand
0000b0  2037              MOVS     r0,#0x37              ;304
0000b2  f7fffffe          BL       CmdResp1Error
0000b6  4604              MOV      r4,r0                 ;304
                  |L23.184|
0000b8  2000              MOVS     r0,#0                 ;307
0000ba  4932              LDR      r1,|L23.388|
0000bc  6008              STR      r0,[r1,#0]            ;307  ; SDIO_CmdInitStructure
0000be  2037              MOVS     r0,#0x37              ;308
0000c0  6048              STR      r0,[r1,#4]            ;308  ; SDIO_CmdInitStructure
0000c2  2040              MOVS     r0,#0x40              ;309
0000c4  6088              STR      r0,[r1,#8]            ;309  ; SDIO_CmdInitStructure
0000c6  2000              MOVS     r0,#0                 ;310
0000c8  60c8              STR      r0,[r1,#0xc]          ;310  ; SDIO_CmdInitStructure
0000ca  f44f6080          MOV      r0,#0x400             ;311
0000ce  6108              STR      r0,[r1,#0x10]         ;311  ; SDIO_CmdInitStructure
0000d0  4608              MOV      r0,r1                 ;312
0000d2  f7fffffe          BL       SDIO_SendCommand
0000d6  2037              MOVS     r0,#0x37              ;313
0000d8  f7fffffe          BL       CmdResp1Error
0000dc  4604              MOV      r4,r0                 ;313
0000de  2c2a              CMP      r4,#0x2a              ;318
0000e0  d14c              BNE      |L23.380|
0000e2  e038              B        |L23.342|
                  |L23.228|
0000e4  2000              MOVS     r0,#0                 ;326
0000e6  4927              LDR      r1,|L23.388|
0000e8  6008              STR      r0,[r1,#0]            ;326  ; SDIO_CmdInitStructure
0000ea  2037              MOVS     r0,#0x37              ;327
0000ec  6048              STR      r0,[r1,#4]            ;327  ; SDIO_CmdInitStructure
0000ee  2040              MOVS     r0,#0x40              ;328
0000f0  6088              STR      r0,[r1,#8]            ;328  ; SDIO_CmdInitStructure
0000f2  2000              MOVS     r0,#0                 ;329
0000f4  60c8              STR      r0,[r1,#0xc]          ;329  ; SDIO_CmdInitStructure
0000f6  f44f6080          MOV      r0,#0x400             ;330
0000fa  6108              STR      r0,[r1,#0x10]         ;330  ; SDIO_CmdInitStructure
0000fc  4608              MOV      r0,r1                 ;331
0000fe  f7fffffe          BL       SDIO_SendCommand
000102  2037              MOVS     r0,#0x37              ;333
000104  f7fffffe          BL       CmdResp1Error
000108  4604              MOV      r4,r0                 ;333
00010a  2c2a              CMP      r4,#0x2a              ;335
00010c  d001              BEQ      |L23.274|
00010e  4620              MOV      r0,r4                 ;337
000110  e7a2              B        |L23.88|
                  |L23.274|
000112  481e              LDR      r0,|L23.396|
000114  ea480000          ORR      r0,r8,r0              ;339
000118  491a              LDR      r1,|L23.388|
00011a  6008              STR      r0,[r1,#0]            ;339  ; SDIO_CmdInitStructure
00011c  2029              MOVS     r0,#0x29              ;340
00011e  6048              STR      r0,[r1,#4]            ;340  ; SDIO_CmdInitStructure
000120  2040              MOVS     r0,#0x40              ;341
000122  6088              STR      r0,[r1,#8]            ;341  ; SDIO_CmdInitStructure
000124  2000              MOVS     r0,#0                 ;342
000126  60c8              STR      r0,[r1,#0xc]          ;342  ; SDIO_CmdInitStructure
000128  f44f6080          MOV      r0,#0x400             ;343
00012c  6108              STR      r0,[r1,#0x10]         ;343  ; SDIO_CmdInitStructure
00012e  4608              MOV      r0,r1                 ;344
000130  f7fffffe          BL       SDIO_SendCommand
000134  f7fffffe          BL       CmdResp3Error
000138  4604              MOV      r4,r0                 ;346
00013a  2c2a              CMP      r4,#0x2a              ;347
00013c  d001              BEQ      |L23.322|
00013e  4620              MOV      r0,r4                 ;349
000140  e78a              B        |L23.88|
                  |L23.322|
000142  2000              MOVS     r0,#0                 ;352
000144  f7fffffe          BL       SDIO_GetResponse
000148  4606              MOV      r6,r0                 ;352
00014a  2001              MOVS     r0,#1                 ;353
00014c  ea8070d6          EOR      r0,r0,r6,LSR #31      ;353
000150  f0800701          EOR      r7,r0,#1              ;353
000154  1c6d              ADDS     r5,r5,#1              ;354
                  |L23.342|
000156  b91f              CBNZ     r7,|L23.352|
000158  f64f70ff          MOV      r0,#0xffff            ;322
00015c  4285              CMP      r5,r0                 ;322
00015e  d3c1              BCC      |L23.228|
                  |L23.352|
000160  f64f70ff          MOV      r0,#0xffff            ;356
000164  4285              CMP      r5,r0                 ;356
000166  d302              BCC      |L23.366|
000168  241b              MOVS     r4,#0x1b              ;358
00016a  4620              MOV      r0,r4                 ;359
00016c  e774              B        |L23.88|
                  |L23.366|
00016e  f0064080          AND      r0,r6,#0x40000000     ;362
000172  1e06              SUBS     r6,r0,#0              ;362
000174  d002              BEQ      |L23.380|
000176  2002              MOVS     r0,#2                 ;364
000178  4903              LDR      r1,|L23.392|
00017a  6008              STR      r0,[r1,#0]            ;364  ; CardType
                  |L23.380|
00017c  4620              MOV      r0,r4                 ;370
00017e  e76b              B        |L23.88|
;;;372    
                          ENDP

                  |L23.384|
                          DCD      SDIO_InitStructure
                  |L23.388|
                          DCD      SDIO_CmdInitStructure
                  |L23.392|
                          DCD      CardType
                  |L23.396|
                          DCD      0x80100000

                          AREA ||i.SD_ProcessIRQSrc||, CODE, READONLY, ALIGN=2

                  SD_ProcessIRQSrc PROC
;;;1420     */
;;;1421   SD_Error SD_ProcessIRQSrc(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1422   {
;;;1423     uint32_t count = 0, restwords = 0;
000002  2400              MOVS     r4,#0
000004  2500              MOVS     r5,#0
;;;1424   
;;;1425     if (DeviceMode == SD_INTERRUPT_MODE)
000006  4888              LDR      r0,|L24.552|
000008  6800              LDR      r0,[r0,#0]  ; DeviceMode
00000a  2801              CMP      r0,#1
00000c  d167              BNE      |L24.222|
;;;1426     {
;;;1427       if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
00000e  03c0              LSLS     r0,r0,#15
000010  f7fffffe          BL       SDIO_GetITStatus
000014  b1a8              CBZ      r0,|L24.66|
;;;1428       {
;;;1429         for (count = 0; count < SD_HALFFIFO; count++)
000016  bf00              NOP      
000018  e006              B        |L24.40|
                  |L24.26|
;;;1430         {
;;;1431           *(DestBuffer + count) = SDIO_ReadData();
00001a  f7fffffe          BL       SDIO_ReadData
00001e  4983              LDR      r1,|L24.556|
000020  6809              LDR      r1,[r1,#0]  ; DestBuffer
000022  f8410024          STR      r0,[r1,r4,LSL #2]
000026  1c64              ADDS     r4,r4,#1              ;1429
                  |L24.40|
000028  2c08              CMP      r4,#8                 ;1429
00002a  d3f6              BCC      |L24.26|
;;;1432         }
;;;1433         DestBuffer += SD_HALFFIFO;
00002c  487f              LDR      r0,|L24.556|
00002e  6800              LDR      r0,[r0,#0]  ; DestBuffer
000030  3020              ADDS     r0,r0,#0x20
000032  497e              LDR      r1,|L24.556|
000034  6008              STR      r0,[r1,#0]  ; DestBuffer
;;;1434         NumberOfBytes += SD_HALFFIFOBYTES;
000036  487e              LDR      r0,|L24.560|
000038  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
00003a  3020              ADDS     r0,r0,#0x20
00003c  497c              LDR      r1,|L24.560|
00003e  6008              STR      r0,[r1,#0]  ; NumberOfBytes
000040  e04d              B        |L24.222|
                  |L24.66|
;;;1435       }
;;;1436       else if (SDIO_GetITStatus(SDIO_IT_TXFIFOHE) != RESET)
000042  f44f4080          MOV      r0,#0x4000
000046  f7fffffe          BL       SDIO_GetITStatus
00004a  2800              CMP      r0,#0
00004c  d047              BEQ      |L24.222|
;;;1437       {
;;;1438         if ((TotalNumberOfBytes - NumberOfBytes) < SD_HALFFIFOBYTES)
00004e  4879              LDR      r0,|L24.564|
000050  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
000052  4977              LDR      r1,|L24.560|
000054  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
000056  1a40              SUBS     r0,r0,r1
000058  2820              CMP      r0,#0x20
00005a  d22b              BCS      |L24.180|
;;;1439         {
;;;1440           restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
00005c  4875              LDR      r0,|L24.564|
00005e  7800              LDRB     r0,[r0,#0]  ; TotalNumberOfBytes
000060  4973              LDR      r1,|L24.560|
000062  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
000064  1a40              SUBS     r0,r0,r1
000066  f0000003          AND      r0,r0,#3
00006a  b930              CBNZ     r0,|L24.122|
;;;1441                       ((TotalNumberOfBytes - NumberOfBytes) / 4) :
00006c  4871              LDR      r0,|L24.564|
00006e  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
000070  496f              LDR      r1,|L24.560|
000072  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
000074  1a40              SUBS     r0,r0,r1
000076  0880              LSRS     r0,r0,#2
000078  e006              B        |L24.136|
                  |L24.122|
;;;1442                       ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);
00007a  486e              LDR      r0,|L24.564|
00007c  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
00007e  496c              LDR      r1,|L24.560|
000080  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
000082  1a40              SUBS     r0,r0,r1
000084  0880              LSRS     r0,r0,#2
000086  1c40              ADDS     r0,r0,#1
                  |L24.136|
000088  4605              MOV      r5,r0
;;;1443   
;;;1444           for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
00008a  2400              MOVS     r4,#0
00008c  e00f              B        |L24.174|
                  |L24.142|
;;;1445           {
;;;1446             SDIO_WriteData(*SrcBuffer);
00008e  496a              LDR      r1,|L24.568|
000090  6809              LDR      r1,[r1,#0]  ; SrcBuffer
000092  6808              LDR      r0,[r1,#0]
000094  f7fffffe          BL       SDIO_WriteData
000098  1c64              ADDS     r4,r4,#1              ;1444
00009a  4867              LDR      r0,|L24.568|
00009c  6800              LDR      r0,[r0,#0]            ;1444  ; SrcBuffer
00009e  1d00              ADDS     r0,r0,#4              ;1444
0000a0  4965              LDR      r1,|L24.568|
0000a2  6008              STR      r0,[r1,#0]            ;1444  ; SrcBuffer
0000a4  4862              LDR      r0,|L24.560|
0000a6  6800              LDR      r0,[r0,#0]            ;1444  ; NumberOfBytes
0000a8  1d00              ADDS     r0,r0,#4              ;1444
0000aa  4961              LDR      r1,|L24.560|
0000ac  6008              STR      r0,[r1,#0]            ;1444  ; NumberOfBytes
                  |L24.174|
0000ae  42ac              CMP      r4,r5                 ;1444
0000b0  d3ed              BCC      |L24.142|
0000b2  e014              B        |L24.222|
                  |L24.180|
;;;1447           }
;;;1448         }
;;;1449         else
;;;1450         {
;;;1451           for (count = 0; count < SD_HALFFIFO; count++)
0000b4  2400              MOVS     r4,#0
0000b6  e006              B        |L24.198|
                  |L24.184|
;;;1452           {
;;;1453             SDIO_WriteData(*(SrcBuffer + count));
0000b8  495f              LDR      r1,|L24.568|
0000ba  6809              LDR      r1,[r1,#0]  ; SrcBuffer
0000bc  f8510024          LDR      r0,[r1,r4,LSL #2]
0000c0  f7fffffe          BL       SDIO_WriteData
0000c4  1c64              ADDS     r4,r4,#1              ;1451
                  |L24.198|
0000c6  2c08              CMP      r4,#8                 ;1451
0000c8  d3f6              BCC      |L24.184|
;;;1454           }
;;;1455   
;;;1456           SrcBuffer += SD_HALFFIFO;
0000ca  485b              LDR      r0,|L24.568|
0000cc  6800              LDR      r0,[r0,#0]  ; SrcBuffer
0000ce  3020              ADDS     r0,r0,#0x20
0000d0  4959              LDR      r1,|L24.568|
0000d2  6008              STR      r0,[r1,#0]  ; SrcBuffer
;;;1457           NumberOfBytes += SD_HALFFIFOBYTES;
0000d4  4856              LDR      r0,|L24.560|
0000d6  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
0000d8  3020              ADDS     r0,r0,#0x20
0000da  4955              LDR      r1,|L24.560|
0000dc  6008              STR      r0,[r1,#0]  ; NumberOfBytes
                  |L24.222|
;;;1458         }
;;;1459       }
;;;1460     }
;;;1461   
;;;1462     if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
0000de  f44f7080          MOV      r0,#0x100
0000e2  f7fffffe          BL       SDIO_GetITStatus
0000e6  b3d8              CBZ      r0,|L24.352|
;;;1463     {
;;;1464       if (DeviceMode != SD_DMA_MODE)
0000e8  484f              LDR      r0,|L24.552|
0000ea  6800              LDR      r0,[r0,#0]  ; DeviceMode
0000ec  b1d0              CBZ      r0,|L24.292|
;;;1465       {
;;;1466         while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfBytes))
0000ee  e00e              B        |L24.270|
                  |L24.240|
;;;1467         {
;;;1468           *DestBuffer = SDIO_ReadData();
0000f0  f7fffffe          BL       SDIO_ReadData
0000f4  494d              LDR      r1,|L24.556|
0000f6  6809              LDR      r1,[r1,#0]  ; DestBuffer
0000f8  6008              STR      r0,[r1,#0]
;;;1469           DestBuffer++;
0000fa  484c              LDR      r0,|L24.556|
0000fc  6800              LDR      r0,[r0,#0]  ; DestBuffer
0000fe  1d00              ADDS     r0,r0,#4
000100  494a              LDR      r1,|L24.556|
000102  6008              STR      r0,[r1,#0]  ; DestBuffer
;;;1470           NumberOfBytes += 4;
000104  484a              LDR      r0,|L24.560|
000106  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
000108  1d00              ADDS     r0,r0,#4
00010a  4949              LDR      r1,|L24.560|
00010c  6008              STR      r0,[r1,#0]  ; NumberOfBytes
                  |L24.270|
00010e  f44f1000          MOV      r0,#0x200000          ;1466
000112  f7fffffe          BL       SDIO_GetFlagStatus
000116  b128              CBZ      r0,|L24.292|
000118  4845              LDR      r0,|L24.560|
00011a  6800              LDR      r0,[r0,#0]            ;1466  ; NumberOfBytes
00011c  4945              LDR      r1,|L24.564|
00011e  6809              LDR      r1,[r1,#0]            ;1466  ; TotalNumberOfBytes
000120  4288              CMP      r0,r1                 ;1466
000122  d3e5              BCC      |L24.240|
                  |L24.292|
;;;1471         }
;;;1472       }
;;;1473   
;;;1474       if (StopCondition == 1)
000124  4845              LDR      r0,|L24.572|
000126  6800              LDR      r0,[r0,#0]  ; StopCondition
000128  2801              CMP      r0,#1
00012a  d104              BNE      |L24.310|
;;;1475       {
;;;1476         TransferError = SD_StopTransfer();
00012c  f7fffffe          BL       SD_StopTransfer
000130  4943              LDR      r1,|L24.576|
000132  7008              STRB     r0,[r1,#0]
000134  e002              B        |L24.316|
                  |L24.310|
;;;1477       }
;;;1478       else
;;;1479       {
;;;1480         TransferError = SD_OK;
000136  202a              MOVS     r0,#0x2a
000138  4941              LDR      r1,|L24.576|
00013a  7008              STRB     r0,[r1,#0]
                  |L24.316|
;;;1481       }
;;;1482       SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
00013c  f44f7080          MOV      r0,#0x100
000140  f7fffffe          BL       SDIO_ClearITPendingBit
;;;1483       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
000144  2100              MOVS     r1,#0
000146  f24c303a          MOV      r0,#0xc33a
00014a  f7fffffe          BL       SDIO_ITConfig
;;;1484                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;1485                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;1486       TransferEnd = 1;
00014e  2001              MOVS     r0,#1
000150  493c              LDR      r1,|L24.580|
000152  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;1487       NumberOfBytes = 0;
000154  2000              MOVS     r0,#0
000156  4936              LDR      r1,|L24.560|
000158  6008              STR      r0,[r1,#0]  ; NumberOfBytes
;;;1488       return(TransferError);
00015a  4839              LDR      r0,|L24.576|
00015c  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L24.350|
;;;1489     }
;;;1490   
;;;1491     if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
;;;1492     {
;;;1493       SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
;;;1494       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;1495                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;1496                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;1497       NumberOfBytes = 0;
;;;1498       TransferError = SD_DATA_CRC_FAIL;
;;;1499       return(SD_DATA_CRC_FAIL);
;;;1500     }
;;;1501   
;;;1502     if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
;;;1503     {
;;;1504       SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
;;;1505       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;1506                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;1507                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;1508       NumberOfBytes = 0;
;;;1509       TransferError = SD_DATA_TIMEOUT;
;;;1510       return(SD_DATA_TIMEOUT);
;;;1511     }
;;;1512   
;;;1513     if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
;;;1514     {
;;;1515       SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
;;;1516       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;1517                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;1518                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;1519       NumberOfBytes = 0;
;;;1520       TransferError = SD_RX_OVERRUN;
;;;1521       return(SD_RX_OVERRUN);
;;;1522     }
;;;1523   
;;;1524     if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
;;;1525     {
;;;1526       SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
;;;1527       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;1528                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;1529                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;1530       NumberOfBytes = 0;
;;;1531       TransferError = SD_TX_UNDERRUN;
;;;1532       return(SD_TX_UNDERRUN);
;;;1533     }
;;;1534   
;;;1535     if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
;;;1536     {
;;;1537       SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
;;;1538       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;1539                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;1540                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;1541       NumberOfBytes = 0;
;;;1542       TransferError = SD_START_BIT_ERR;
;;;1543       return(SD_START_BIT_ERR);
;;;1544     }
;;;1545   
;;;1546     return(SD_OK);
;;;1547   }
00015e  bd70              POP      {r4-r6,pc}
                  |L24.352|
000160  e7ff              B        |L24.354|
                  |L24.354|
000162  2002              MOVS     r0,#2                 ;1491
000164  f7fffffe          BL       SDIO_GetITStatus
000168  b170              CBZ      r0,|L24.392|
00016a  2002              MOVS     r0,#2                 ;1493
00016c  f7fffffe          BL       SDIO_ClearITPendingBit
000170  2100              MOVS     r1,#0                 ;1494
000172  f24c303a          MOV      r0,#0xc33a            ;1494
000176  f7fffffe          BL       SDIO_ITConfig
00017a  2000              MOVS     r0,#0                 ;1497
00017c  492c              LDR      r1,|L24.560|
00017e  6008              STR      r0,[r1,#0]            ;1497  ; NumberOfBytes
000180  2002              MOVS     r0,#2                 ;1498
000182  492f              LDR      r1,|L24.576|
000184  7008              STRB     r0,[r1,#0]            ;1498
000186  e7ea              B        |L24.350|
                  |L24.392|
000188  2008              MOVS     r0,#8                 ;1502
00018a  f7fffffe          BL       SDIO_GetITStatus
00018e  b170              CBZ      r0,|L24.430|
000190  2008              MOVS     r0,#8                 ;1504
000192  f7fffffe          BL       SDIO_ClearITPendingBit
000196  2100              MOVS     r1,#0                 ;1505
000198  f24c303a          MOV      r0,#0xc33a            ;1505
00019c  f7fffffe          BL       SDIO_ITConfig
0001a0  2000              MOVS     r0,#0                 ;1508
0001a2  4923              LDR      r1,|L24.560|
0001a4  6008              STR      r0,[r1,#0]            ;1508  ; NumberOfBytes
0001a6  2004              MOVS     r0,#4                 ;1509
0001a8  4925              LDR      r1,|L24.576|
0001aa  7008              STRB     r0,[r1,#0]            ;1509
0001ac  e7d7              B        |L24.350|
                  |L24.430|
0001ae  2020              MOVS     r0,#0x20              ;1513
0001b0  f7fffffe          BL       SDIO_GetITStatus
0001b4  b170              CBZ      r0,|L24.468|
0001b6  2020              MOVS     r0,#0x20              ;1515
0001b8  f7fffffe          BL       SDIO_ClearITPendingBit
0001bc  2100              MOVS     r1,#0                 ;1516
0001be  f24c303a          MOV      r0,#0xc33a            ;1516
0001c2  f7fffffe          BL       SDIO_ITConfig
0001c6  2000              MOVS     r0,#0                 ;1519
0001c8  4919              LDR      r1,|L24.560|
0001ca  6008              STR      r0,[r1,#0]            ;1519  ; NumberOfBytes
0001cc  2006              MOVS     r0,#6                 ;1520
0001ce  491c              LDR      r1,|L24.576|
0001d0  7008              STRB     r0,[r1,#0]            ;1520
0001d2  e7c4              B        |L24.350|
                  |L24.468|
0001d4  2010              MOVS     r0,#0x10              ;1524
0001d6  f7fffffe          BL       SDIO_GetITStatus
0001da  b170              CBZ      r0,|L24.506|
0001dc  2010              MOVS     r0,#0x10              ;1526
0001de  f7fffffe          BL       SDIO_ClearITPendingBit
0001e2  2100              MOVS     r1,#0                 ;1527
0001e4  f24c303a          MOV      r0,#0xc33a            ;1527
0001e8  f7fffffe          BL       SDIO_ITConfig
0001ec  2000              MOVS     r0,#0                 ;1530
0001ee  4910              LDR      r1,|L24.560|
0001f0  6008              STR      r0,[r1,#0]            ;1530  ; NumberOfBytes
0001f2  2005              MOVS     r0,#5                 ;1531
0001f4  4912              LDR      r1,|L24.576|
0001f6  7008              STRB     r0,[r1,#0]            ;1531
0001f8  e7b1              B        |L24.350|
                  |L24.506|
0001fa  f44f7000          MOV      r0,#0x200             ;1535
0001fe  f7fffffe          BL       SDIO_GetITStatus
000202  b178              CBZ      r0,|L24.548|
000204  f44f7000          MOV      r0,#0x200             ;1537
000208  f7fffffe          BL       SDIO_ClearITPendingBit
00020c  2100              MOVS     r1,#0                 ;1538
00020e  f24c303a          MOV      r0,#0xc33a            ;1538
000212  f7fffffe          BL       SDIO_ITConfig
000216  2000              MOVS     r0,#0                 ;1541
000218  4905              LDR      r1,|L24.560|
00021a  6008              STR      r0,[r1,#0]            ;1541  ; NumberOfBytes
00021c  2007              MOVS     r0,#7                 ;1542
00021e  4908              LDR      r1,|L24.576|
000220  7008              STRB     r0,[r1,#0]            ;1542
000222  e79c              B        |L24.350|
                  |L24.548|
000224  202a              MOVS     r0,#0x2a              ;1546
000226  e79a              B        |L24.350|
;;;1548   
                          ENDP

                  |L24.552|
                          DCD      DeviceMode
                  |L24.556|
                          DCD      DestBuffer
                  |L24.560|
                          DCD      NumberOfBytes
                  |L24.564|
                          DCD      TotalNumberOfBytes
                  |L24.568|
                          DCD      SrcBuffer
                  |L24.572|
                          DCD      StopCondition
                  |L24.576|
                          DCD      TransferError
                  |L24.580|
                          DCD      TransferEnd

                          AREA ||i.SD_ReadBlock||, CODE, READONLY, ALIGN=2

                  SD_ReadBlock PROC
;;;777      */
;;;778    SD_Error SD_ReadBlock(uint32_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;779    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;780      SD_Error errorstatus = SD_OK;
00000a  f04f082a          MOV      r8,#0x2a
;;;781      uint32_t count = 0, *tempbuff = (uint32_t *)readbuff;
00000e  f04f0900          MOV      r9,#0
000012  4635              MOV      r5,r6
;;;782      uint8_t power = 0;
000014  f04f0a00          MOV      r10,#0
;;;783    
;;;784      if (NULL == readbuff)
000018  b926              CBNZ     r6,|L25.36|
;;;785      {
;;;786        errorstatus = SD_INVALID_PARAMETER;
00001a  f04f0826          MOV      r8,#0x26
;;;787        return(errorstatus);
00001e  4640              MOV      r0,r8
                  |L25.32|
;;;788      }
;;;789    
;;;790      TransferError = SD_OK;
;;;791      TransferEnd = 0;
;;;792      TotalNumberOfBytes = 0;
;;;793    
;;;794      /*!< Clear all DPSM configuration */
;;;795      SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;796      SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;797      SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;798      SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;799      SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;800      SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;801      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;802      SDIO_DMACmd(DISABLE);
;;;803    
;;;804      if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;805      {
;;;806        errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;807        return(errorstatus);
;;;808      }
;;;809      
;;;810      if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;811      {
;;;812        BlockSize = 512;
;;;813        ReadAddr /= 512;
;;;814      }
;;;815      if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;816      {
;;;817        power = convert_from_bytes_to_power_of_two(BlockSize);
;;;818    
;;;819        /*!< Set Block Size for Card */
;;;820        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;821        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;822        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;823        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;824        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;825        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;826    
;;;827        errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;828    
;;;829        if (SD_OK != errorstatus)
;;;830        {
;;;831          return(errorstatus);
;;;832        }
;;;833      }
;;;834      else
;;;835      {
;;;836        errorstatus = SD_INVALID_PARAMETER;
;;;837        return(errorstatus);
;;;838      }
;;;839    
;;;840      SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;841      SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;842      SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;843      SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;844      SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;845      SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;846      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;847    
;;;848      TotalNumberOfBytes = BlockSize;
;;;849      StopCondition = 0;
;;;850      DestBuffer = (uint32_t *)readbuff;
;;;851    
;;;852      /*!< Send CMD17 READ_SINGLE_BLOCK */
;;;853      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
;;;854      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
;;;855      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;856      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;857      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;858      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;859    
;;;860      errorstatus = CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);
;;;861    
;;;862      if (errorstatus != SD_OK)
;;;863      {
;;;864        return(errorstatus);
;;;865      }
;;;866      /*!< In case of single block transfer, no need of stop transfer at all.*/
;;;867        /*!< Polling mode */
;;;868        while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;869        {
;;;870          if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;871          {
;;;872            for (count = 0; count < 8; count++)
;;;873            {
;;;874              *(tempbuff + count) = SDIO_ReadData();
;;;875            }
;;;876            tempbuff += 8;
;;;877          }
;;;878        }
;;;879    
;;;880        if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;881        {
;;;882          SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;883          errorstatus = SD_DATA_TIMEOUT;
;;;884          return(errorstatus);
;;;885        }
;;;886        else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;887        {
;;;888          SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;889          errorstatus = SD_DATA_CRC_FAIL;
;;;890          return(errorstatus);
;;;891        }
;;;892        else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;893        {
;;;894          SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;895          errorstatus = SD_RX_OVERRUN;
;;;896          return(errorstatus);
;;;897        }
;;;898        else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;899        {
;;;900          SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;901          errorstatus = SD_START_BIT_ERR;
;;;902          return(errorstatus);
;;;903        }
;;;904        while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;905        {
;;;906          *tempbuff = SDIO_ReadData();
;;;907          tempbuff++;
;;;908        }
;;;909    
;;;910        /*!< Clear all the static flags */
;;;911        SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;912    
;;;913      return(errorstatus);
;;;914    }
000020  e8bd87f0          POP      {r4-r10,pc}
                  |L25.36|
000024  202a              MOVS     r0,#0x2a              ;790
000026  496b              LDR      r1,|L25.468|
000028  7008              STRB     r0,[r1,#0]            ;790
00002a  2000              MOVS     r0,#0                 ;791
00002c  496a              LDR      r1,|L25.472|
00002e  6008              STR      r0,[r1,#0]            ;791  ; TransferEnd
000030  496a              LDR      r1,|L25.476|
000032  6008              STR      r0,[r1,#0]            ;792  ; TotalNumberOfBytes
000034  486a              LDR      r0,|L25.480|
000036  496b              LDR      r1,|L25.484|
000038  6008              STR      r0,[r1,#0]            ;795  ; SDIO_DataInitStructure
00003a  2000              MOVS     r0,#0                 ;796
00003c  6048              STR      r0,[r1,#4]            ;796  ; SDIO_DataInitStructure
00003e  6088              STR      r0,[r1,#8]            ;797  ; SDIO_DataInitStructure
000040  60c8              STR      r0,[r1,#0xc]          ;798  ; SDIO_DataInitStructure
000042  6108              STR      r0,[r1,#0x10]         ;799  ; SDIO_DataInitStructure
000044  6148              STR      r0,[r1,#0x14]         ;800  ; SDIO_DataInitStructure
000046  4608              MOV      r0,r1                 ;801
000048  f7fffffe          BL       SDIO_DataConfig
00004c  2000              MOVS     r0,#0                 ;802
00004e  f7fffffe          BL       SDIO_DMACmd
000052  2000              MOVS     r0,#0                 ;804
000054  f7fffffe          BL       SDIO_GetResponse
000058  f0007000          AND      r0,r0,#0x2000000      ;804
00005c  b118              CBZ      r0,|L25.102|
00005e  f04f080e          MOV      r8,#0xe               ;806
000062  4640              MOV      r0,r8                 ;807
000064  e7dc              B        |L25.32|
                  |L25.102|
000066  4860              LDR      r0,|L25.488|
000068  6800              LDR      r0,[r0,#0]            ;810  ; CardType
00006a  2802              CMP      r0,#2                 ;810
00006c  d101              BNE      |L25.114|
00006e  0204              LSLS     r4,r0,#8              ;812
000070  0a7f              LSRS     r7,r7,#9              ;813
                  |L25.114|
000072  2c00              CMP      r4,#0                 ;815
000074  dd21              BLE      |L25.186|
000076  f5b46f00          CMP      r4,#0x800             ;815
00007a  dc1e              BGT      |L25.186|
00007c  1e60              SUBS     r0,r4,#1              ;815
00007e  4020              ANDS     r0,r0,r4              ;815
000080  b9d8              CBNZ     r0,|L25.186|
000082  4620              MOV      r0,r4                 ;817
000084  f7fffffe          BL       convert_from_bytes_to_power_of_two
000088  4682              MOV      r10,r0                ;817
00008a  4858              LDR      r0,|L25.492|
00008c  6004              STR      r4,[r0,#0]            ;820  ; SDIO_CmdInitStructure
00008e  2010              MOVS     r0,#0x10              ;821
000090  4956              LDR      r1,|L25.492|
000092  6048              STR      r0,[r1,#4]            ;821  ; SDIO_CmdInitStructure
000094  2040              MOVS     r0,#0x40              ;822
000096  6088              STR      r0,[r1,#8]            ;822  ; SDIO_CmdInitStructure
000098  2000              MOVS     r0,#0                 ;823
00009a  60c8              STR      r0,[r1,#0xc]          ;823  ; SDIO_CmdInitStructure
00009c  f44f6080          MOV      r0,#0x400             ;824
0000a0  6108              STR      r0,[r1,#0x10]         ;824  ; SDIO_CmdInitStructure
0000a2  4608              MOV      r0,r1                 ;825
0000a4  f7fffffe          BL       SDIO_SendCommand
0000a8  2010              MOVS     r0,#0x10              ;827
0000aa  f7fffffe          BL       CmdResp1Error
0000ae  4680              MOV      r8,r0                 ;827
0000b0  f1b80f2a          CMP      r8,#0x2a              ;829
0000b4  d005              BEQ      |L25.194|
0000b6  4640              MOV      r0,r8                 ;831
0000b8  e7b2              B        |L25.32|
                  |L25.186|
0000ba  f04f0826          MOV      r8,#0x26              ;836
0000be  4640              MOV      r0,r8                 ;837
0000c0  e7ae              B        |L25.32|
                  |L25.194|
0000c2  4847              LDR      r0,|L25.480|
0000c4  4947              LDR      r1,|L25.484|
0000c6  6008              STR      r0,[r1,#0]            ;840  ; SDIO_DataInitStructure
0000c8  4608              MOV      r0,r1                 ;841
0000ca  6044              STR      r4,[r0,#4]            ;841  ; SDIO_DataInitStructure
0000cc  ea4f100a          LSL      r0,r10,#4             ;842
0000d0  6088              STR      r0,[r1,#8]            ;842  ; SDIO_DataInitStructure
0000d2  2002              MOVS     r0,#2                 ;843
0000d4  60c8              STR      r0,[r1,#0xc]          ;843  ; SDIO_DataInitStructure
0000d6  2000              MOVS     r0,#0                 ;844
0000d8  6108              STR      r0,[r1,#0x10]         ;844  ; SDIO_DataInitStructure
0000da  2001              MOVS     r0,#1                 ;845
0000dc  6148              STR      r0,[r1,#0x14]         ;845  ; SDIO_DataInitStructure
0000de  4608              MOV      r0,r1                 ;846
0000e0  f7fffffe          BL       SDIO_DataConfig
0000e4  483d              LDR      r0,|L25.476|
0000e6  6004              STR      r4,[r0,#0]            ;848  ; TotalNumberOfBytes
0000e8  2000              MOVS     r0,#0                 ;849
0000ea  4941              LDR      r1,|L25.496|
0000ec  6008              STR      r0,[r1,#0]            ;849  ; StopCondition
0000ee  4841              LDR      r0,|L25.500|
0000f0  6006              STR      r6,[r0,#0]            ;850  ; DestBuffer
0000f2  483e              LDR      r0,|L25.492|
0000f4  6007              STR      r7,[r0,#0]            ;853  ; SDIO_CmdInitStructure
0000f6  2011              MOVS     r0,#0x11              ;854
0000f8  493c              LDR      r1,|L25.492|
0000fa  6048              STR      r0,[r1,#4]            ;854  ; SDIO_CmdInitStructure
0000fc  2040              MOVS     r0,#0x40              ;855
0000fe  6088              STR      r0,[r1,#8]            ;855  ; SDIO_CmdInitStructure
000100  2000              MOVS     r0,#0                 ;856
000102  60c8              STR      r0,[r1,#0xc]          ;856  ; SDIO_CmdInitStructure
000104  f44f6080          MOV      r0,#0x400             ;857
000108  6108              STR      r0,[r1,#0x10]         ;857  ; SDIO_CmdInitStructure
00010a  4608              MOV      r0,r1                 ;858
00010c  f7fffffe          BL       SDIO_SendCommand
000110  2011              MOVS     r0,#0x11              ;860
000112  f7fffffe          BL       CmdResp1Error
000116  4680              MOV      r8,r0                 ;860
000118  f1b80f2a          CMP      r8,#0x2a              ;862
00011c  d001              BEQ      |L25.290|
00011e  4640              MOV      r0,r8                 ;864
000120  e77e              B        |L25.32|
                  |L25.290|
000122  e011              B        |L25.328|
                  |L25.292|
000124  f44f4000          MOV      r0,#0x8000            ;870
000128  f7fffffe          BL       SDIO_GetFlagStatus
00012c  b160              CBZ      r0,|L25.328|
00012e  f04f0900          MOV      r9,#0                 ;872
000132  e005              B        |L25.320|
                  |L25.308|
000134  f7fffffe          BL       SDIO_ReadData
000138  f8450029          STR      r0,[r5,r9,LSL #2]     ;874
00013c  f1090901          ADD      r9,r9,#1              ;872
                  |L25.320|
000140  f1b90f08          CMP      r9,#8                 ;872
000144  d3f6              BCC      |L25.308|
000146  3520              ADDS     r5,r5,#0x20           ;876
                  |L25.328|
000148  482b              LDR      r0,|L25.504|
00014a  6b40              LDR      r0,[r0,#0x34]         ;868
00014c  f240612a          MOV      r1,#0x62a             ;868
000150  4008              ANDS     r0,r0,r1              ;868
000152  2800              CMP      r0,#0                 ;868
000154  d0e6              BEQ      |L25.292|
000156  2008              MOVS     r0,#8                 ;880
000158  f7fffffe          BL       SDIO_GetFlagStatus
00015c  b130              CBZ      r0,|L25.364|
00015e  2008              MOVS     r0,#8                 ;882
000160  f7fffffe          BL       SDIO_ClearFlag
000164  f04f0804          MOV      r8,#4                 ;883
000168  4640              MOV      r0,r8                 ;884
00016a  e759              B        |L25.32|
                  |L25.364|
00016c  2002              MOVS     r0,#2                 ;886
00016e  f7fffffe          BL       SDIO_GetFlagStatus
000172  b130              CBZ      r0,|L25.386|
000174  2002              MOVS     r0,#2                 ;888
000176  f7fffffe          BL       SDIO_ClearFlag
00017a  f04f0802          MOV      r8,#2                 ;889
00017e  4640              MOV      r0,r8                 ;890
000180  e74e              B        |L25.32|
                  |L25.386|
000182  2020              MOVS     r0,#0x20              ;892
000184  f7fffffe          BL       SDIO_GetFlagStatus
000188  b130              CBZ      r0,|L25.408|
00018a  2020              MOVS     r0,#0x20              ;894
00018c  f7fffffe          BL       SDIO_ClearFlag
000190  f04f0806          MOV      r8,#6                 ;895
000194  4640              MOV      r0,r8                 ;896
000196  e743              B        |L25.32|
                  |L25.408|
000198  f44f7000          MOV      r0,#0x200             ;898
00019c  f7fffffe          BL       SDIO_GetFlagStatus
0001a0  b138              CBZ      r0,|L25.434|
0001a2  f44f7000          MOV      r0,#0x200             ;900
0001a6  f7fffffe          BL       SDIO_ClearFlag
0001aa  f04f0807          MOV      r8,#7                 ;901
0001ae  4640              MOV      r0,r8                 ;902
0001b0  e736              B        |L25.32|
                  |L25.434|
0001b2  e003              B        |L25.444|
                  |L25.436|
0001b4  f7fffffe          BL       SDIO_ReadData
0001b8  6028              STR      r0,[r5,#0]            ;906
0001ba  1d2d              ADDS     r5,r5,#4              ;907
                  |L25.444|
0001bc  f44f1000          MOV      r0,#0x200000          ;904
0001c0  f7fffffe          BL       SDIO_GetFlagStatus
0001c4  2800              CMP      r0,#0                 ;904
0001c6  d1f5              BNE      |L25.436|
0001c8  f24050ff          MOV      r0,#0x5ff             ;911
0001cc  f7fffffe          BL       SDIO_ClearFlag
0001d0  4640              MOV      r0,r8                 ;913
0001d2  e725              B        |L25.32|
;;;915    
                          ENDP

                  |L25.468|
                          DCD      TransferError
                  |L25.472|
                          DCD      TransferEnd
                  |L25.476|
                          DCD      TotalNumberOfBytes
                  |L25.480|
                          DCD      0x000fffff
                  |L25.484|
                          DCD      SDIO_DataInitStructure
                  |L25.488|
                          DCD      CardType
                  |L25.492|
                          DCD      SDIO_CmdInitStructure
                  |L25.496|
                          DCD      StopCondition
                  |L25.500|
                          DCD      DestBuffer
                  |L25.504|
                          DCD      0x40018000

                          AREA ||i.SD_SelectDeselect||, CODE, READONLY, ALIGN=2

                  SD_SelectDeselect PROC
;;;753      */
;;;754    SD_Error SD_SelectDeselect(uint32_t addr)
000000  b570              PUSH     {r4-r6,lr}
;;;755    {
000002  4604              MOV      r4,r0
;;;756      SD_Error errorstatus = SD_OK;
000004  252a              MOVS     r5,#0x2a
;;;757    
;;;758      /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
;;;759      SDIO_CmdInitStructure.SDIO_Argument =  addr;
000006  480a              LDR      r0,|L26.48|
000008  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;760      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
00000a  2007              MOVS     r0,#7
00000c  4908              LDR      r1,|L26.48|
00000e  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;761      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000010  2040              MOVS     r0,#0x40
000012  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;762      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000014  2000              MOVS     r0,#0
000016  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;763      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000018  f44f6080          MOV      r0,#0x400
00001c  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;764      SDIO_SendCommand(&SDIO_CmdInitStructure);
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       SDIO_SendCommand
;;;765    
;;;766      errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CmdResp1Error
00002a  4605              MOV      r5,r0
;;;767    
;;;768      return(errorstatus);
00002c  4628              MOV      r0,r5
;;;769    }
00002e  bd70              POP      {r4-r6,pc}
;;;770    
                          ENDP

                  |L26.48|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_SendSDStatus||, CODE, READONLY, ALIGN=2

                  SD_SendSDStatus PROC
;;;1299     */
;;;1300   SD_Error SD_SendSDStatus(uint32_t *psdstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1301   {
000002  4604              MOV      r4,r0
;;;1302     SD_Error errorstatus = SD_OK;
000004  262a              MOVS     r6,#0x2a
;;;1303     uint32_t count = 0;
000006  2500              MOVS     r5,#0
;;;1304   
;;;1305     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_GetResponse
00000e  f0007000          AND      r0,r0,#0x2000000
000012  b110              CBZ      r0,|L27.26|
;;;1306     {
;;;1307       errorstatus = SD_LOCK_UNLOCK_FAILED;
000014  260e              MOVS     r6,#0xe
;;;1308       return(errorstatus);
000016  4630              MOV      r0,r6
                  |L27.24|
;;;1309     }
;;;1310   
;;;1311     /*!< Set block size for card if it is not equal to current block size for card. */
;;;1312     SDIO_CmdInitStructure.SDIO_Argument = 64;
;;;1313     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1314     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1315     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1316     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1317     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1318   
;;;1319     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1320   
;;;1321     if (errorstatus != SD_OK)
;;;1322     {
;;;1323       return(errorstatus);
;;;1324     }
;;;1325   
;;;1326     /*!< CMD55 */
;;;1327     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;1328     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1329     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1330     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1331     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1332     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1333     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;1334   
;;;1335     if (errorstatus != SD_OK)
;;;1336     {
;;;1337       return(errorstatus);
;;;1338     }
;;;1339   
;;;1340     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1341     SDIO_DataInitStructure.SDIO_DataLength = 64;
;;;1342     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
;;;1343     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1344     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1345     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1346     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1347   
;;;1348     /*!< Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
;;;1349     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;1350     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_STAUS;
;;;1351     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1352     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1353     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1354     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1355     errorstatus = CmdResp1Error(SD_CMD_SD_APP_STAUS);
;;;1356   
;;;1357     if (errorstatus != SD_OK)
;;;1358     {
;;;1359       return(errorstatus);
;;;1360     }
;;;1361   
;;;1362     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;1363     {
;;;1364       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1365       {
;;;1366         for (count = 0; count < 8; count++)
;;;1367         {
;;;1368           *(psdstatus + count) = SDIO_ReadData();
;;;1369         }
;;;1370         psdstatus += 8;
;;;1371       }
;;;1372     }
;;;1373   
;;;1374     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1375     {
;;;1376       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1377       errorstatus = SD_DATA_TIMEOUT;
;;;1378       return(errorstatus);
;;;1379     }
;;;1380     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1381     {
;;;1382       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1383       errorstatus = SD_DATA_CRC_FAIL;
;;;1384       return(errorstatus);
;;;1385     }
;;;1386     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1387     {
;;;1388       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1389       errorstatus = SD_RX_OVERRUN;
;;;1390       return(errorstatus);
;;;1391     }
;;;1392     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1393     {
;;;1394       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1395       errorstatus = SD_START_BIT_ERR;
;;;1396       return(errorstatus);
;;;1397     }
;;;1398   
;;;1399     while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;1400     {
;;;1401       *psdstatus = SDIO_ReadData();
;;;1402       psdstatus++;
;;;1403     }
;;;1404   
;;;1405     /*!< Clear all the static status flags*/
;;;1406     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1407     psdstatus -= 16;
;;;1408     for (count = 0; count < 16; count++)
;;;1409     {
;;;1410       psdstatus[count] = ((psdstatus[count] & SD_0TO7BITS) << 24) |((psdstatus[count] & SD_8TO15BITS) << 8) |
;;;1411                          ((psdstatus[count] & SD_16TO23BITS) >> 8) |((psdstatus[count] & SD_24TO31BITS) >> 24);
;;;1412     }
;;;1413     return(errorstatus);
;;;1414   }
000018  bd70              POP      {r4-r6,pc}
                  |L27.26|
00001a  2040              MOVS     r0,#0x40              ;1312
00001c  4961              LDR      r1,|L27.420|
00001e  6008              STR      r0,[r1,#0]            ;1312  ; SDIO_CmdInitStructure
000020  2010              MOVS     r0,#0x10              ;1313
000022  6048              STR      r0,[r1,#4]            ;1313  ; SDIO_CmdInitStructure
000024  2040              MOVS     r0,#0x40              ;1314
000026  6088              STR      r0,[r1,#8]            ;1314  ; SDIO_CmdInitStructure
000028  2000              MOVS     r0,#0                 ;1315
00002a  60c8              STR      r0,[r1,#0xc]          ;1315  ; SDIO_CmdInitStructure
00002c  f44f6080          MOV      r0,#0x400             ;1316
000030  6108              STR      r0,[r1,#0x10]         ;1316  ; SDIO_CmdInitStructure
000032  4608              MOV      r0,r1                 ;1317
000034  f7fffffe          BL       SDIO_SendCommand
000038  2010              MOVS     r0,#0x10              ;1319
00003a  f7fffffe          BL       CmdResp1Error
00003e  4606              MOV      r6,r0                 ;1319
000040  2e2a              CMP      r6,#0x2a              ;1321
000042  d001              BEQ      |L27.72|
000044  4630              MOV      r0,r6                 ;1323
000046  e7e7              B        |L27.24|
                  |L27.72|
000048  4857              LDR      r0,|L27.424|
00004a  8800              LDRH     r0,[r0,#0]            ;1327  ; RCA
00004c  0400              LSLS     r0,r0,#16             ;1327
00004e  4955              LDR      r1,|L27.420|
000050  6008              STR      r0,[r1,#0]            ;1327  ; SDIO_CmdInitStructure
000052  2037              MOVS     r0,#0x37              ;1328
000054  6048              STR      r0,[r1,#4]            ;1328  ; SDIO_CmdInitStructure
000056  2040              MOVS     r0,#0x40              ;1329
000058  6088              STR      r0,[r1,#8]            ;1329  ; SDIO_CmdInitStructure
00005a  2000              MOVS     r0,#0                 ;1330
00005c  60c8              STR      r0,[r1,#0xc]          ;1330  ; SDIO_CmdInitStructure
00005e  f44f6080          MOV      r0,#0x400             ;1331
000062  6108              STR      r0,[r1,#0x10]         ;1331  ; SDIO_CmdInitStructure
000064  4608              MOV      r0,r1                 ;1332
000066  f7fffffe          BL       SDIO_SendCommand
00006a  2037              MOVS     r0,#0x37              ;1333
00006c  f7fffffe          BL       CmdResp1Error
000070  4606              MOV      r6,r0                 ;1333
000072  2e2a              CMP      r6,#0x2a              ;1335
000074  d001              BEQ      |L27.122|
000076  4630              MOV      r0,r6                 ;1337
000078  e7ce              B        |L27.24|
                  |L27.122|
00007a  484c              LDR      r0,|L27.428|
00007c  494c              LDR      r1,|L27.432|
00007e  6008              STR      r0,[r1,#0]            ;1340  ; SDIO_DataInitStructure
000080  2040              MOVS     r0,#0x40              ;1341
000082  6048              STR      r0,[r1,#4]            ;1341  ; SDIO_DataInitStructure
000084  2060              MOVS     r0,#0x60              ;1342
000086  6088              STR      r0,[r1,#8]            ;1342  ; SDIO_DataInitStructure
000088  2002              MOVS     r0,#2                 ;1343
00008a  60c8              STR      r0,[r1,#0xc]          ;1343  ; SDIO_DataInitStructure
00008c  2000              MOVS     r0,#0                 ;1344
00008e  6108              STR      r0,[r1,#0x10]         ;1344  ; SDIO_DataInitStructure
000090  2001              MOVS     r0,#1                 ;1345
000092  6148              STR      r0,[r1,#0x14]         ;1345  ; SDIO_DataInitStructure
000094  4608              MOV      r0,r1                 ;1346
000096  f7fffffe          BL       SDIO_DataConfig
00009a  2000              MOVS     r0,#0                 ;1349
00009c  4941              LDR      r1,|L27.420|
00009e  6008              STR      r0,[r1,#0]            ;1349  ; SDIO_CmdInitStructure
0000a0  200d              MOVS     r0,#0xd               ;1350
0000a2  6048              STR      r0,[r1,#4]            ;1350  ; SDIO_CmdInitStructure
0000a4  2040              MOVS     r0,#0x40              ;1351
0000a6  6088              STR      r0,[r1,#8]            ;1351  ; SDIO_CmdInitStructure
0000a8  2000              MOVS     r0,#0                 ;1352
0000aa  60c8              STR      r0,[r1,#0xc]          ;1352  ; SDIO_CmdInitStructure
0000ac  f44f6080          MOV      r0,#0x400             ;1353
0000b0  6108              STR      r0,[r1,#0x10]         ;1353  ; SDIO_CmdInitStructure
0000b2  4608              MOV      r0,r1                 ;1354
0000b4  f7fffffe          BL       SDIO_SendCommand
0000b8  200d              MOVS     r0,#0xd               ;1355
0000ba  f7fffffe          BL       CmdResp1Error
0000be  4606              MOV      r6,r0                 ;1355
0000c0  2e2a              CMP      r6,#0x2a              ;1357
0000c2  d001              BEQ      |L27.200|
0000c4  4630              MOV      r0,r6                 ;1359
0000c6  e7a7              B        |L27.24|
                  |L27.200|
0000c8  e00e              B        |L27.232|
                  |L27.202|
0000ca  f44f4000          MOV      r0,#0x8000            ;1364
0000ce  f7fffffe          BL       SDIO_GetFlagStatus
0000d2  b148              CBZ      r0,|L27.232|
0000d4  2500              MOVS     r5,#0                 ;1366
0000d6  e004              B        |L27.226|
                  |L27.216|
0000d8  f7fffffe          BL       SDIO_ReadData
0000dc  f8440025          STR      r0,[r4,r5,LSL #2]     ;1368
0000e0  1c6d              ADDS     r5,r5,#1              ;1366
                  |L27.226|
0000e2  2d08              CMP      r5,#8                 ;1366
0000e4  d3f8              BCC      |L27.216|
0000e6  3420              ADDS     r4,r4,#0x20           ;1370
                  |L27.232|
0000e8  4832              LDR      r0,|L27.436|
0000ea  6b40              LDR      r0,[r0,#0x34]         ;1362
0000ec  f240612a          MOV      r1,#0x62a             ;1362
0000f0  4008              ANDS     r0,r0,r1              ;1362
0000f2  2800              CMP      r0,#0                 ;1362
0000f4  d0e9              BEQ      |L27.202|
0000f6  2008              MOVS     r0,#8                 ;1374
0000f8  f7fffffe          BL       SDIO_GetFlagStatus
0000fc  b128              CBZ      r0,|L27.266|
0000fe  2008              MOVS     r0,#8                 ;1376
000100  f7fffffe          BL       SDIO_ClearFlag
000104  2604              MOVS     r6,#4                 ;1377
000106  4630              MOV      r0,r6                 ;1378
000108  e786              B        |L27.24|
                  |L27.266|
00010a  2002              MOVS     r0,#2                 ;1380
00010c  f7fffffe          BL       SDIO_GetFlagStatus
000110  b128              CBZ      r0,|L27.286|
000112  2002              MOVS     r0,#2                 ;1382
000114  f7fffffe          BL       SDIO_ClearFlag
000118  2602              MOVS     r6,#2                 ;1383
00011a  4630              MOV      r0,r6                 ;1384
00011c  e77c              B        |L27.24|
                  |L27.286|
00011e  2020              MOVS     r0,#0x20              ;1386
000120  f7fffffe          BL       SDIO_GetFlagStatus
000124  b128              CBZ      r0,|L27.306|
000126  2020              MOVS     r0,#0x20              ;1388
000128  f7fffffe          BL       SDIO_ClearFlag
00012c  2606              MOVS     r6,#6                 ;1389
00012e  4630              MOV      r0,r6                 ;1390
000130  e772              B        |L27.24|
                  |L27.306|
000132  f44f7000          MOV      r0,#0x200             ;1392
000136  f7fffffe          BL       SDIO_GetFlagStatus
00013a  b130              CBZ      r0,|L27.330|
00013c  f44f7000          MOV      r0,#0x200             ;1394
000140  f7fffffe          BL       SDIO_ClearFlag
000144  2607              MOVS     r6,#7                 ;1395
000146  4630              MOV      r0,r6                 ;1396
000148  e766              B        |L27.24|
                  |L27.330|
00014a  e003              B        |L27.340|
                  |L27.332|
00014c  f7fffffe          BL       SDIO_ReadData
000150  6020              STR      r0,[r4,#0]            ;1401
000152  1d24              ADDS     r4,r4,#4              ;1402
                  |L27.340|
000154  f44f1000          MOV      r0,#0x200000          ;1399
000158  f7fffffe          BL       SDIO_GetFlagStatus
00015c  2800              CMP      r0,#0                 ;1399
00015e  d1f5              BNE      |L27.332|
000160  f24050ff          MOV      r0,#0x5ff             ;1406
000164  f7fffffe          BL       SDIO_ClearFlag
000168  3c40              SUBS     r4,r4,#0x40           ;1407
00016a  2500              MOVS     r5,#0                 ;1408
00016c  e015              B        |L27.410|
                  |L27.366|
00016e  f8140025          LDRB     r0,[r4,r5,LSL #2]     ;1410
000172  0600              LSLS     r0,r0,#24             ;1410
000174  f8341025          LDRH     r1,[r4,r5,LSL #2]     ;1410
000178  f401417f          AND      r1,r1,#0xff00         ;1410
00017c  ea402001          ORR      r0,r0,r1,LSL #8       ;1410
000180  f8541025          LDR      r1,[r4,r5,LSL #2]     ;1410
000184  f401017f          AND      r1,r1,#0xff0000       ;1410
000188  ea402011          ORR      r0,r0,r1,LSR #8       ;1410
00018c  f8541025          LDR      r1,[r4,r5,LSL #2]     ;1410
000190  ea406011          ORR      r0,r0,r1,LSR #24      ;1410
000194  f8440025          STR      r0,[r4,r5,LSL #2]     ;1410
000198  1c6d              ADDS     r5,r5,#1              ;1408
                  |L27.410|
00019a  2d10              CMP      r5,#0x10              ;1408
00019c  d3e7              BCC      |L27.366|
00019e  4630              MOV      r0,r6                 ;1413
0001a0  e73a              B        |L27.24|
;;;1415   
                          ENDP

0001a2  0000              DCW      0x0000
                  |L27.420|
                          DCD      SDIO_CmdInitStructure
                  |L27.424|
                          DCD      ||RCA||
                  |L27.428|
                          DCD      0x000fffff
                  |L27.432|
                          DCD      SDIO_DataInitStructure
                  |L27.436|
                          DCD      0x40018000

                          AREA ||i.SD_SendStatus||, CODE, READONLY, ALIGN=2

                  SD_SendStatus PROC
;;;1263     */
;;;1264   SD_Error SD_SendStatus(uint32_t *pcardstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1265   {
000002  4604              MOV      r4,r0
;;;1266     SD_Error errorstatus = SD_OK;
000004  252a              MOVS     r5,#0x2a
;;;1267   
;;;1268     if (pcardstatus == NULL)
000006  b914              CBNZ     r4,|L28.14|
;;;1269     {
;;;1270       errorstatus = SD_INVALID_PARAMETER;
000008  2526              MOVS     r5,#0x26
;;;1271       return(errorstatus);
00000a  4628              MOV      r0,r5
                  |L28.12|
;;;1272     }
;;;1273   
;;;1274     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;1275     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1276     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1277     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1278     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1279     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1280   
;;;1281   
;;;1282     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1283   
;;;1284     if (errorstatus != SD_OK)
;;;1285     {
;;;1286       return(errorstatus);
;;;1287     }
;;;1288   
;;;1289     *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1290   
;;;1291     return(errorstatus);
;;;1292   }
00000c  bd70              POP      {r4-r6,pc}
                  |L28.14|
00000e  480f              LDR      r0,|L28.76|
000010  8800              LDRH     r0,[r0,#0]            ;1274  ; RCA
000012  0400              LSLS     r0,r0,#16             ;1274
000014  490e              LDR      r1,|L28.80|
000016  6008              STR      r0,[r1,#0]            ;1274  ; SDIO_CmdInitStructure
000018  200d              MOVS     r0,#0xd               ;1275
00001a  6048              STR      r0,[r1,#4]            ;1275  ; SDIO_CmdInitStructure
00001c  2040              MOVS     r0,#0x40              ;1276
00001e  6088              STR      r0,[r1,#8]            ;1276  ; SDIO_CmdInitStructure
000020  2000              MOVS     r0,#0                 ;1277
000022  60c8              STR      r0,[r1,#0xc]          ;1277  ; SDIO_CmdInitStructure
000024  f44f6080          MOV      r0,#0x400             ;1278
000028  6108              STR      r0,[r1,#0x10]         ;1278  ; SDIO_CmdInitStructure
00002a  4608              MOV      r0,r1                 ;1279
00002c  f7fffffe          BL       SDIO_SendCommand
000030  200d              MOVS     r0,#0xd               ;1282
000032  f7fffffe          BL       CmdResp1Error
000036  4605              MOV      r5,r0                 ;1282
000038  2d2a              CMP      r5,#0x2a              ;1284
00003a  d001              BEQ      |L28.64|
00003c  4628              MOV      r0,r5                 ;1286
00003e  e7e5              B        |L28.12|
                  |L28.64|
000040  2000              MOVS     r0,#0                 ;1289
000042  f7fffffe          BL       SDIO_GetResponse
000046  6020              STR      r0,[r4,#0]            ;1289
000048  4628              MOV      r0,r5                 ;1291
00004a  e7df              B        |L28.12|
;;;1293   
                          ENDP

                  |L28.76|
                          DCD      ||RCA||
                  |L28.80|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_StopTransfer||, CODE, READONLY, ALIGN=2

                  SD_StopTransfer PROC
;;;1145     */
;;;1146   SD_Error SD_StopTransfer(void)
000000  b510              PUSH     {r4,lr}
;;;1147   {
;;;1148     SD_Error errorstatus = SD_OK;
000002  242a              MOVS     r4,#0x2a
;;;1149   
;;;1150     /*!< Send CMD12 STOP_TRANSMISSION  */
;;;1151     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000004  2000              MOVS     r0,#0
000006  490a              LDR      r1,|L29.48|
000008  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1152     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
00000a  200c              MOVS     r0,#0xc
00000c  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1153     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00000e  2040              MOVS     r0,#0x40
000010  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1154     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000012  2000              MOVS     r0,#0
000014  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1155     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000016  f44f6080          MOV      r0,#0x400
00001a  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1156     SDIO_SendCommand(&SDIO_CmdInitStructure);
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       SDIO_SendCommand
;;;1157   
;;;1158     errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
000022  200c              MOVS     r0,#0xc
000024  f7fffffe          BL       CmdResp1Error
000028  4604              MOV      r4,r0
;;;1159   
;;;1160     return(errorstatus);
00002a  4620              MOV      r0,r4
;;;1161   }
00002c  bd10              POP      {r4,pc}
;;;1162   
                          ENDP

00002e  0000              DCW      0x0000
                  |L29.48|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_WriteBlock||, CODE, READONLY, ALIGN=2

                  SD_WriteBlock PROC
;;;922      */
;;;923    SD_Error SD_WriteBlock(uint32_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;924    {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4614              MOV      r4,r2
;;;925      SD_Error errorstatus = SD_OK;
00000a  252a              MOVS     r5,#0x2a
;;;926      uint8_t  power = 0, cardstate = 0;
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
000010  9002              STR      r0,[sp,#8]
;;;927      uint32_t timeout = 0, bytestransferred = 0;
000012  4683              MOV      r11,r0
000014  2600              MOVS     r6,#0
;;;928      uint32_t cardstatus = 0, count = 0, restwords = 0;
000016  9001              STR      r0,[sp,#4]
000018  2700              MOVS     r7,#0
00001a  9000              STR      r0,[sp,#0]
;;;929      uint32_t *tempbuff = (uint32_t *)writebuff;
00001c  46c8              MOV      r8,r9
;;;930    
;;;931      if (writebuff == NULL)
00001e  f1b90f00          CMP      r9,#0
000022  d104              BNE      |L30.46|
;;;932      {
;;;933        errorstatus = SD_INVALID_PARAMETER;
000024  2526              MOVS     r5,#0x26
;;;934        return(errorstatus);
000026  4628              MOV      r0,r5
                  |L30.40|
;;;935      }
;;;936    
;;;937      TransferError = SD_OK;
;;;938      TransferEnd = 0;
;;;939      TotalNumberOfBytes = 0;
;;;940    
;;;941      SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;942      SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;943      SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;944      SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;945      SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;946      SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;947      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;948      SDIO_DMACmd(DISABLE);
;;;949    
;;;950      if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;951      {
;;;952        errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;953        return(errorstatus);
;;;954      }
;;;955    
;;;956      if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;957      {
;;;958        BlockSize = 512;
;;;959        WriteAddr /= 512;
;;;960      }
;;;961      
;;;962      /*!< Set the block size, both on controller and card */
;;;963      if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;964      {
;;;965        power = convert_from_bytes_to_power_of_two(BlockSize);
;;;966    
;;;967        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;968        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;969        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;970        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;971        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;972        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;973    
;;;974        errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;975    
;;;976        if (errorstatus != SD_OK)
;;;977        {
;;;978          return(errorstatus);
;;;979        }
;;;980      }
;;;981      else
;;;982      {
;;;983        errorstatus = SD_INVALID_PARAMETER;
;;;984        return(errorstatus);
;;;985      }
;;;986    
;;;987      /*!< Wait till card is ready for data Added */
;;;988      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;989      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;990      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;991      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;992      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;993      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;994    
;;;995      errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;996    
;;;997      if (errorstatus != SD_OK)
;;;998      {
;;;999        return(errorstatus);
;;;1000     }
;;;1001   
;;;1002     cardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1003   
;;;1004     timeout = SD_DATATIMEOUT;
;;;1005   
;;;1006     while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
;;;1007     {
;;;1008       timeout--;
;;;1009       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1010       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1011       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1012       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1013       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1014       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1015   
;;;1016       errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1017   
;;;1018       if (errorstatus != SD_OK)
;;;1019       {
;;;1020         return(errorstatus);
;;;1021       }
;;;1022       cardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1023     }
;;;1024   
;;;1025     if (timeout == 0)
;;;1026     {
;;;1027       return(SD_ERROR);
;;;1028     }
;;;1029   
;;;1030     /*!< Send CMD24 WRITE_SINGLE_BLOCK */
;;;1031     SDIO_CmdInitStructure.SDIO_Argument = WriteAddr;
;;;1032     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
;;;1033     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1034     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1035     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1036     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1037   
;;;1038     errorstatus = CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);
;;;1039   
;;;1040     if (errorstatus != SD_OK)
;;;1041     {
;;;1042       return(errorstatus);
;;;1043     }
;;;1044   
;;;1045     TotalNumberOfBytes = BlockSize;
;;;1046     StopCondition = 0;
;;;1047     SrcBuffer = (uint32_t *)writebuff;
;;;1048   
;;;1049     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1050     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1051     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1052     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1053     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1054     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1055     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1056   
;;;1057     /*!< In case of single data block transfer no need of stop command at all */
;;;1058       while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1059       {
;;;1060         if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1061         {
;;;1062           if ((TotalNumberOfBytes - bytestransferred) < 32)
;;;1063           {
;;;1064             restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) : (( TotalNumberOfBytes -  bytestransferred) / 4 + 1);
;;;1065   
;;;1066             for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1067             {
;;;1068               SDIO_WriteData(*tempbuff);
;;;1069             }
;;;1070           }
;;;1071           else
;;;1072           {
;;;1073             for (count = 0; count < 8; count++)
;;;1074             {
;;;1075               SDIO_WriteData(*(tempbuff + count));
;;;1076             }
;;;1077             tempbuff += 8;
;;;1078             bytestransferred += 32;
;;;1079           }
;;;1080         }
;;;1081       }
;;;1082       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1083       {
;;;1084         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1085         errorstatus = SD_DATA_TIMEOUT;
;;;1086         return(errorstatus);
;;;1087       }
;;;1088       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1089       {
;;;1090         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1091         errorstatus = SD_DATA_CRC_FAIL;
;;;1092         return(errorstatus);
;;;1093       }
;;;1094       else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1095       {
;;;1096         SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1097         errorstatus = SD_TX_UNDERRUN;
;;;1098         return(errorstatus);
;;;1099       }
;;;1100       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1101       {
;;;1102         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1103         errorstatus = SD_START_BIT_ERR;
;;;1104         return(errorstatus);
;;;1105       }
;;;1106   
;;;1107     /*!< Clear all the static flags */
;;;1108     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1109   
;;;1110     /*!< Wait till the card is in programming state */
;;;1111     errorstatus = IsCardProgramming(&cardstate);
;;;1112   
;;;1113     while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
;;;1114     {
;;;1115       errorstatus = IsCardProgramming(&cardstate);
;;;1116     }
;;;1117   
;;;1118     return(errorstatus);
;;;1119   }
000028  b004              ADD      sp,sp,#0x10
00002a  e8bd9ff0          POP      {r4-r12,pc}
                  |L30.46|
00002e  202a              MOVS     r0,#0x2a              ;937
000030  49a3              LDR      r1,|L30.704|
000032  7008              STRB     r0,[r1,#0]            ;937
000034  2000              MOVS     r0,#0                 ;938
000036  49a3              LDR      r1,|L30.708|
000038  6008              STR      r0,[r1,#0]            ;938  ; TransferEnd
00003a  49a3              LDR      r1,|L30.712|
00003c  6008              STR      r0,[r1,#0]            ;939  ; TotalNumberOfBytes
00003e  48a3              LDR      r0,|L30.716|
000040  49a3              LDR      r1,|L30.720|
000042  6008              STR      r0,[r1,#0]            ;941  ; SDIO_DataInitStructure
000044  2000              MOVS     r0,#0                 ;942
000046  6048              STR      r0,[r1,#4]            ;942  ; SDIO_DataInitStructure
000048  6088              STR      r0,[r1,#8]            ;943  ; SDIO_DataInitStructure
00004a  60c8              STR      r0,[r1,#0xc]          ;944  ; SDIO_DataInitStructure
00004c  6108              STR      r0,[r1,#0x10]         ;945  ; SDIO_DataInitStructure
00004e  6148              STR      r0,[r1,#0x14]         ;946  ; SDIO_DataInitStructure
000050  4608              MOV      r0,r1                 ;947
000052  f7fffffe          BL       SDIO_DataConfig
000056  2000              MOVS     r0,#0                 ;948
000058  f7fffffe          BL       SDIO_DMACmd
00005c  2000              MOVS     r0,#0                 ;950
00005e  f7fffffe          BL       SDIO_GetResponse
000062  f0007000          AND      r0,r0,#0x2000000      ;950
000066  b110              CBZ      r0,|L30.110|
000068  250e              MOVS     r5,#0xe               ;952
00006a  4628              MOV      r0,r5                 ;953
00006c  e7dc              B        |L30.40|
                  |L30.110|
00006e  4899              LDR      r0,|L30.724|
000070  6800              LDR      r0,[r0,#0]            ;956  ; CardType
000072  2802              CMP      r0,#2                 ;956
000074  d102              BNE      |L30.124|
000076  0204              LSLS     r4,r0,#8              ;958
000078  ea4f2a5a          LSR      r10,r10,#9            ;959
                  |L30.124|
00007c  2c00              CMP      r4,#0                 ;963
00007e  dd20              BLE      |L30.194|
000080  f5b46f00          CMP      r4,#0x800             ;963
000084  dc1d              BGT      |L30.194|
000086  1e60              SUBS     r0,r4,#1              ;963
000088  4020              ANDS     r0,r0,r4              ;963
00008a  b9d0              CBNZ     r0,|L30.194|
00008c  4620              MOV      r0,r4                 ;965
00008e  f7fffffe          BL       convert_from_bytes_to_power_of_two
000092  9003              STR      r0,[sp,#0xc]          ;965
000094  4890              LDR      r0,|L30.728|
000096  6004              STR      r4,[r0,#0]            ;967  ; SDIO_CmdInitStructure
000098  2010              MOVS     r0,#0x10              ;968
00009a  498f              LDR      r1,|L30.728|
00009c  6048              STR      r0,[r1,#4]            ;968  ; SDIO_CmdInitStructure
00009e  2040              MOVS     r0,#0x40              ;969
0000a0  6088              STR      r0,[r1,#8]            ;969  ; SDIO_CmdInitStructure
0000a2  2000              MOVS     r0,#0                 ;970
0000a4  60c8              STR      r0,[r1,#0xc]          ;970  ; SDIO_CmdInitStructure
0000a6  f44f6080          MOV      r0,#0x400             ;971
0000aa  6108              STR      r0,[r1,#0x10]         ;971  ; SDIO_CmdInitStructure
0000ac  4608              MOV      r0,r1                 ;972
0000ae  f7fffffe          BL       SDIO_SendCommand
0000b2  2010              MOVS     r0,#0x10              ;974
0000b4  f7fffffe          BL       CmdResp1Error
0000b8  4605              MOV      r5,r0                 ;974
0000ba  2d2a              CMP      r5,#0x2a              ;976
0000bc  d004              BEQ      |L30.200|
0000be  4628              MOV      r0,r5                 ;978
0000c0  e7b2              B        |L30.40|
                  |L30.194|
0000c2  2526              MOVS     r5,#0x26              ;983
0000c4  4628              MOV      r0,r5                 ;984
0000c6  e7af              B        |L30.40|
                  |L30.200|
0000c8  4884              LDR      r0,|L30.732|
0000ca  8800              LDRH     r0,[r0,#0]            ;988  ; RCA
0000cc  0400              LSLS     r0,r0,#16             ;988
0000ce  4982              LDR      r1,|L30.728|
0000d0  6008              STR      r0,[r1,#0]            ;988  ; SDIO_CmdInitStructure
0000d2  200d              MOVS     r0,#0xd               ;989
0000d4  6048              STR      r0,[r1,#4]            ;989  ; SDIO_CmdInitStructure
0000d6  2040              MOVS     r0,#0x40              ;990
0000d8  6088              STR      r0,[r1,#8]            ;990  ; SDIO_CmdInitStructure
0000da  2000              MOVS     r0,#0                 ;991
0000dc  60c8              STR      r0,[r1,#0xc]          ;991  ; SDIO_CmdInitStructure
0000de  f44f6080          MOV      r0,#0x400             ;992
0000e2  6108              STR      r0,[r1,#0x10]         ;992  ; SDIO_CmdInitStructure
0000e4  4608              MOV      r0,r1                 ;993
0000e6  f7fffffe          BL       SDIO_SendCommand
0000ea  200d              MOVS     r0,#0xd               ;995
0000ec  f7fffffe          BL       CmdResp1Error
0000f0  4605              MOV      r5,r0                 ;995
0000f2  2d2a              CMP      r5,#0x2a              ;997
0000f4  d001              BEQ      |L30.250|
0000f6  4628              MOV      r0,r5                 ;999
0000f8  e796              B        |L30.40|
                  |L30.250|
0000fa  2000              MOVS     r0,#0                 ;1002
0000fc  f7fffffe          BL       SDIO_GetResponse
000100  9001              STR      r0,[sp,#4]            ;1002
000102  f8dfb1c8          LDR      r11,|L30.716|
000106  e01e              B        |L30.326|
                  |L30.264|
000108  f1ab0b01          SUB      r11,r11,#1            ;1008
00010c  4873              LDR      r0,|L30.732|
00010e  8800              LDRH     r0,[r0,#0]            ;1009  ; RCA
000110  0400              LSLS     r0,r0,#16             ;1009
000112  4971              LDR      r1,|L30.728|
000114  6008              STR      r0,[r1,#0]            ;1009  ; SDIO_CmdInitStructure
000116  200d              MOVS     r0,#0xd               ;1010
000118  6048              STR      r0,[r1,#4]            ;1010  ; SDIO_CmdInitStructure
00011a  2040              MOVS     r0,#0x40              ;1011
00011c  6088              STR      r0,[r1,#8]            ;1011  ; SDIO_CmdInitStructure
00011e  2000              MOVS     r0,#0                 ;1012
000120  60c8              STR      r0,[r1,#0xc]          ;1012  ; SDIO_CmdInitStructure
000122  f44f6080          MOV      r0,#0x400             ;1013
000126  6108              STR      r0,[r1,#0x10]         ;1013  ; SDIO_CmdInitStructure
000128  4608              MOV      r0,r1                 ;1014
00012a  f7fffffe          BL       SDIO_SendCommand
00012e  200d              MOVS     r0,#0xd               ;1016
000130  f7fffffe          BL       CmdResp1Error
000134  4605              MOV      r5,r0                 ;1016
000136  2d2a              CMP      r5,#0x2a              ;1018
000138  d001              BEQ      |L30.318|
00013a  4628              MOV      r0,r5                 ;1020
00013c  e774              B        |L30.40|
                  |L30.318|
00013e  2000              MOVS     r0,#0                 ;1022
000140  f7fffffe          BL       SDIO_GetResponse
000144  9001              STR      r0,[sp,#4]            ;1022
                  |L30.326|
000146  9801              LDR      r0,[sp,#4]            ;1006
000148  f4007080          AND      r0,r0,#0x100          ;1006
00014c  b910              CBNZ     r0,|L30.340|
00014e  f1bb0f00          CMP      r11,#0                ;1006
000152  d1d9              BNE      |L30.264|
                  |L30.340|
000154  f1bb0f00          CMP      r11,#0                ;1025
000158  d101              BNE      |L30.350|
00015a  2029              MOVS     r0,#0x29              ;1027
00015c  e764              B        |L30.40|
                  |L30.350|
00015e  485e              LDR      r0,|L30.728|
000160  f8c0a000          STR      r10,[r0,#0]           ;1031  ; SDIO_CmdInitStructure
000164  2018              MOVS     r0,#0x18              ;1032
000166  495c              LDR      r1,|L30.728|
000168  6048              STR      r0,[r1,#4]            ;1032  ; SDIO_CmdInitStructure
00016a  2040              MOVS     r0,#0x40              ;1033
00016c  6088              STR      r0,[r1,#8]            ;1033  ; SDIO_CmdInitStructure
00016e  2000              MOVS     r0,#0                 ;1034
000170  60c8              STR      r0,[r1,#0xc]          ;1034  ; SDIO_CmdInitStructure
000172  f44f6080          MOV      r0,#0x400             ;1035
000176  6108              STR      r0,[r1,#0x10]         ;1035  ; SDIO_CmdInitStructure
000178  4608              MOV      r0,r1                 ;1036
00017a  f7fffffe          BL       SDIO_SendCommand
00017e  2018              MOVS     r0,#0x18              ;1038
000180  f7fffffe          BL       CmdResp1Error
000184  4605              MOV      r5,r0                 ;1038
000186  2d2a              CMP      r5,#0x2a              ;1040
000188  d001              BEQ      |L30.398|
00018a  4628              MOV      r0,r5                 ;1042
00018c  e74c              B        |L30.40|
                  |L30.398|
00018e  484e              LDR      r0,|L30.712|
000190  6004              STR      r4,[r0,#0]            ;1045  ; TotalNumberOfBytes
000192  2000              MOVS     r0,#0                 ;1046
000194  4952              LDR      r1,|L30.736|
000196  6008              STR      r0,[r1,#0]            ;1046  ; StopCondition
000198  4852              LDR      r0,|L30.740|
00019a  f8c09000          STR      r9,[r0,#0]            ;1047  ; SrcBuffer
00019e  484b              LDR      r0,|L30.716|
0001a0  494b              LDR      r1,|L30.720|
0001a2  6008              STR      r0,[r1,#0]            ;1049  ; SDIO_DataInitStructure
0001a4  4608              MOV      r0,r1                 ;1050
0001a6  6044              STR      r4,[r0,#4]            ;1050  ; SDIO_DataInitStructure
0001a8  9803              LDR      r0,[sp,#0xc]          ;1051
0001aa  0100              LSLS     r0,r0,#4              ;1051
0001ac  6088              STR      r0,[r1,#8]            ;1051  ; SDIO_DataInitStructure
0001ae  2000              MOVS     r0,#0                 ;1052
0001b0  60c8              STR      r0,[r1,#0xc]          ;1052  ; SDIO_DataInitStructure
0001b2  6108              STR      r0,[r1,#0x10]         ;1053  ; SDIO_DataInitStructure
0001b4  2001              MOVS     r0,#1                 ;1054
0001b6  6148              STR      r0,[r1,#0x14]         ;1054  ; SDIO_DataInitStructure
0001b8  4608              MOV      r0,r1                 ;1055
0001ba  f7fffffe          BL       SDIO_DataConfig
0001be  e034              B        |L30.554|
                  |L30.448|
0001c0  f44f4080          MOV      r0,#0x4000            ;1060
0001c4  f7fffffe          BL       SDIO_GetFlagStatus
0001c8  b378              CBZ      r0,|L30.554|
0001ca  483f              LDR      r0,|L30.712|
0001cc  6800              LDR      r0,[r0,#0]            ;1062  ; TotalNumberOfBytes
0001ce  1b80              SUBS     r0,r0,r6              ;1062
0001d0  2820              CMP      r0,#0x20              ;1062
0001d2  d21e              BCS      |L30.530|
0001d4  483c              LDR      r0,|L30.712|
0001d6  7800              LDRB     r0,[r0,#0]            ;1064  ; TotalNumberOfBytes
0001d8  1b80              SUBS     r0,r0,r6              ;1064
0001da  f0000003          AND      r0,r0,#3              ;1064
0001de  b920              CBNZ     r0,|L30.490|
0001e0  4839              LDR      r0,|L30.712|
0001e2  6800              LDR      r0,[r0,#0]            ;1064  ; TotalNumberOfBytes
0001e4  1b80              SUBS     r0,r0,r6              ;1064
0001e6  0880              LSRS     r0,r0,#2              ;1064
0001e8  e004              B        |L30.500|
                  |L30.490|
0001ea  4837              LDR      r0,|L30.712|
0001ec  6800              LDR      r0,[r0,#0]            ;1064  ; TotalNumberOfBytes
0001ee  1b80              SUBS     r0,r0,r6              ;1064
0001f0  0880              LSRS     r0,r0,#2              ;1064
0001f2  1c40              ADDS     r0,r0,#1              ;1064
                  |L30.500|
0001f4  9000              STR      r0,[sp,#0]            ;1064
0001f6  2700              MOVS     r7,#0                 ;1066
0001f8  e007              B        |L30.522|
                  |L30.506|
0001fa  f8d80000          LDR      r0,[r8,#0]            ;1068
0001fe  f7fffffe          BL       SDIO_WriteData
000202  1c7f              ADDS     r7,r7,#1              ;1066
000204  f1080804          ADD      r8,r8,#4              ;1066
000208  1d36              ADDS     r6,r6,#4              ;1066
                  |L30.522|
00020a  9800              LDR      r0,[sp,#0]            ;1066
00020c  4287              CMP      r7,r0                 ;1066
00020e  d20c              BCS      |L30.554|
000210  e7f3              B        |L30.506|
                  |L30.530|
000212  2700              MOVS     r7,#0                 ;1073
000214  e004              B        |L30.544|
                  |L30.534|
000216  f8580027          LDR      r0,[r8,r7,LSL #2]     ;1075
00021a  f7fffffe          BL       SDIO_WriteData
00021e  1c7f              ADDS     r7,r7,#1              ;1073
                  |L30.544|
000220  2f08              CMP      r7,#8                 ;1073
000222  d3f8              BCC      |L30.534|
000224  f1080820          ADD      r8,r8,#0x20           ;1077
000228  3620              ADDS     r6,r6,#0x20           ;1078
                  |L30.554|
00022a  482f              LDR      r0,|L30.744|
00022c  6b40              LDR      r0,[r0,#0x34]         ;1058
00022e  f240611a          MOV      r1,#0x61a             ;1058
000232  4008              ANDS     r0,r0,r1              ;1058
000234  2800              CMP      r0,#0                 ;1058
000236  d0c3              BEQ      |L30.448|
000238  2008              MOVS     r0,#8                 ;1082
00023a  f7fffffe          BL       SDIO_GetFlagStatus
00023e  b128              CBZ      r0,|L30.588|
000240  2008              MOVS     r0,#8                 ;1084
000242  f7fffffe          BL       SDIO_ClearFlag
000246  2504              MOVS     r5,#4                 ;1085
000248  4628              MOV      r0,r5                 ;1086
00024a  e6ed              B        |L30.40|
                  |L30.588|
00024c  2002              MOVS     r0,#2                 ;1088
00024e  f7fffffe          BL       SDIO_GetFlagStatus
000252  b128              CBZ      r0,|L30.608|
000254  2002              MOVS     r0,#2                 ;1090
000256  f7fffffe          BL       SDIO_ClearFlag
00025a  2502              MOVS     r5,#2                 ;1091
00025c  4628              MOV      r0,r5                 ;1092
00025e  e6e3              B        |L30.40|
                  |L30.608|
000260  2010              MOVS     r0,#0x10              ;1094
000262  f7fffffe          BL       SDIO_GetFlagStatus
000266  b128              CBZ      r0,|L30.628|
000268  2010              MOVS     r0,#0x10              ;1096
00026a  f7fffffe          BL       SDIO_ClearFlag
00026e  2505              MOVS     r5,#5                 ;1097
000270  4628              MOV      r0,r5                 ;1098
000272  e6d9              B        |L30.40|
                  |L30.628|
000274  f44f7000          MOV      r0,#0x200             ;1100
000278  f7fffffe          BL       SDIO_GetFlagStatus
00027c  b130              CBZ      r0,|L30.652|
00027e  f44f7000          MOV      r0,#0x200             ;1102
000282  f7fffffe          BL       SDIO_ClearFlag
000286  2507              MOVS     r5,#7                 ;1103
000288  4628              MOV      r0,r5                 ;1104
00028a  e6cd              B        |L30.40|
                  |L30.652|
00028c  f24050ff          MOV      r0,#0x5ff             ;1108
000290  f7fffffe          BL       SDIO_ClearFlag
000294  a802              ADD      r0,sp,#8              ;1111
000296  f7fffffe          BL       IsCardProgramming
00029a  4605              MOV      r5,r0                 ;1111
00029c  e003              B        |L30.678|
                  |L30.670|
00029e  a802              ADD      r0,sp,#8              ;1115
0002a0  f7fffffe          BL       IsCardProgramming
0002a4  4605              MOV      r5,r0                 ;1115
                  |L30.678|
0002a6  2d2a              CMP      r5,#0x2a              ;1113
0002a8  d107              BNE      |L30.698|
0002aa  f89d0008          LDRB     r0,[sp,#8]            ;1113
0002ae  2807              CMP      r0,#7                 ;1113
0002b0  d0f5              BEQ      |L30.670|
0002b2  f89d0008          LDRB     r0,[sp,#8]            ;1113
0002b6  2806              CMP      r0,#6                 ;1113
0002b8  d0f1              BEQ      |L30.670|
                  |L30.698|
0002ba  4628              MOV      r0,r5                 ;1118
0002bc  e6b4              B        |L30.40|
;;;1120   
                          ENDP

0002be  0000              DCW      0x0000
                  |L30.704|
                          DCD      TransferError
                  |L30.708|
                          DCD      TransferEnd
                  |L30.712|
                          DCD      TotalNumberOfBytes
                  |L30.716|
                          DCD      0x000fffff
                  |L30.720|
                          DCD      SDIO_DataInitStructure
                  |L30.724|
                          DCD      CardType
                  |L30.728|
                          DCD      SDIO_CmdInitStructure
                  |L30.732|
                          DCD      ||RCA||
                  |L30.736|
                          DCD      StopCondition
                  |L30.740|
                          DCD      SrcBuffer
                  |L30.744|
                          DCD      0x40018000

                          AREA ||i.convert_from_bytes_to_power_of_two||, CODE, READONLY, ALIGN=1

                  convert_from_bytes_to_power_of_two PROC
;;;2282     */
;;;2283   static uint8_t convert_from_bytes_to_power_of_two(uint16_t NumberOfBytes)
000000  4601              MOV      r1,r0
;;;2284   {
;;;2285     uint8_t count = 0;
000002  2000              MOVS     r0,#0
;;;2286   
;;;2287     while (NumberOfBytes != 1)
000004  e002              B        |L31.12|
                  |L31.6|
;;;2288     {
;;;2289       NumberOfBytes >>= 1;
000006  1049              ASRS     r1,r1,#1
;;;2290       count++;
000008  1c42              ADDS     r2,r0,#1
00000a  b2d0              UXTB     r0,r2
                  |L31.12|
00000c  2901              CMP      r1,#1                 ;2287
00000e  d1fa              BNE      |L31.6|
;;;2291     }
;;;2292     return(count);
;;;2293   }
000010  4770              BX       lr
;;;2294   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CSD_Tab
                          %        16
                  CID_Tab
                          %        16
                  SDCardInfo
                          %        80
                  SDIO_InitStructure
                          %        24
                  SDIO_CmdInitStructure
                          %        20
                  SDIO_DataInitStructure
                          %        24

                          AREA ||.data||, DATA, ALIGN=2

                  CardType
                          DCD      0x00000000
                  ||RCA||
                          DCD      0x00000000
                  DeviceMode
                          DCD      0x00000002
                  TotalNumberOfBytes
                          DCD      0x00000000
                  StopCondition
                          DCD      0x00000000
                  SrcBuffer
                          DCD      0x00000000
                  DestBuffer
                          DCD      0x00000000
                  TransferError
00001c  2a000000          DCB      0x2a,0x00,0x00,0x00
                  TransferEnd
                          DCD      0x00000000
                  NumberOfBytes
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Core\\Src\\sdio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_sdio_c_4ab284f9____REV16|
#line 388 ".\\Core\\Inc\\cmsis_armcc.h"
|__asm___6_sdio_c_4ab284f9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_sdio_c_4ab284f9____REVSH|
#line 402
|__asm___6_sdio_c_4ab284f9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_sdio_c_4ab284f9____RRX|
#line 587
|__asm___6_sdio_c_4ab284f9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
